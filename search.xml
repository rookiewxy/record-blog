<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>20211015Form</title>
      <link href="/record-blog/2021/10/15/20211015/"/>
      <url>/record-blog/2021/10/15/20211015/</url>
      
        <content type="html"><![CDATA[<h2 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h2><h4 id="一、已完成功能"><a href="#一、已完成功能" class="headerlink" title="一、已完成功能"></a>一、已完成功能</h4><ul><li>验证</li><li>提交</li><li>重置</li><li>设置属性</li></ul><h4 id="二、目录结构"><a href="#二、目录结构" class="headerlink" title="二、目录结构"></a>二、目录结构</h4><p><img src="https://ss.im5i.com/2021/10/15/r3MAq.png" alt="image-20211015153328739"></p><h4 id="三、代码解读"><a href="#三、代码解读" class="headerlink" title="三、代码解读"></a>三、代码解读</h4><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">&#x2F;&#x2F; form.tsx部分代码const InternalForm &#x3D; React.forwardRef&lt;unknown, FormProps&gt;((props, ref) &#x3D;&gt; &#123;  &#x2F;&#x2F; 使用name组成的对象  let store:any &#x3D; &#123;&#125;    const &#123;     name,    layout&#x3D;&#39;horizontal&#39;,     children,     onFinish,     labelCol,    wrapperCol,    component:Component&#x3D;&#39;form&#39;,    initialValues  &#125; &#x3D; props;      const [prefixCls, setPrefixCls] &#x3D; useGetPrefixCls();  const [refs, setRefs] &#x3D; useRefs&lt;any&gt;();  const [model, setModel] &#x3D; useSetState(store)...... &lt;FormContext.Provider value&#x3D;&#123;&#123;      prefixCls,      labelCol,      wrapperCol,      model,      setModel,      initialValues    &#125;&#125;&gt;      &lt;Component         id&#x3D;&#123;name&#125;         className&#x3D;&#123;classes&#125;        onSubmit&#x3D;&#123;(event: React.FormEvent&lt;HTMLFormElement&gt;) &#x3D;&gt; &#123;          event.preventDefault();          event.stopPropagation();          onSubmit()        &#125;&#125;        &gt;&#123;          React.Children.map(children,(child, index)&#x3D;&gt;&#123;            &#x2F;&#x2F; 具有name属性的字段保存下来，方便验证            const &#123; name, valuePropName&#125; &#x3D; (child as any)?.props            name &amp;&amp; (store[name] &#x3D; initialValues?.[name]?initialValues[name]:valuePropName&#x3D;&#x3D;&#x3D;&#39;checked&#39;?false:&#39;&#39;)            if (!React.isValidElement(child)) return null;            return React.cloneElement(child,&#123;              ref:setRefs(index)            &#125;)          &#125;)        &#125;&lt;&#x2F;Component&gt;    &lt;&#x2F;FormContext.Provider&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>form的主要操作是获取子组件的方法（通过传入的ref），例如验证和重置，因为有三层的嵌套，传参使用context的方式</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">&#x2F;&#x2F; form-item-input.tsx代码import * as React from &#39;react&#39;import AsyncValidator from &#39;async-validator&#39;;import  c from &#39;classnames&#39;import &#123; Col &#125; from &#39;..&#x2F;index&#39;import &#123; ColProps &#125; from &#39;..&#x2F;grid&#x2F;col&#39;;import &#123; FormContext &#125; from &#39;.&#x2F;context&#39;import &#123; isObject &#125; from &#39;@xt-ui&#x2F;utils&#39;;export interface FormItemInputRef &#123;  validate:Function&#125;export interface FormItemInputProps &#123;  colon?: boolean;  valuePropName?:string;  label?: React.ReactNode;  wrapperCol?: ColProps;  rules?: any;  [propName: string]: any;&#125;const FormItemInput &#x3D; React.forwardRef&lt;unknown, FormItemInputProps&gt;((props, ref) &#x3D;&gt; &#123;  const &#123; children, wrapperCol, rules, valuePropName, name &#125; &#x3D; props  const formContext &#x3D; React.useContext(FormContext)  let &#123;     model,     setModel,    prefixCls,     initialValues   &#125; &#x3D; formContext    const [error, setError] &#x3D; React.useState(&#39;&#39;)    &#x2F;&#x2F; 传给父级验证方法  React.useImperativeHandle(ref,()&#x3D;&gt;&#123;    return &#123;        props,        validate,        resetField    &#125;  &#125;)  &#x2F;&#x2F; !如果自己设置了col着覆盖父级的col  const mergedWrapperCol: ColProps &#x3D; wrapperCol || formContext.wrapperCol || &#123;&#125;;  &#x2F;&#x2F; 验证  const validate &#x3D; (trigger: string, cb?: Function): boolean | void &#x3D;&gt; &#123;    &#x2F;&#x2F; 获取对应rules    const rules &#x3D; getFilteredRule(trigger);    if (!rules || rules.length &#x3D;&#x3D;&#x3D; 0) &#123;      if (cb instanceof Function) &#123;        cb();      &#125;      return true;    &#125;    const descriptor &#x3D; &#123;[name]: rules &#125;;    &#x2F;&#x2F; 存放rule以字典形式    const validator &#x3D; new AsyncValidator(descriptor);    const model &#x3D; &#123; [name]: fieldValue() &#125;;    validator.validate(model, &#123; firstFields: true &#125;, (errors) &#x3D;&gt; &#123;      setError(errors ? errors[0].message! : &#39;&#39;)      if (cb instanceof Function) &#123;        cb(errors);      &#125;    &#125;);  &#125;  const resetField &#x3D; () &#x3D;&gt; &#123;    &#x2F;&#x2F; 清除验证提示    setError(&#39;&#39;)    if(Object.keys(model).length&gt;0)&#123;      &#x2F;&#x2F; !重置如果有initialValues则显示initialValues，否则置空，input的value不能为null或者undefined      model[name] &#x3D; initialValues?.[name]?initialValues[name]:valuePropName&#x3D;&#x3D;&#x3D;&#39;checked&#39;?false:&#39;&#39;      setModel(model)    &#125;  &#125;  &#x2F;&#x2F; 获取rules下的value  const fieldValue &#x3D; () &#x3D;&gt; &#123;    if (!model || !name) &#123; return; &#125;    return rules &amp;&amp; model[name]  &#125;  &#x2F;**   * @description: 查找对应的rules   * @param &#123;string&#125; trigger 事件类型   * @return &#123;*&#125;   * @author: wxy   *&#x2F;  const getFilteredRule &#x3D; (trigger: string): Array&lt;any&gt; &#x3D;&gt; &#123;    const rulesList &#x3D; [].concat(rules);    return rulesList.filter((rule:any) &#x3D;&gt; &#123;      if (!rule?.trigger || trigger &#x3D;&#x3D;&#x3D; &#39;&#39;) return true;      if (Array.isArray(rule.trigger)) &#123;        return rule.trigger.indexOf(trigger) &gt; -1;      &#125; else &#123;        return rule.trigger &#x3D;&#x3D;&#x3D; trigger;      &#125;    &#125;).map((rule:any) &#x3D;&gt; Object.assign(&#123;&#125;, rule));  &#125;  &#x2F;**   * @description: 通过绑定事件获取实时的值   * @param &#123;React&#125; e 事件对象或者选中状态   * @author: wxy   *&#x2F;    const getControlField &#x3D; (e:React.ChangeEvent&lt;any&gt;) &#x3D;&gt; &#123;    let value &#x3D; e?.target?.value    &#x2F;&#x2F; console.log(isObject(e));        if(name)&#123;      &#x2F;&#x2F; !onChange返回的值不一样，需要判断      const fieldValue &#x3D; isObject(e) ? value : e      model[name] &#x3D; fieldValue      validate(&#39;change&#39;);      setModel(model)      &#x2F;&#x2F; 给子组件添加onChange事件会和本身的onChange起冲突      React.Children.map(children,(child:any) &#x3D;&gt; &#123;          child.props?.onChange?.(fieldValue)      &#125;)    &#125;  &#125;  return (   &lt;Col &#123;...mergedWrapperCol&#125; className&#x3D;&#123;c([&#96;$&#123;prefixCls&#125;-item-control&#96;],&#123;    [&#96;$&#123;prefixCls&#125;-item-has-error&#96;]: error !&#x3D;&#x3D; &#39;&#39;   &#125;)&#125;&gt;    &lt;div      className&#x3D;&#123;c([&#96;$&#123;prefixCls&#125;-item-control-content&#96;])&#125;&gt;      &#123;      &#x2F;* 为表单元素添加交互事件 *&#x2F;        React.Children.map(children,child &#x3D;&gt; &#123;          return React.cloneElement(child as any,&#123;            onChange:getControlField,            value:model[name]          &#125;)        &#125;)      &#125;    &lt;&#x2F;div&gt;    &#123;error &amp;&amp; &lt;div className&#x3D;&#123;c([&#96;$&#123;prefixCls&#125;-item-error&#96;])&#125;&gt;&#123;error&#125;&lt;&#x2F;div&gt;&#125;  &lt;&#x2F;Col&gt;  )&#125;)export default FormItemInput<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里会给每一个表单组件都绑定一个onChange和value(核心概念)，或者对应的属性就行操作，有一个model属性，通过父组件传过来，onfinsh也是返回这个model，这个model不能自己定义，要不然会有bug，需要使用useState定义</p><h4 id="四、验证功能"><a href="#四、验证功能" class="headerlink" title="四、验证功能"></a>四、验证功能</h4><p>验证功能使用的是<a href="https://github.com/yiminghe/async-validator"><code>async-validator</code></a>插件</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import AsyncValidator from &#39;async-validator&#39;;&#x2F;&#x2F; 验证const validate &#x3D; (trigger: string, cb?: Function): boolean | void &#x3D;&gt; &#123;  &#x2F;&#x2F; 获取对应rules  const rules &#x3D; getFilteredRule(trigger);  if (!rules || rules.length &#x3D;&#x3D;&#x3D; 0) &#123;    if (cb instanceof Function) &#123;      cb();    &#125;    return true;  &#125;  const descriptor &#x3D; &#123;[name]: rules &#125;;  &#x2F;&#x2F; 存放rule以字典形式  const validator &#x3D; new AsyncValidator(descriptor);  const model &#x3D; &#123; [name]: fieldValue() &#125;;  validator.validate(model, &#123; firstFields: true &#125;, (errors) &#x3D;&gt; &#123;    setError(errors ? errors[0].message! : &#39;&#39;)    if (cb instanceof Function) &#123;      cb(errors);    &#125;  &#125;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210926</title>
      <link href="/record-blog/2021/09/30/20210926/"/>
      <url>/record-blog/2021/09/30/20210926/</url>
      
        <content type="html"><![CDATA[<h1 id="前端-CLI-脚手架"><a href="#前端-CLI-脚手架" class="headerlink" title="前端 CLI 脚手架"></a>前端 CLI 脚手架</h1><h6 id="一、开发原因"><a href="#一、开发原因" class="headerlink" title="一、开发原因"></a>一、开发原因</h6><p>在创建项目时一般会使用cra，或者vue cli来创建，节约搭建项目的开发时间，但是很多时候并不能满足我们的需求，这个时候需要我们自己去创建一个脚手架</p><h6 id="二、使用到的开发包"><a href="#二、使用到的开发包" class="headerlink" title="二、使用到的开发包"></a>二、使用到的开发包</h6><ul><li><strong>chalk</strong>[1] （控制台字符样式）</li><li><strong>commander</strong>[2] （实现 NodeJS 命令行）</li><li><strong>download</strong>[3] （实现文件远程下载）</li><li><strong>fs-extra</strong>[4] （增强的基础文件操作库）</li><li><strong>handlebars</strong>[5] （实现模板字符替换）</li><li><strong>inquirer</strong>[6] （实现命令行之间的交互）</li><li><strong>log-symbols</strong>[7] （为各种日志级别提供着色符号）</li><li><strong>ora</strong>[8] （优雅终端 Spinner 等待动画）</li><li><strong>update-notifier</strong>[9] （npm 在线检查更新）</li></ul><p>可以参考地址<a href="https://mp.weixin.qq.com/s/iRN4CxP1gFpwyoInUeZtrw">开发前端 CLI 脚手架思路解析</a></p><h6 id="三、部署地址"><a href="#三、部署地址" class="headerlink" title="三、部署地址"></a>三、部署地址</h6><p>在lib/config下有一个，mirror地址链接，也就是一个发布服务的地址，使用的是<a href="https://vercel.com/dashboard">vertel</a>发布，这个地址我是关联的github的账号，所以他会映射到对应的github的项目地址，例如<a href="https://github.com/rookiewxy/xt-template-cli,%E6%89%80%E4%BB%A5%E5%9C%A8%60download%60%E6%97%B6%E9%9C%80%E8%A6%81%E6%B7%BB%E5%8A%A0%E5%AF%B9%E5%BA%94%E7%9A%84%E6%96%87%E4%BB%B6%E5%90%8D%E7%A7%B0">https://github.com/rookiewxy/xt-template-cli,所以在`download`时需要添加对应的文件名称</a></p><p><img src="https://i.loli.net/2021/09/30/DXqWUO75zwPsYSL.png" alt="image-20210926111401894.png"></p><p><img src="https://i.loli.net/2021/09/30/gMTkRwPx2Glao7p.png" alt="image-20210926111856114.png"></p><h6 id="四、vertel简单操作"><a href="#四、vertel简单操作" class="headerlink" title="四、vertel简单操作"></a>四、vertel简单操作</h6><p><img src="https://i.loli.net/2021/09/30/CZymvrDPMJQlOfR.png" alt="image-20210926111617010.png"></p><p>例如登录github账号，在点击创建项目，点击你想要部署的项目</p><p><img src="https://i.loli.net/2021/09/30/cHXJy56IzxTrVhv.png" alt="image-20210926110936454.png"></p><p>省略了一些简单操作，最后你会看到，你创建的项目</p><p><img src="https://i.loli.net/2021/09/30/Mp38jQmTh42cRGF.png" alt="image-20210926111422686.png"></p><p>最后使用<code>vercel --prod</code>命令,千万不要在全局执行，这样会报错，你没有权限，管理员也不行，最好在你当前的目录下执行</p><p><img src="https://i.loli.net/2021/09/30/uOrf4pndRQ1I6y2.png" alt="image-20210926112035939.png"></p><p>最后使用这个地址，就ok了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210827</title>
      <link href="/record-blog/2021/09/30/20210827/"/>
      <url>/record-blog/2021/09/30/20210827/</url>
      
        <content type="html"><![CDATA[<h2 id="TypeScript-相关问题"><a href="#TypeScript-相关问题" class="headerlink" title="TypeScript 相关问题"></a>TypeScript 相关问题</h2><h4 id="1-枚举和常量枚举（const枚举）的区别"><a href="#1-枚举和常量枚举（const枚举）的区别" class="headerlink" title="1.枚举和常量枚举（const枚举）的区别"></a>1.枚举和常量枚举（const枚举）的区别</h4><ul><li><p>枚举会被编译时会编译成一个对象，可以被当作对象使用</p></li><li><p>const枚举会在ts编译期间被删除，避免额外的性能开销</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">&#x2F;&#x2F; 代码示例&#x2F;&#x2F; 编译之前enum test &#123;  a&#x3D;1,  b&#x3D;1&#125;const enum testconst &#123;  aa&#x3D;1,  bb&#x3D;1&#125;&#x2F;&#x2F; 编译之后var test;(function (test) &#123;    test[test[&quot;a&quot;] &#x3D; 1] &#x3D; &quot;a&quot;;    test[test[&quot;b&quot;] &#x3D; 1] &#x3D; &quot;b&quot;;&#125;)(test || (test &#x3D; &#123;&#125;));&#x2F;&#x2F;可以看到编译之后只有enum枚举并没有const枚举<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-ts中如何获取枚举联合类型的key"><a href="#2-ts中如何获取枚举联合类型的key" class="headerlink" title="2.ts中如何获取枚举联合类型的key?"></a>2.ts中如何获取枚举联合类型的key?</h4>   <pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">type Name &#x3D; &#123; name: string &#125;type Age &#x3D; &#123; age: number &#125;type Union &#x3D; Name | Age&#x2F;&#x2F; infer可以理解为条件句型中的类型推导type UnionKey&lt;P&gt; &#x3D; P extends infer P ? keyof P : nevertype T &#x3D; UnionKey&lt;Union&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-const和readonly的区别"><a href="#3-const和readonly的区别" class="headerlink" title="3.const和readonly的区别"></a>3.const和readonly的区别</h4><ul><li><p>const用于变量，readonly用于属性</p></li><li><p>const在运行时检查，readonly在编译时检查</p></li><li><p>使用const变量保存的数组，可以使用push，pop等方法。但是如果使用<code>ReadonlyArray&lt;number&gt;</code>声明的数组不能使用push，pop等方法。</p><h4 id="4-ts中-、-、-等符号的含义？"><a href="#4-ts中-、-、-等符号的含义？" class="headerlink" title="4.ts中 ?.、??、!.等符号的含义？"></a>4.ts中 ?.、??、!.等符号的含义？</h4></li><li><p>?. 可选链</p></li><li><p>?? ?? 类似与短路或，??避免了一些意外情况0，NaN以及””,false被视为false值。只有undefind,null被视为false值。</p></li><li><p>!. 在变量名后添加!，可以断言排除undefined和null类型</p></li><li><p>_ , 声明该函数将被传递一个参数，但您并不关心它</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">&#x2F;&#x2F; ??let x &#x3D; foo ?? bar();&#x2F;&#x2F; 等价于let x &#x3D; foo !&#x3D;&#x3D; null &amp;&amp; foo !&#x3D;&#x3D; undefined ? foo : bar();&#x2F;&#x2F; !.let a: string | null | undefineda.length &#x2F;&#x2F; errora!.length &#x2F;&#x2F; ok复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-枚举和-object-的区别"><a href="#5-枚举和-object-的区别" class="headerlink" title="5.枚举和 object 的区别"></a>5.枚举和 object 的区别</h4></li><li><p>枚举可以通过枚举的名称，获取枚举的值。也可以通过枚举的值获取枚举的名称。</p></li><li><p>object只能通过key获取value</p></li><li><p>数字枚举在不指定初始值的情况下，枚举值会从0开始递增。</p></li><li><p>虽然在运行时，枚举是一个真实存在的对象。但是使用keyof时的行为却和普通对象不一致。必须使用keyof typeof才可以获取枚举所有属性名。</p><h4 id="6-never、void-的区别"><a href="#6-never、void-的区别" class="headerlink" title="6.never、void 的区别"></a>6.never、void 的区别</h4></li><li><p>never，never表示永远不存在的类型。比如一个函数总是抛出错误，而没有返回值。或者一个函数内部有死循环，永远不会有返回值。函数的返回值就是never类型。</p></li><li><p>void, 没有显示的返回值的函数返回值为void类型。如果一个变量为void类型，只能赋予undefined或者null。</p><h5 id="7-unkonwn和any"><a href="#7-unkonwn和any" class="headerlink" title="7.unkonwn和any"></a>7.unkonwn和any</h5><p>unknown 类型是 TS3 新增的类型，这个类型与 any 类型类似，可以设置任何的类型值，随后可以更改类型。因此，我们可以将变量先设置为字符串类型，然后再将其设置为数字类型，如果事先不检查类型，使用any类型，调用了不存在的方法，编译时不会报错，代码运行时才会发现错误。但是使用unknown 类型不一样，如果不进行类型判断，执行相关操作编译器就会报错。</p></li><li><p>any</p></li></ul><p><img src="https://i.loli.net/2021/09/30/VAJSosYGg2r5tFO.png" alt="image-20210827083734306.png"></p><p>可以看到执行tsc any.ts时并不会报错，但是执行node any.ts会报错</p><ul><li>unknown</li></ul><p><img src="https://i.loli.net/2021/09/30/fEX4hjSusWRk5DJ.png" alt="image-20210827084016159.png"></p><p>它认为unknown类型，这个类型没有push方法，当然会报错，除非先判断类型，如果是相关类型且正确执行相关方法，编译器则会顺利通过，虽然有些麻烦，但是相比 any 类型说，更加安全，在代码编译期间，就能帮我们发现由于类型造成的问题，因此在大多的场景，建议使用 unknown 类型替代 any。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">let val:unknown &#x3D; 18;val &#x3D; &quot;wxy&quot;;val &#x3D; new Array();if (val instanceof Array) &#123;  val.push(33);&#125;console.log(val);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-interfaces-与-type-之间有什么区别"><a href="#8-interfaces-与-type-之间有什么区别" class="headerlink" title="8.interfaces 与 type 之间有什么区别"></a>8.interfaces 与 type 之间有什么区别</h4><ul><li><p>与接口类型不一样，类型别名可以用于一些其他类型，比如原始类型、联合类型和元组：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">&#x2F;&#x2F; primitivetype name &#x3D; string;&#x2F;&#x2F; objecttype posX &#x3D; &#123; x: number; &#125;;type posY &#x3D; &#123; y: number; &#125;;&#x2F;&#x2F; uniontype pos &#x3D; posX | posY;&#x2F;&#x2F; tupletype Data &#x3D; [number, string];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接口和类型别名都能够被扩展，但语法有所不同。此外，接口和类型别名不是互斥的。接口可以扩展类型别名，而反过来是不行的。</li><li>类型别名无法被实现(implements)，而接口可以被派生类实现</li><li>类型别名重名时编译器会抛出错误，接口重名时会产生合并</li></ul><h4 id="9-Object、object-和"><a href="#9-Object、object-和" class="headerlink" title="9.Object、object 和 {}"></a>9.Object、object 和 {}</h4><ul><li>object类型:它用于表示非原始类型。</li><li>JavaScript 中以下类型被视为原始类型：<code>string</code>、<code>boolean</code>、<code>number</code>、<code>bigint</code>、<code>symbol</code>、<code>null</code> 和 <code>undefined</code>。</li></ul></li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">const proto &#x3D; &#123;&#125;;Object.create(proto);     &#x2F;&#x2F; OKObject.create(null);      &#x2F;&#x2F; OKObject.create(undefined); &#x2F;&#x2F; ErrorObject.create(1337);      &#x2F;&#x2F; ErrorObject.create(true);      &#x2F;&#x2F; ErrorObject.create(&quot;oops&quot;);    &#x2F;&#x2F; Error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Object类型:它是所有 Object 类的实例的类型。它由以下两个接口来定义、<code>Object</code> 包括原始</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">interface Object &#123;  constructor: Function;  toString(): string;  toLocaleString(): string;  valueOf(): Object;  hasOwnProperty(v: PropertyKey): boolean;  isPrototypeOf(v: Object): boolean;  propertyIsEnumerable(v: PropertyKey): boolean;&#125;interface ObjectConstructor &#123;  new(value?: any): Object;  (value?: any): any;  readonly prototype: Object;  getPrototypeOf(o: any): any;&#x2F;&#x2F; ...&#125;declare var Object: ObjectConstructor;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>{} 类型:它描述了一个没有成员的对象。当你试图访问这样一个对象的任意属性时，TypeScript 会产生一个编译时错误。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210813</title>
      <link href="/record-blog/2021/09/30/20210813/"/>
      <url>/record-blog/2021/09/30/20210813/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建UI组件库"><a href="#搭建UI组件库" class="headerlink" title="搭建UI组件库"></a>搭建UI组件库</h2><h4 id="一-组件库文档工具"><a href="#一-组件库文档工具" class="headerlink" title="一.组件库文档工具"></a>一.组件库文档工具</h4><p><img src="https://i.loli.net/2021/09/30/NIO7gYiThp2jmGc.png" alt="image-20210813081511874.png"></p><p>对比这三种之后选用dumi，具体可看<a href="https://blog.csdn.net/suedar1/article/details/117817982">https://blog.csdn.net/suedar1/article/details/117817982</a></p><h4 id="二-dumi"><a href="#二-dumi" class="headerlink" title="二.dumi"></a>二.<a href="https://d.umijs.org/zh-CN">dumi</a></h4><ol><li>初始化脚手架可以直接使用<code>@umijs/create-dumi-lib</code> 或 <code>@umijs/create-dumi-app</code> 进行脚手架的创建</li><li>由于直接使用dumi命令创建的脚手架目录单一，并不适合我们的多包管理，我们需要使用lerna来初始化我们的脚手架</li></ol><h4 id="三-lerna和yarn-workspace"><a href="#三-lerna和yarn-workspace" class="headerlink" title="三.lerna和yarn workspace"></a>三.lerna和yarn workspace</h4><ol><li><p>使用lerna init进行项目初始化，会在根目录出现<code>packages</code>、<code>package.json</code>、<code>lerna.json</code>三个文件夹</p></li><li><p><code>package.json</code>中有一点需要注意，他的<code>private</code>必须设置为<code>true</code>，他是多个项目，所以他自己不能直接发布，发布的应该是<code>packages/</code>下面的各个子项目</p></li><li><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// lerna 初始化时的内容</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token string">"packages"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"packages/*"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"0.0.0"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 修改为</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token string">"packages"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"packages/*"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"npmClient"</span><span class="token punctuation">:</span> <span class="token string">"yarn"</span><span class="token punctuation">,</span>  <span class="token string">"useWorkspaces"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 使用yarn workspace</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"independent"</span> <span class="token comment" spellcheck="true">// 独立模式</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>pre <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line-numbers language-none"</span><span class="token operator">></span><span class="token operator">&lt;</span>code <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"language-none"</span><span class="token operator">></span><span class="token number">4</span><span class="token punctuation">.</span> <span class="token operator">&amp;</span>#<span class="token number">96</span><span class="token punctuation">;</span>lerna create 包名<span class="token operator">&amp;</span>#<span class="token number">96</span><span class="token punctuation">;</span>就会在packages目录下出现对应的包，里面默认会用<span class="token operator">&amp;</span>#<span class="token number">96</span><span class="token punctuation">;</span>__test__<span class="token operator">&amp;</span>#<span class="token number">96</span><span class="token punctuation">;</span>（单元测试内容）和<span class="token operator">&amp;</span>#<span class="token number">96</span><span class="token punctuation">;</span>lib<span class="token operator">&amp;</span>#<span class="token number">96</span><span class="token punctuation">;</span>文件夹<span class="token number">5</span><span class="token punctuation">.</span> <span class="token operator">&amp;</span>#<span class="token number">96</span><span class="token punctuation">;</span>lerna <span class="token keyword">public</span><span class="token operator">&amp;</span>#<span class="token number">96</span><span class="token punctuation">;</span>包发布，发布私有包是注意在当前目录的<span class="token keyword">package</span><span class="token punctuation">.</span>json在加上   <span class="token operator">&amp;</span>#<span class="token number">96</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">96</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">96</span><span class="token punctuation">;</span>js   <span class="token string">"publishConfig"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token string">"access"</span><span class="token punctuation">:</span> <span class="token string">"public"</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>span aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line-numbers-rows"</span><span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></code></pre></code></pre></li><li><p><code> lerna bootstrap``packages/</code>下面的每个子项目有自己的<code>node_modules</code>，如果将它打开，会发现很多重复的依赖包，这会占用我们大量的硬盘空间。<code>lerna</code>提供了另一个强大的功能：<strong>将子项目的依赖包都提取到最顶层</strong>，我们只需要<strong>先删除子项目的<code>node_modules</code>再跑下面这行命令就行了</strong>：</p></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">lerna bootstrap <span class="token operator">--</span>hoist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">lerna clean <span class="token comment">// 删除子项目的node_modules</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li> 使用<code>lerna bootstrap --hoist</code>虽然可以将值项目的依赖提升到最顶层，但是方式比较粗暴，这会导致一个问题，如果多个子项目依赖同一个第三方库，但是需求的版本不同怎么办？<code>lerna</code>会提升用的最多的版本到顶层，问题来了，如果有的子项目用到的并不是这个版本，就可以出现问题，<code>yarn workspace</code>可以很好的解决这个问题，它会检查每个子项目里面依赖及其版本，如果版本不一样则会留在子项目自己的<code>node_modules</code>里面，只有完全一样的依赖才会提升到顶层，使用<code>yarn workspace</code>的方式也非常简单，在顶层的package.json添加</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  <span class="token string">"workspaces"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"packages/*"</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>启动项目直接使用yarn就ok</li></ol><h4 id="四-文件夹目录"><a href="#四-文件夹目录" class="headerlink" title="四.文件夹目录"></a>四.文件夹目录</h4><p>目前在packages里面创建了三个目录<code>xt-ui-hooks</code>，<code>xt-ui-test</code>，<code>xt-ui-utils</code>分别存放hooks、组件主体包，工具包</p><ul><li>xt-ui-test中的style和context参考antd.design的写法</li><li>xt-ui-hooks中的<code>usePrefersColor</code>用于主体切换类</li><li>xt-ui-utils通用方法例如数组和对象</li><li><a href="https://rookiewxy.github.io/record-blog/2021/09/30/20210916/">xt-ui-icons</a></li></ul><h5 id="五-后续补充"><a href="#五-后续补充" class="headerlink" title="五.后续补充"></a>五.后续补充</h5><p><a href="https://rookiewxy.github.io/record-blog/2021/09/30/20211015/">Form</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210903</title>
      <link href="/record-blog/2021/09/30/20210903/"/>
      <url>/record-blog/2021/09/30/20210903/</url>
      
        <content type="html"><![CDATA[<h2 id="2021年9月3日React事件池"><a href="#2021年9月3日React事件池" class="headerlink" title="2021年9月3日React事件池"></a>2021年9月3日React事件池</h2><h4 id="一、合成事件"><a href="#一、合成事件" class="headerlink" title="一、合成事件"></a>一、合成事件</h4><p>React 合成事件（SyntheticEvent）是 React <strong>模拟原生 DOM 事件所有能力的一个事件对象</strong>，即浏览器原生事件的跨浏览器包装器。它根据 <a href="https://www.w3.org/TR/DOM-Level-3-Events/">W3C 规范</a> 来定义合成事件，兼容所有浏览器，拥有与浏览器原生事件相同的接口。</p><p>在 React 中，所有事件都是合成的，不是原生 DOM 事件，但可以通过 <code>e.nativeEvent</code> 属性获取 DOM 事件。</p><p>react使用合成事件的目的</p><ul><li><p>跨浏览器兼容：React 采用的是顶层事件代理机制，能够保证冒泡一致性，可以跨浏览器执行。React 提供的合成事件用来抹平不同浏览器事件对象之间的差异，将不同平台事件模拟合成事件。（react16版本以下）</p></li><li><p>避免垃圾回收：事件对象可能会被频繁创建和回收，因此 React 引入<strong>事件池</strong>，在事件池中获取或释放事件对象。**即 React 事件对象不会被释放掉，而是存放进一个数组中，当事件触发，就从这个数组中弹出，避免频繁地去创建和销毁(垃圾回收)**。</p></li><li><p>方便事件统一管理和事务机制</p></li></ul><h4 id="二、合成事件与原生事件区别"><a href="#二、合成事件与原生事件区别" class="headerlink" title="二、合成事件与原生事件区别"></a>二、合成事件与原生事件区别</h4><ul><li><p>事件名称命名方式不同</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">&#x2F;&#x2F; 原生事件绑定方式&lt;button οnclick&#x3D;&quot;handleClick()&quot;&gt;Leo 按钮命名&lt;&#x2F;button&gt;      &#x2F;&#x2F; React 合成事件绑定方式const button &#x3D; &lt;button onClick&#x3D;&#123;handleClick&#125;&gt;Leo 按钮命名&lt;&#x2F;button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>事件处理函数写法不同</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">&#x2F;&#x2F; 原生事件 事件处理函数写法&lt;button οnclick&#x3D;&quot;handleClick()&quot;&gt;Leo 按钮命名&lt;&#x2F;button&gt;      &#x2F;&#x2F; React 合成事件 事件处理函数写法const button &#x3D; &lt;button onClick&#x3D;&#123;handleClick&#125;&gt;Leo 按钮命名&lt;&#x2F;button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>阻止默认行为方式不同</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">&#x2F;&#x2F; 原生事件阻止默认行为方式&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.pingan8787.com&quot;   οnclick&#x3D;&quot;console.log(&#39;Leo 阻止原生事件~&#39;); return false&quot;&gt;  Leo 阻止原生事件&lt;&#x2F;a&gt;&#x2F;&#x2F; React 事件阻止默认行为方式const handleClick &#x3D; e &#x3D;&gt; &#123;  e.preventDefault();  console.log(&#39;Leo 阻止原生事件~&#39;);&#125;const clickElement &#x3D; &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.pingan8787.com&quot; onClick&#x3D;&#123;handleClick&#125;&gt;  Leo 阻止原生事件&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、React-事件与原生事件执行顺序"><a href="#三、React-事件与原生事件执行顺序" class="headerlink" title="三、React 事件与原生事件执行顺序"></a>三、React 事件与原生事件执行顺序</h4><p>会先执行原生事件在执行合成事件，看下图，在react17版本执行，React是把事件委托在document上的，React17及以后版本不再把事件委托在document上，而是委托在挂载的容器上了，</p></li></ul><p><img src="https://i.loli.net/2021/09/30/zxEkXKNsPUJbQwy.png" alt="image-20210903090905314.png"></p><h4 id="四、合成事件的事件池"><a href="#四、合成事件的事件池" class="headerlink" title="四、合成事件的事件池"></a>四、合成事件的事件池</h4><p>合成事件对象池，是 React 事件系统提供的一种<strong>性能优化方式</strong>。<strong>合成事件对象在事件池统一管理</strong>，<strong>不同类型的合成事件具有不同的事件池</strong>。（<strong>React 事件池仅支持在 React 16 及更早版本中，在 React 17 已经不使用事件池</strong>）</p><p>在 React 16 及之前的版本，合成事件对象的事件处理函数全部被调用之后，所有属性都会被置为 <code>null</code> 。这时，如果我们需要在事件处理函数运行之后获取事件对象的属性，可以使用 React 提供的 <code>e.persist()</code> 方法，保留所有属性：</p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210916</title>
      <link href="/record-blog/2021/09/30/20210916/"/>
      <url>/record-blog/2021/09/30/20210916/</url>
      
        <content type="html"><![CDATA[<ol><li><h4 id="封装icon组件库"><a href="#封装icon组件库" class="headerlink" title="封装icon组件库"></a>封装icon组件库</h4><p>封装icon组件库，查看antd.design的图标库，可以发现图标都是使用svg，因为svg放大不会失真，也可以修改样式，来看看antd.design怎么写</p></li></ol><p><img src="https://i.loli.net/2021/09/30/EdxYZrtFQvAcs4D.png" alt="image-20210911082402543.png"></p><p>他会单独吧svg抽离出来使用，再分为，三种类型<img src="https://i.loli.net/2021/09/30/XqiuJVm7TabxBfE.png" alt="image-20210911082820036.png">，而且react等框架都可以使用是如何做到的？，还支持按需导入与智能提示，原理就是<code>svg</code> 图标的内容就是 <code>xml</code> 语法，将 <code>svg</code> 内容解析成 <code>asn</code> ，即「抽象节点」 (Abstract Node)，然后实现能渲染该抽象节点的 <code>React</code> 组件即可</p><h4 id="icon-react"><a href="#icon-react" class="headerlink" title="icon-react"></a>icon-react</h4><p>   看一下<code>icon-react</code>文件夹</p><p><img src="https://i.loli.net/2021/09/30/oNmyGbVKDxsg7Rr.png" alt="image-20210911084422897.png"></p><p>可以看到icons文件下的文件都是自动生成，并且分为三种类型，对应icon-svg下的三种类型，随便查看一个文件</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">&#x2F;&#x2F; GENERATE BY .&#x2F;scripts&#x2F;generate.ts&#x2F;&#x2F; DON NOT EDIT IT MANUALLYimport * as React from &#39;react&#39;import AccountBookFilledSvg from &#39;@ant-design&#x2F;icons-svg&#x2F;lib&#x2F;asn&#x2F;AccountBookFilled&#39;;import AntdIcon, &#123; AntdIconProps &#125; from &#39;..&#x2F;components&#x2F;AntdIcon&#39;;const AccountBookFilled &#x3D; (  props: AntdIconProps,  ref: React.MutableRefObject&lt;HTMLSpanElement&gt;,) &#x3D;&gt; &lt;AntdIcon &#123;...props&#125; ref&#x3D;&#123;ref&#125; icon&#x3D;&#123;AccountBookFilledSvg&#125; &#x2F;&gt;;AccountBookFilled.displayName &#x3D; &#39;AccountBookFilled&#39;;export default React.forwardRef&lt;HTMLSpanElement, AntdIconProps&gt;(AccountBookFilled);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到<code>AccountBookFilledSvg</code>传入了<code>AntdIcon</code></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">&#x2F;&#x2F; AntdIcon 部分代码如下const Icon &#x3D; React.forwardRef&lt;HTMLSpanElement, IconComponentProps&gt;((props, ref) &#x3D;&gt; &#123;......  return (    &lt;span      role&#x3D;&quot;img&quot;      aria-label&#x3D;&#123;icon.name&#125;      &#123;...restProps&#125;      ref&#x3D;&#123;ref&#125;      tabIndex&#x3D;&#123;iconTabIndex&#125;      onClick&#x3D;&#123;onClick&#125;      className&#x3D;&#123;classString&#125;    &gt;      &lt;ReactIcon        icon&#x3D;&#123;icon&#125;        primaryColor&#x3D;&#123;primaryColor&#125;        secondaryColor&#x3D;&#123;secondaryColor&#125;        style&#x3D;&#123;svgStyle&#125;      &#x2F;&gt;    &lt;&#x2F;span&gt;  );&#125;) as IconBaseComponent&lt;IconComponentProps&gt;;Icon.displayName &#x3D; &#39;AntdIcon&#39;;Icon.getTwoToneColor &#x3D; getTwoToneColor;Icon.setTwoToneColor &#x3D; setTwoToneColor;export default Icon;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ReactIcon</code>对应的就是iconBase，iconBase的主要功能是动态构建svg组件</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">&#x2F;&#x2F; 主要代码如下export function generate(  node: AbstractNode,  key: string,  rootProps?: &#123; [key: string]: any &#125; | false,): any &#123;  if (!rootProps) &#123;    return React.createElement(      node.tag,      &#123; key, ...normalizeAttrs(node.attrs) &#125;,      (node.children || []).map((child, index) &#x3D;&gt; generate(child, &#96;$&#123;key&#125;-$&#123;node.tag&#125;-$&#123;index&#125;&#96;)),    );  &#125;  return React.createElement(    node.tag,    &#123;      key,      ...normalizeAttrs(node.attrs),      ...rootProps,    &#125;,    (node.children || []).map((child, index) &#x3D;&gt; generate(child, &#96;$&#123;key&#125;-$&#123;node.tag&#125;-$&#123;index&#125;&#96;)),  );&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实可以发现刚刚的<code>AccountBookFilledSvg</code>应该是一个对象一样的东西</p><h4 id="SVGO"><a href="#SVGO" class="headerlink" title="SVGO"></a>SVGO</h4><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">const svg &#x3D; &#39;&lt;?xml version&#x3D;&quot;1.0&quot; ...&gt;&#39;;const optimizer &#x3D; new SVGO(&#123;  floatPrecision: 2,  &#x2F;&#x2F; 通过 plugins 来对内容进行修改，支持自定义 plugin  plugins: [],&#125;);const &#123; data &#125; &#x3D; await optimizer.optimize(svg);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成 <code>asn</code>(抽象节点)，类似这样</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;  &quot;tag&quot;: &quot;svg&quot;,  &quot;attrs&quot;: &#123; &quot;viewBox&quot;: &quot;0 0 1024 1024&quot;, &quot;focusable&quot;: &quot;false&quot; &#125;,  &quot;children&quot;: [    &#123;      &quot;tag&quot;: &quot;path&quot;,      &quot;attrs&quot;: &#123;        &quot;d&quot;: &quot;...&quot;      &#125;    &#125;  ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后根据这些抽象节点动态的生成react组件</p><h4 id="easy-icons"><a href="#easy-icons" class="headerlink" title="easy-icons"></a>easy-icons</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yarn add easy-icons -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用easy-icons插件来帮助我们完成这些工作</p><p>目录结构</p><p><img src="https://i.loli.net/2021/09/30/XOfUKykhm1jdPo6.png" alt="image-20210916163723418.png"></p><p><img src="https://i.loli.net/2021/09/30/TbtLVJPy3QYD19m.png" alt="image-20210916164314581.png"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;&#x2F; package.json添加  &quot;scripts&quot;: &#123;    &quot;icons&quot;: &quot;node scripts&#x2F;generateIcons&quot;  &#125;,&#x2F;&#x2F; 执行命令yarn icons<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年5月</title>
      <link href="/record-blog/2021/07/19/202005/"/>
      <url>/record-blog/2021/07/19/202005/</url>
      
        <content type="html"><![CDATA[<h2 id="react-hook小案例"><a href="#react-hook小案例" class="headerlink" title="react hook小案例"></a>react hook小案例</h2><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://i.loli.net/2021/01/02/QlFcsfX9v4w8r3J.png" alt="首页展示"></p><p><img src="https://i.loli.net/2021/01/02/aTUju7eFBcbE6md.png" alt="菜单列表"></p><p><img src="https://i.loli.net/2021/01/02/oexSkmfJA7lRc9N.png" alt="新增弹框"></p><p><img src="https://i.loli.net/2021/01/02/5zkFP4vb8DoX1Cf.png" alt="新增弹框"></p><h3 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h3><p>使用mock数据完成嵌套表格的增删改查，两个表格主要是对菜单栏和右边内容区域的操作</p><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><p>1.对axios进行一个简单的封装，创建一个api文件夹，可以在这个文件夹下面分不同的模块，写入对应的接口，这样调整起来也很方便</p><p><img src="https://i.loli.net/2021/01/02/Ico8QKEjB52vhla.png" alt="axios封装"></p><p><img src="https://i.loli.net/2021/01/02/vBTp1UsqcHbx7dM.png" alt="api封装"></p><p>2.使用antd.design的table，实现嵌套表格，把里面的子表格可以拿出来单独当一个组件，写在一个页面，代码量太长，一个页面的代码最好不要超过200行，包括分页也做了个简单的封装，比如页面刷新时，页码总会跳到第一页，怎么能在刷新时停留在当前页</p><p><img src="https://i.loli.net/2021/01/02/7v9SgOonaFBifDt.png" alt="image-20200531113038810.png"></p><p>可以在地址栏增加一个hash值，通过分页的点击方法改变hash值</p><p><img src="https://i.loli.net/2021/01/02/AEwCrJqpF3xGBfW.png" alt="image-20200531114012311.png"></p><p>在使用的页面，获取hash值，传入useeffect里面，useeffect监听到参数变化之后就可以请求接口，在useEffect请求完数据之后使用set方法赋值的时候，会产生undefined的问题，因为useState是异步的所以在useeffect里面直接使用set方法赋值，对应的变量是拿不到值得，对于异步的问题，可以看看这个<a href="https://juejin.im/post/5dcb5a80e51d4520db19b906#heading-27">https://juejin.im/post/5dcb5a80e51d4520db19b906#heading-27</a><br>useEffect不希望回调函数返回Promise，而是希望不返回任何内容或返回一个函数。作为警告的解决方法，可以使用自调用异步功能<br><img src="https://i.loli.net/2021/01/02/R92Ueh4GlVvuzjr.png" alt="image-20200531114613091.png"></p><p>上面说的刷新页面分页的问题，现在说的是刷新页面，侧边栏会回到设置的默认选中key的位置，但是右边内容的显示并没有对应到相应的路由，所以可以使用useHistory记录路由，并且传入到侧边栏</p><p><img src="https://i.loli.net/2021/01/02/7fAXCe2duIkOo6V.png" alt="image-20200531115642589.png"></p><p>在写修改表单的时候，觉得值传来传去特麻烦，于是写了一个redux,由于刚学习react,对于状态管理这一块并不熟悉，只知道一个redux，后来发现可以使用mobx或者context会更加的方便</p><p><img src="https://i.loli.net/2021/01/02/ylMoCpLTktHxQPD.png" alt="image-20200531115917079.png"></p><p><img src="https://i.loli.net/2021/01/02/6xSEdDoHNX5sqAg.png" alt="image-20200531115949624.png"></p><p>通过触发action改变state</p><p><img src="https://i.loli.net/2021/01/02/4s2RCdApIuxHyVq.png" alt="image-20200531120043428.png"></p><p>在点击编辑按钮的时候直接触发这个方法，把数据传进去</p><p><img src="https://i.loli.net/2021/01/02/TKZzf2IhvlGP9dL.png" alt="image-20200531120216339.png"></p><p>在需要的页面进行获取，这里我使用fromJS,所以要用toJS()转一下</p><p>在上传图片这一块，已经不再使用callback，需要返回一个promise</p><p><img src="https://i.loli.net/2021/01/02/jGIzPd9hUuVTgqH.png" alt="image-20200531120427795.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年7月18日</title>
      <link href="/record-blog/2021/07/18/20210718/"/>
      <url>/record-blog/2021/07/18/20210718/</url>
      
        <content type="html"><![CDATA[<h4 id="一、JS代码规范"><a href="#一、JS代码规范" class="headerlink" title="一、JS代码规范"></a><strong>一、JS代码规范</strong></h4><h6 id="1-关于命名"><a href="#1-关于命名" class="headerlink" title="1.关于命名"></a>1.关于命名</h6><p>普通命名采用小驼峰式命名</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> userName <span class="token operator">=</span> <span class="token string">'jack'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命名是复数的时候需要加 s，比如说我想声明一个数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每个常量都需命名，这样更利于别人读懂含义</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// good</span><span class="token keyword">const</span> <span class="token constant">COL_NUM</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">let</span> row <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token constant">COL_NUM</span><span class="token punctuation">)</span><span class="token comment">// bad</span><span class="token keyword">let</span> row <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命名需要符合语义化，如果函数命名，可以采用加上动词前缀：</p><ul><li>can 判断是否可执行某个动作</li><li>has 判断是否含有某个值</li><li>is 判断是否为某个值</li><li>get 获取某个值</li><li>set 设置某个值</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//是否可阅读</span><span class="token keyword">function</span> <span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//获取姓名</span><span class="token keyword">function</span> getName<span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-关于字符串"><a href="#2-关于字符串" class="headerlink" title="2.关于字符串"></a>2.关于字符串</h6><p>统一使用双引号</p><p>用字符串模板而不是 ‘+’ 来拼接字符串</p><h6 id="3-关于数组"><a href="#3-关于数组" class="headerlink" title="3.关于数组"></a>3.关于数组</h6><p>用字面量赋值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// bad</span><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// good</span><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用扩展运算符做数组浅拷贝</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// bad</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token keyword">const</span> copyArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  copyArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment">// good</span><span class="token keyword">const</span> copyArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用 Array.from 去将一个类数组对象转成一个数组。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arrLike <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">'baz'</span><span class="token punctuation">,</span> length<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token comment">// bad</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">)</span><span class="token comment">// good</span><span class="token keyword">const</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4-关于对象"><a href="#4-关于对象" class="headerlink" title="4.关于对象"></a>4.关于对象</h6><p>创建对象和数组推荐使用字面量</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// good</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>  sex<span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// bad</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Tom'</span>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">15</span>obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'男'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ES6 使用属性值缩写</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> lukeSkywalker <span class="token operator">=</span> <span class="token string">'Luke Skywalker'</span><span class="token comment">// bad</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  lukeSkywalker<span class="token operator">:</span> lukeSkywalker<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// good</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  lukeSkywalker<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对象浅拷贝时，更推荐使用扩展运算符 …，而不是 Object.assign。解构赋值获取对象指定的几个属性时，推荐用 rest 运算符(…)。</p><h6 id="5-关于函数"><a href="#5-关于函数" class="headerlink" title="5.关于函数"></a>5.关于函数</h6><p>函数参数使用默认值替代使用条件语句进行赋值。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// good</span><span class="token keyword">function</span> <span class="token function">createMicrobrewery</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'Jack'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token comment">// bad</span><span class="token keyword">function</span> <span class="token function">createMicrobrewery</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> userNameName <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">'Jack'</span>   <span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数参数使用结构语法，函数参数越少越好，如果参数超过两个，要使用 ES6 的解构语法，不用考虑参数的顺序。</p><p>把默认参数赋值放在最后</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// bad</span><span class="token keyword">function</span> <span class="token function">handleThings</span><span class="token punctuation">(</span><span class="token parameter">opts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">// good</span><span class="token keyword">function</span> <span class="token function">handleThings</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> opts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尽量使用箭头函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// bad</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> y  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// good</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> y  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="6-关于模块"><a href="#6-关于模块" class="headerlink" title="6.关于模块"></a>6.关于模块</h6><p>一个入口只 import 一次</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// bad</span><span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">'foo'</span><span class="token comment">// … some other imports … //</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> named1<span class="token punctuation">,</span> named2 <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'foo'</span><span class="token comment">// good</span><span class="token keyword">import</span> foo<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> named1<span class="token punctuation">,</span> named2 <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'foo'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在只有一个导出的模块里，用 export default 更好</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// bad</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// good</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="7-关于注释"><a href="#7-关于注释" class="headerlink" title="7.关于注释"></a>7.关于注释</h6><p>推荐vscode插件：<a href="https://link.juejin.cn/?target=https://github.com/OBKoro1/koro1FileHeader">koroFileHeader</a></p><ul><li>文件注释</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/* * @Description: xxx * @Autor: wxy * @Date: 2021-07-06 14:40:30 * @LastEditors: wxy * @LastEditTime: 2021-07-14 09:44:54 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>代码块注释</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * @description:  * @param &#123;boolean&#125; checked * @return &#123;*&#125; * @author: wxy */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>行注释</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// TODO ...</span><span class="token comment">// ! ...</span><span class="token comment">// FIXME ...</span><span class="token comment">// NOTE ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>下面是一些常用的注释标签</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * @author  作者，方便定位     * @class（同义词：@constructor）标记类和构造函数     * @constant @const常量标记     * @description（同义词：@desc） 对内容进行描述     * @module 模块名称     * @enum 枚举类型标记     * @global 全局对象标记     * @param 函数参数标记     * @returns（同义词：@return）函数返回标记     * @this this指向标记     * @see 参考链接     * @memberof 标记模块间的从属关系     * @event 在模板中标记可以被触发的事件，与@fire配合使用 * @alias 将成员视为具有不同的名称。 * @Async 表示函数是异步的。 * @augments（同义词：@extends）指示符号从父符号继承并添加到父符号。 * @borrows 此对象使用来自另一个对象的内容。 * @callback 回调函数。 * @copyright 版权信息。 * @default （同义词: @defaultvalue） 默认值。 * @example 示例。 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="8-eslint规范"><a href="#8-eslint规范" class="headerlink" title="8.eslint规范"></a>8.<a href="https://eslint.org/">eslint</a>规范</h6><p>.eslintrc.js文件配置的代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"off"</span> or <span class="token number">0</span> ：关闭规则<span class="token punctuation">;</span><span class="token string">"warn"</span> or <span class="token number">1</span> ：将规则视为一个警告（不会影响退出码）<span class="token punctuation">;</span><span class="token string">"error"</span> or <span class="token number">2</span> <span class="token function">：将规则视为一个错误</span> <span class="token punctuation">(</span>退出码为<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 开启推荐配置信息</span>    <span class="token comment">// "extends": "eslint:recommended",</span>    <span class="token comment">// 默认情况下，ESLint 会在所有父级目录里寻找配置文件，一直到根目录。如果你想要你所有项目都遵循一个特定的约定时，这将会很有用，但有时候会导致意想不到的结果。为了将 ESLint 限制到一个特定的项目，在你项目根目录下的 package.json 文件或者 .eslintrc.* 文件里的 eslintConfig 字段下设置 "root": true。ESLint 一旦发现配置文件中有 "root": true，它就会停止在父级目录中寻找。</span>    <span class="token string">"root"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 脚本在执行期间访问的额外的全局变量</span>    <span class="token comment">// 当访问未定义的变量时，no-undef 规则将发出警告。如果你想在一个文件里使用全局变量，推荐你定义这些全局变量，这样 ESLint 就不会发出警告了。你可以使用注释或在配置文件中定义全局变量。</span>    <span class="token string">"globals"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"window"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token string">"document"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token string">"$"</span><span class="token operator">:</span><span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 设置插件</span>    <span class="token comment">// "plugins": [</span>    <span class="token comment">//     'html'</span>    <span class="token comment">// ],</span>    <span class="token comment">// 设置解析器选项（必须设置这个属性）</span>    <span class="token string">"parserOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"ecmaVersion"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>        <span class="token string">"sourceType"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>        <span class="token string">"ecmaFeatures"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"jsx"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token comment">// "arrowFunctions": true,</span>            <span class="token comment">// "experimentalObjectRestSpread": true,</span>            <span class="token comment">// "classes": true,</span>            <span class="token comment">// "modules": true,</span>            <span class="token comment">// "defaultParams": true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 启用的规则及各自的错误级别</span>    <span class="token string">"rules"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">'indent'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 缩进使用两个空格的宽度</span>        <span class="token string">'no-console'</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">// 禁止用console</span>        <span class="token string">'semi'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'always'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> omitLastInOneLineBlock<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 使用分号结束语句，除了语句块独占一行</span>        <span class="token string">'no-redeclare'</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">// 在同一个作用域中禁止多次重复定义</span>        <span class="token string">'no-unneeded-ternary'</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 禁止使用没有必要的三目运算符，?: 通常出现在返回结果是一个布尔值，和单个变量之间的比较（直接赋值或者使用||运算符）</span>        <span class="token string">'no-unused-vars'</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 禁止申明一个变量，但不使用</span>        <span class="token string">'no-use-before-define'</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 禁止在变量，函数，类申明前使用</span>        <span class="token string">'keyword-spacing'</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 关键词前后要加空格</span>        <span class="token string">'comma-spacing'</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 逗号运算符两边空格：前面不加，后面加</span>        <span class="token string">'no-dupe-keys'</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">//对象字面量不定义重复的属性</span>        <span class="token string">'no-duplicate-case'</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// switch语句中不定义重复的case分支</span>        <span class="token string">'no-eq-null'</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 不使用 == 或 != 操作符与null进行比较</span>        <span class="token string">'no-inner-declarations'</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 嵌套代码块中禁止定义函数或使用var声明变量</span>        <span class="token string">'no-var'</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 使用let或者const 代替 var</span>        <span class="token string">'no-this-before-super'</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 使用 this 前请确保 super() 已调用</span>        <span class="token string">'no-undef'</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 对于未声明的变量引用会导致警告</span>        <span class="token string">'no-unreachable'</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// return，throw，continue 和 break 后不要再跟代码</span>        <span class="token string">'eqeqeq'</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 使用 === 代替 ==</span>        <span class="token string">'quotes'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'double'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 除需要转义的情况外，字符串统一使用双引号</span>        <span class="token string">'use-isnan'</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 判断类型是不是NAN使用isNaN()</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 指定你想启用的环境</span>    <span class="token string">"env"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"browser"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token string">"node"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token comment">//babel  eslint都是babel公司出的</span>    <span class="token string">"parser"</span><span class="token operator">:</span> <span class="token string">"babel-eslint"</span><span class="token comment">//配置解析es6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、css"><a href="#二、css" class="headerlink" title="二、css"></a><strong>二、css</strong></h4><h6 id="1-BEM规范"><a href="#1-BEM规范" class="headerlink" title="1.BEM规范"></a>1.<a href="http://www.divcss5.com/css3-style/c56988.shtml">BEM规范</a></h6><ul><li><p>block：模块，名字单词间用 - 连接</p></li><li><p>element：元素，模块的子元素，以 __ 与 block 连接</p></li><li><p>modifier：修饰，模块的变体，定义特殊模块，以 – 与 block 连接</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 举个例子 */</span><span class="token selector">.block__element</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token selector">.block--modifier</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="2-初始化规范"><a href="#2-初始化规范" class="headerlink" title="2.初始化规范"></a>2.初始化规范</h6><p>各浏览器厂商的初始样式都不一样，为了消除不同浏览器对 HTML 文本呈现的差异，我们常引入一些初始化样式，如 normalize.css、reset.css 等，当对于这些样式的引入我们需要注意下面几种情况：</p><ul><li>不使用 UI 框架，由零开始搭建<br> 从零开始搭建的情况下，进行样式初始化，在项目最开始的时候就引入，不要在开发中途引入，避免不可预知的样式冲突。</li><li>不使用 UI 框架，但使用了部分插件<br> 插件往往都带有自己特有的样式，如富文本插件，在开发中途使用初始化样式有可能导致样式错乱，所以不建议大范围的初始化，只需<code>简单进行初始化</code>即可。</li></ul><pre class="line-numbers language-none"><code class="language-none">* &#123;  padding: 0;  margin: 0;&#125;复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>已使用 UI 框架<br> 在明确知道需要使用 UI 框架的时候，<code>不使用第三方初始化样式</code>，不管是在项目开始前还是进行中，因为 UI 框架一般都自带初始化，额外引入了反而会影响原有效果。</li></ul><h6 id="3-避免重绘重排"><a href="#3-避免重绘重排" class="headerlink" title="3.避免重绘重排"></a>3.避免重绘重排</h6><p>当发生重排的时候，浏览器需要重新计算布局位置与大小，不利于性能优化。</p><p>常见引起重绘重排属性和方法</p><ul><li><p>添加或者删除可见的 <code>DOM</code> 元素；</p></li><li><p>元素尺寸改变——边距、填充、边框、宽度和高度</p></li><li><p>内容变化，比如用户在 <code>input</code> 框中输入文字</p></li><li><p>浏览器窗口尺寸改变——<code>resize</code> 事件发生时</p></li><li><p>计算 <code>offsetWidth</code> 和 <code>offsetHeight</code> 属性</p></li><li><p>设置 <code>style</code> 属性的值</p></li></ul><p>减少重绘重排的方法</p><ul><li><p>使用 <code>transform</code> 替代 <code>top</code></p></li><li><p>使用 <code>visibility</code> 替换 <code>display: none</code> ，因为前者只会引起重绘，后者会引发回流（改变了布局）</p></li><li><p>不要把节点的属性值放在一个循环里当成循环里的变量。</p></li><li><p>不要使用 <code>table</code> 布局，可能很小的一个小改动会造成整个 <code>table</code> 的重新布局</p></li><li><p>动画实现的速度的选择，动画速度越快，回流次数越多，也可以选择使用 <code>requestAnimationFrame</code></p></li><li><p>CSS 选择符从右往左匹配查找，避免节点层级过多</p></li></ul><h6 id="4-颜色"><a href="#4-颜色" class="headerlink" title="4.颜色"></a>4.颜色</h6><p>建议不使用命名色值。推荐vscode插件<strong>Color Highlight</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* good */</span><span class="token selector">.button--success</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #90ee90<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* bad */</span><span class="token selector">.button--success</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="5-字体排版"><a href="#5-字体排版" class="headerlink" title="5.字体排版"></a>5.字体排版</h6><ol><li><p>字号</p><p>因为 Windows 的字体渲染机制，小于 12px 的文字显示效果极差、难以辨认。所以在 Windows 平台显示的中文内容，其字号应不小于 12px。</p></li></ol><p>2.字重</p><p>font-weight 属性建议使用数值方式描述。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"> <span class="token comment">/* good */</span><span class="token selector">h1</span> <span class="token punctuation">&#123;</span>   <span class="token property">font-weight</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* bad */</span><span class="token selector">h1</span> <span class="token punctuation">&#123;</span>   <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.行高</p><p>line-height 在定义文本段落时，应使用数值。将line-height 设置为数值，浏览器会基于当前元素设置的 font-size 进行再次计算。在不同字号的文本段落组合中，能达到较为舒适的行间间隔效果，避免在每个设置了 font-size 都需要设置line-height。如果line-height 用于控制垂直居中，应该设置成与容器高度一致。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"> <span class="token comment">/* good */</span> <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>   <span class="token property">line-height</span><span class="token punctuation">:</span> 1.5<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">/* bad */</span><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>   <span class="token property">line-height</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、图片"><a href="#三、图片" class="headerlink" title="三、图片"></a><strong>三、图片</strong></h4><h6 id="1-使用恰当的图片格式。"><a href="#1-使用恰当的图片格式。" class="headerlink" title="1.使用恰当的图片格式。"></a>1.使用恰当的图片格式。</h6><ul><li>jpg：适用于内容图片多为照片之类的。</li><li>png：适用于而饰图片，通常更适合用无损压缩。</li><li>gif： 基本上除了 gif 动画外不要使用。</li><li>webP：大大减小图片的体积，但是移动端有兼容性问题。</li></ul><h6 id="2-使用雪碧图"><a href="#2-使用雪碧图" class="headerlink" title="2.使用雪碧图"></a>2.使用雪碧图</h6><p>雪碧图，<code>CSS Sprites</code>，国内也叫 CSS 精灵，是一种 CSS 图像合成技术，主要用于小图片显示。</p><p>雪碧图的优点是把诸多小图片合成一张大图，利用<code>backround-position</code>属性值来确定图片呈现的位置，这样就能减少 http 请求，到达性能优化的效果。</p><h6 id="3-使用-iconfont"><a href="#3-使用-iconfont" class="headerlink" title="3.使用 iconfont"></a>3.使用 iconfont</h6><p><code>iconfont</code>(字体图标)，即通过字体的方式展示图标，多用于渲染图标、简单图形、特殊字体等。</p><p>使用 <code>iconfont</code> 时，由于只需要引入对应的字体文件即可，这种方法可有效减少 HTTP 请求次数，而且一般字体体积较小，所以请求传输数据量较少。与直接引入图片不同，<code>iconfont</code> 可以像使用字体一样，设置大小、颜色及其他样式，且不存在失真的情况。</p><h6 id="4-图片懒加载"><a href="#4-图片懒加载" class="headerlink" title="4.图片懒加载"></a>4.图片懒加载</h6><p>图片过多时，可以使用图片懒加载，原理就是暂时不设置图片的 <code>src</code> 属性，而是将图片的 <code>url</code> 隐藏起来，比如先写在 <code>data-src</code> 里面，等某些事件触发的时候(比如滚动到底部，点击加载图片)再将图片真实的 <code>url</code> 放进 <code>src</code> 属性里面，从而实现图片的延迟加载。</p><h4 id="四、React"><a href="#四、React" class="headerlink" title="四、React"></a><strong>四、React</strong></h4><h6 id="1-项目目录结构"><a href="#1-项目目录结构" class="headerlink" title="1.项目目录结构"></a>1.项目目录结构</h6><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LRA[src]--&gt;assets[assets]A--&gt;components[components]A--&gt;config[config]A--&gt;hook[hook]hook--&gt;useLoading[useLoading.tsx]A--&gt;layout[layout]A--&gt;pages[pages]A--&gt;router[router]A--&gt;a[style]a--&gt;color[color.less]a--&gt;size[font-size.less]a--&gt;mixin[mixin]mixin--&gt;scroll-bar[scroll-bar.less]a--&gt;theme[theme]theme--&gt;dark[dark.less]A--&gt;utils[utils]utils--&gt;request[request.ts]A--&gt;srevices[srevices]srevices--&gt;user[user.ts]A--&gt;store[store]A--&gt;mock[mock]A--&gt;constants[constants]constants--&gt; routes[routes.ts]components --&gt; components1[components1]components1--&gt;tsx[components1.tsx]components1--&gt;less[components1.less]config --&gt; routerconfig[router.config.js]assets--&gt;icons[icons]assets--&gt;images[images]assets--&gt;font[font]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-基础规则"><a href="#2-基础规则" class="headerlink" title="2.基础规则"></a>2.基础规则</h6><ul><li><strong>一个文件声明一个组件：</strong>尽管可以在一个文件中声明多个 React 组件，但是最好不要这样做；推荐一个文件声明一个 React 组件，并只导出一个组件；</li><li><strong>推荐使用函数组件</strong></li></ul><h6 id="3-组件声明"><a href="#3-组件声明" class="headerlink" title="3.组件声明"></a>3.组件声明</h6><p>组件名称和定义该组件的文件名称建议要保持一致；</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">&#x2F;&#x2F; goodimport Footer from &#39;.&#x2F;Footer&#39;;&#x2F;&#x2F;badimport Footer from &#39;.&#x2F;Footer&#x2F;index&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在src目录下的componets文件推荐使用推荐使用大驼峰命名，在pages中生命的文件采用小写和<code>-</code>符号连接</p><h6 id="4-JSX写法注意"><a href="#4-JSX写法注意" class="headerlink" title="4.JSX写法注意"></a>4.JSX写法注意</h6><ol><li><p>当标签没有子元素的时候，始终使用自闭合的标签 </p><pre class="line-numbers language-react" data-language="react"><code class="language-react">&#x2F;&#x2F; good&lt;Component &#x2F;&gt;&#x2F;&#x2F; bad&lt;Component&gt;&lt;&#x2F;Component&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果标签有多行属性，关闭标签要另起一行 。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">&#x2F;&#x2F; good&lt;Component  bar&#x3D;&quot;bar&quot;  baz&#x3D;&quot;baz&quot; &#x2F;&gt;&#x2F;&#x2F;bad&lt;Component  bar&#x3D;&quot;bar&quot;  baz&#x3D;&quot;baz&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>3.在自闭标签之前留一个空格</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">&#x2F;&#x2F; good&lt;Foo &#x2F;&gt;&#x2F;&#x2F;bad&lt;Foo&#x2F;&gt;&lt;Foo                 &#x2F;&gt;&lt;Foo &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.当组件跨行时，要用括号包裹 JSX 标签。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">&#x2F;&#x2F; good  render() &#123;    return (      &lt;MyComponent className&#x3D;&quot;long body&quot; foo&#x3D;&quot;bar&quot;&gt;        &lt;MyChild &#x2F;&gt;      &lt;&#x2F;MyComponent&gt;    );  &#125;&#x2F;&#x2F; bad  render() &#123;    return &lt;MyComponent className&#x3D;&quot;long body&quot; foo&#x3D;&quot;bar&quot;&gt;             &lt;MyChild &#x2F;&gt;           &lt;&#x2F;MyComponent&gt;;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="5-样式写法"><a href="#5-样式写法" class="headerlink" title="5.样式写法"></a>5.样式写法</h6><p>React 中样式可以使用 style 行内样式，也可以使用 className 属性来引用外部 CSS 样式表中定义的 CSS 类，推荐使用 className 来定义样式。使用less 来替换传统的 CSS 写法,需要动态修改样式时，推荐使用classnames插件</p><h4 id="五、Hooks-组件注意事项"><a href="#五、Hooks-组件注意事项" class="headerlink" title="五、Hooks 组件注意事项"></a>五、Hooks 组件注意事项</h4><p>首先我们需要满足 React 官方声明的 hooks 两个规则: <a href="https://reactjs.org/docs/hooks-rules.html">https://reactjs.org/docs/hooks-rules.html</a></p><h6 id="1-不要在循环中声明-hooks-钩子"><a href="#1-不要在循环中声明-hooks-钩子" class="headerlink" title="1.不要在循环中声明 hooks 钩子"></a>1.不要在循环中声明 hooks 钩子</h6><pre class="line-numbers language-react" data-language="react"><code class="language-react">&#x2F;&#x2F; badfunction Form(&#123;isHaveName&#125;) &#123;  if (isHaveName) &#123;    var [name, setName] &#x3D; useState(&#39;Mary&#39;);  &#125;  render &lt;div&gt;&#123;name&#125;&lt;&#x2F;div&gt;&#125;&#x2F;&#x2F; goodfunction Form(&#123;isHaveName&#125;) &#123;  const [name, setName] &#x3D; useState(isHaveName ? &#39;Mary&#39; : &#39;&#39;);  render &lt;div&gt;&#123;name&#125;&lt;&#x2F;div&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-请在-React-函数的顶层声明-Hooks"><a href="#2-请在-React-函数的顶层声明-Hooks" class="headerlink" title="2.请在 React 函数的顶层声明 Hooks"></a>2.请在 React 函数的顶层声明 Hooks</h6><pre class="line-numbers language-react" data-language="react"><code class="language-react">&#x2F;&#x2F; badfunction Form() &#123;  const [name, setName] &#x3D; useState(&quot;Mary&quot;);  useEffect(function persistForm() &#123;    localStorage.setItem(&quot;formData&quot;, name);  &#125;);  const [surname, setSurname] &#x3D; useState(&quot;Poppins&quot;);  useEffect(function updateTitle() &#123;    document.title &#x3D; name + &quot; &quot; + surname;  &#125;);&#125;&#x2F;&#x2F; goodfunction Form() &#123;  const [name, setName] &#x3D; useState(&quot;Mary&quot;);  const [surname, setSurname] &#x3D; useState(&quot;Poppins&quot;);  useEffect(function persistForm() &#123;    localStorage.setItem(&quot;formData&quot;, name);  &#125;);  useEffect(function updateTitle() &#123;    document.title &#x3D; name + &quot; &quot; + surname;  &#125;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-使用-useCallback-和useMemo减少重绘"><a href="#3-使用-useCallback-和useMemo减少重绘" class="headerlink" title="3.使用 useCallback 和useMemo减少重绘"></a>3.使用 useCallback 和useMemo减少重绘</h6><p>如果是容易被频繁渲染的组件, 如列表中的组件, 请务必编写 useCallback, 并且限定激发更新的对象, 以减少重绘</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">&#x2F;&#x2F; badimport React from &quot;react&quot;;function RenderItem(&#123; title &#125;) &#123;  return &lt;div&gt;&#123;title&#125;&lt;&#x2F;div&gt;;&#125;&#x2F;&#x2F; goodimport React, &#123; useCallback &#125; from &quot;react&quot;;function RenderItem(&#123; title &#125;) &#123;  return useCallback(&lt;div&gt;&#123;title&#125;&lt;&#x2F;div&gt;, [title]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4-运算量大的语句请放入-useEffect-中-并加以条件限制"><a href="#4-运算量大的语句请放入-useEffect-中-并加以条件限制" class="headerlink" title="4.运算量大的语句请放入 useEffect 中, 并加以条件限制"></a>4.运算量大的语句请放入 <code>useEffect</code> 中, 并加以条件限制</h6><pre class="line-numbers language-react" data-language="react"><code class="language-react">&#x2F;&#x2F; badfunction TargetComponent(&#123; data &#125;) &#123;  &#x2F;&#x2F; 较大数据的遍历操作  const nextData &#x3D; data.map(fn);  return &lt;OtherComponent data&#x3D;&#123;nextData&#125; &#x2F;&gt;;&#125;&#x2F;&#x2F; goodfunction TargetComponent(&#123; data &#125;) &#123;  const [nextData, setNextData] &#x3D; useState([]);  useEffect(()&#x3D;&gt;&#123;    &#x2F;&#x2F; 较大数据的遍历操作, 只有在 data 改变时才进行计算    setNextData(data.map(fn))  &#125;, [data])  return &lt;OtherComponent data&#x3D;&#123;nextData&#125; &#x2F;&gt;&#125;&#x2F;&#x2F; best&#x2F;&#x2F; 将 hooks 抽离成 hooks函数function useNextData(&#123; data &#125;)&#123;    const [nextData, setNextData] &#x3D; useState([]);  useEffect(()&#x3D;&gt;&#123;    setNextData(data.map(fn))  &#125;, [data])  return [nextData, setNextData]&#125;function TargetComponent(&#123; data &#125;) &#123;  const [nextData, setNextData] &#x3D; useNextData();  return &lt;OtherComponent data&#x3D;&#123;nextData&#125; &#x2F;&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="5-复杂的-state-逻辑-请抽离成-hooks函数"><a href="#5-复杂的-state-逻辑-请抽离成-hooks函数" class="headerlink" title="5.复杂的 state 逻辑, 请抽离成 hooks函数"></a>5.复杂的 state 逻辑, 请抽离成 <code>hooks函数</code></h6><pre class="line-numbers language-react" data-language="react"><code class="language-react">&#x2F;&#x2F; badfunction TargetComponent(&#123; url, options &#125;) &#123;  const [data, setData] &#x3D; useState([]);  useEffect(async ()&#x3D;&gt;&#123;    cosnt data &#x3D; await fetch(url, options);    setData(data)  &#125;, [])  function handleOnUpdateData (nextOptions) &#123;    cosnt data &#x3D; await fetch(url, nextOptions);    setData(data)  &#125;  return &lt;OtherComponent data&#x3D;&#123;data&#125; onChange&#x3D;&#123;handleOnUpdateData&#125; &#x2F;&gt;&#125;&#x2F;&#x2F; best&#x2F;&#x2F; 将状态逻辑抽离至 hooks 文件夹内import useFetchData from &quot;src&#x2F;hooks&#x2F;useFetchData&quot;;function TargetComponent(&#123; url, options &#125;) &#123;  &#x2F;&#x2F; 复用 state 逻辑, 是 hooks 最重要的意义  const [data, updateData] &#x3D; useFetchData(url, options);  return &lt;OtherComponent data&#x3D;&#123;data&#125; onChange&#x3D;&#123;updateData&#125; &#x2F;&gt;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="六、提交规范"><a href="#六、提交规范" class="headerlink" title="六、提交规范"></a>六、提交规范</h4><p>多人协作的项目中，在提交代码这个环节，也存在一种情况：不能保证每个人对提交信息的准确描述，因此会出现提交信息紊乱、风格不一致的情况。</p><p>如果 <code>git commit</code> 的描述信息精准，在后期维护和 Bug 处理时会变得有据可查，项目开发周期内还可以根据规范的提交信息快速生成开发日志，从而方便我们追踪项目和把控进度。</p><h6 id="1-type说明"><a href="#1-type说明" class="headerlink" title="1. type说明"></a>1. type说明</h6><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">feat</td><td align="left">新增一个功能</td></tr><tr><td align="left">fix</td><td align="left">修复一个bug</td></tr><tr><td align="left">docs</td><td align="left">文档变更</td></tr><tr><td align="left">style</td><td align="left">代码格式（不影响功能，例如空格、分号等格式修正）</td></tr><tr><td align="left">refactor</td><td align="left">代码重构</td></tr><tr><td align="left">perf</td><td align="left">改善性能</td></tr><tr><td align="left">test</td><td align="left">测试</td></tr><tr><td align="left">build</td><td align="left">变更项目构建或外部依赖（例如scopes: webpack、gulp、npm等）</td></tr><tr><td align="left">ci</td><td align="left">更改持续集成软件的配置文件和package中的script命令，例如scopes: Travis、Circle等</td></tr><tr><td align="left">chore</td><td align="left">变更构建流程或辅助工具</td></tr><tr><td align="left">revert</td><td align="left">代码回退</td></tr></tbody></table><h6 id="2-scope说明"><a href="#2-scope说明" class="headerlink" title="2.scope说明"></a>2.scope说明</h6><p>scope 用于指定本次 commit 影响的范围。scope 依据项目而定，例如在业务项目中可以依据菜单或者功能模块划分，如果是组件库开发，则可以依据组件划分。（scope 可省略）</p><h6 id="3-subject说明"><a href="#3-subject说明" class="headerlink" title="3.subject说明"></a>3.subject说明</h6><p>subject 是本次 commit 的简洁描述，长度约定在 50 个字符以内，通常遵循以下几个规范：</p><ul><li>用动词开头，第一人称现在时表述，例如：change 代替 changed 或 changes</li><li>第一个字母小写</li><li>结尾不加句号（.）</li></ul><h6 id="4-body"><a href="#4-body" class="headerlink" title="4.body"></a>4.body</h6><p>body 是对本次 commit 的详细描述，可以分成多行。（body 可省略）</p><p>跟 subject 类似，用动词开头，body 应该说明修改的原因和更改前后的行为对比。</p><h6 id="5-规范-commit-message-的好处"><a href="#5-规范-commit-message-的好处" class="headerlink" title="5.规范 commit message 的好处"></a>5.规范 commit message 的好处</h6><ul><li>首行就是简洁实用的关键信息，方便在 git history 中快速浏览。</li><li>具有更加详细的 body 和 footer，可以清晰的看出某次提交的目的和影响。</li><li>可以通过 type 过滤出想要查找的信息，也可以通过关键字快速查找相关提交。</li><li>可以直接从 commit 生成 change log。</li></ul><h5 id="集成-Commitizen和cz-conventional-changelog"><a href="#集成-Commitizen和cz-conventional-changelog" class="headerlink" title="集成 Commitizen和cz-conventional-changelog"></a>集成 Commitizen和cz-conventional-changelog</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js">yarn add commitizen cz<span class="token operator">-</span>conventional<span class="token operator">-</span>changelog <span class="token constant">D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>在 <code>package.json</code> 中增加了 <code>config.commitizen</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"config"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token string">"commitizen"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"path"</span><span class="token operator">:</span> <span class="token string">"./node_modules/cz-conventional-changelog"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以前我们使用的是<code>git commit -m &quot;msg&quot;</code>，现在改为<code>git cz</code>，然后按照终端提示，逐步输入信息，就能自动生成规范的commit message</p></li></ol><img src="https://z3.ax1x.com/2021/07/20/WYgg5d.png"><h5 id="自定义配置提交说明"><a href="#自定义配置提交说明" class="headerlink" title="自定义配置提交说明"></a>自定义配置提交说明</h5><p>上面的截图可以看到，<code>git cz</code> 终端操作提示都是英文的，如果想改成中文的或者自定义这些配置选项，我们使用 <strong>cz-customizable</strong> 适配器。</p><ol><li><p>安装cz-customizable</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">yarn add cz<span class="token operator">-</span>customizable <span class="token operator">-</span><span class="token constant">D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改 <code>package.json</code> 中的 <code>config.commitizen</code> 字段</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"config"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token string">"commitizen"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"path"</span><span class="token operator">:</span> <span class="token string">"./node_modules/cz-customizable"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在根目录下新建<code>.cz-config.js</code>文件，配置中文</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// type 类型（定义之后，可通过上下键选择）</span>  types<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> <span class="token string">'feat'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'feat:     新增功能'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> <span class="token string">'fix'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'fix:      修复 bug'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> <span class="token string">'docs'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'docs:     文档变更'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      value<span class="token operator">:</span> <span class="token string">'style'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'style:    代码格式（不影响功能，例如空格、分号等格式修正）'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      value<span class="token operator">:</span> <span class="token string">'refactor'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'refactor: 代码重构（不包括 bug 修复、功能新增）'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> <span class="token string">'perf'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'perf:     性能优化'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'test:     添加、修改测试用例'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      value<span class="token operator">:</span> <span class="token string">'build'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'build:    构建流程、外部依赖变更（如升级 npm 包、修改 webpack 配置等）'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> <span class="token string">'ci'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'ci:       修改 CI 配置、脚本'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      value<span class="token operator">:</span> <span class="token string">'chore'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'chore:    对构建过程或辅助工具和库的更改（不影响源文件、测试用例）'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> <span class="token string">'revert'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'revert:   回滚 commit'</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment">// scope 类型（定义之后，可通过上下键选择）</span>  scopes<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'components'</span><span class="token punctuation">,</span> <span class="token string">'组件相关'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'hooks'</span><span class="token punctuation">,</span> <span class="token string">'hook 相关'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'utils'</span><span class="token punctuation">,</span> <span class="token string">'utils 相关'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'element-ui'</span><span class="token punctuation">,</span> <span class="token string">'对 element-ui 的调整'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'styles'</span><span class="token punctuation">,</span> <span class="token string">'样式相关'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'deps'</span><span class="token punctuation">,</span> <span class="token string">'项目依赖'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'auth'</span><span class="token punctuation">,</span> <span class="token string">'对 auth 修改'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'other'</span><span class="token punctuation">,</span> <span class="token string">'其他修改'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 如果选择 custom，后面会让你再输入一个自定义的 scope。也可以不设置此项，把后面的 allowCustomScopes 设置为 true</span>    <span class="token punctuation">[</span><span class="token string">'custom'</span><span class="token punctuation">,</span> <span class="token string">'以上都不是？我要自定义'</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>value<span class="token punctuation">,</span> description<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      value<span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>description<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">// 是否允许自定义填写 scope，在 scope 选择的时候，会有 empty 和 custom 可以选择。</span>  <span class="token comment">// allowCustomScopes: true,</span>        <span class="token comment">// allowTicketNumber: false,</span>  <span class="token comment">// isTicketNumberRequired: false,</span>  <span class="token comment">// ticketNumberPrefix: 'TICKET-',</span>  <span class="token comment">// ticketNumberRegExp: '\\d&#123;1,5&#125;',</span>        <span class="token comment">// 针对每一个 type 去定义对应的 scopes，例如 fix</span>  <span class="token comment">/*  scopeOverrides: &#123;    fix: [      &#123; name: 'merge' &#125;,      &#123; name: 'style' &#125;,      &#123; name: 'e2eTest' &#125;,      &#123; name: 'unitTest' &#125;    ]  &#125;,  */</span>        <span class="token comment">// 交互提示信息</span>  messages<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> <span class="token string">'确保本次提交遵循 Angular 规范！\n选择你要提交的类型：'</span><span class="token punctuation">,</span>    scope<span class="token operator">:</span> <span class="token string">'\n选择一个 scope（可选）：'</span><span class="token punctuation">,</span>    <span class="token comment">// 选择 scope: custom 时会出下面的提示</span>    customScope<span class="token operator">:</span> <span class="token string">'请输入自定义的 scope：'</span><span class="token punctuation">,</span>    subject<span class="token operator">:</span> <span class="token string">'填写简短精炼的变更描述：\n'</span><span class="token punctuation">,</span>    body<span class="token operator">:</span> <span class="token string">'填写更加详细的变更描述（可选）。使用 "|" 换行：\n'</span><span class="token punctuation">,</span>    breaking<span class="token operator">:</span> <span class="token string">'列举非兼容性重大的变更（可选）：\n'</span><span class="token punctuation">,</span>    footer<span class="token operator">:</span> <span class="token string">'列举出所有变更的 ISSUES CLOSED（可选）。 例如: #31, #34：\n'</span><span class="token punctuation">,</span>    confirmCommit<span class="token operator">:</span> <span class="token string">'确认提交？'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 设置只有 type 选择了 feat 或 fix，才询问 breaking message</span>  allowBreakingChanges<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'feat'</span><span class="token punctuation">,</span> <span class="token string">'fix'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment">// 跳过要询问的步骤</span>  skipQuestions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token string">'footer'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        subjectLimit<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token comment">// subject 限制长度</span>  breaklineChar<span class="token operator">:</span> <span class="token string">'|'</span> <span class="token comment">// 换行符，支持 body 和 footer</span>  <span class="token comment">// footerPrefix : 'ISSUES CLOSED:'</span>  <span class="token comment">// askForBreakingChangeFirst : true,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>再次使用<code>git cz</code>，提示信息变为中文</li></ol></li></ol><img src="https://z3.ax1x.com/2021/07/20/WYgjx0.png">]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年6月23日</title>
      <link href="/record-blog/2021/06/23/20210623/"/>
      <url>/record-blog/2021/06/23/20210623/</url>
      
        <content type="html"><![CDATA[<h1 id="IntersectionObserver"><a href="#IntersectionObserver" class="headerlink" title="IntersectionObserver"></a>IntersectionObserver</h1><h4 id="1-场景需求："><a href="#1-场景需求：" class="headerlink" title="1.场景需求："></a><strong>1.场景需求：</strong></h4><p>在项目当中经常会遇到列表的请求，比如当数据过多时就会造成卡顿，可以使用虚拟列表，插件有react-virtualized…,还可以使用intersectionObserver来进行优化，原理就是根据通过判断元素是否进入视口来进行加载，常见的方法有以下三种</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span> el<span class="token punctuation">.</span>offsetTop <span class="token operator">-</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">&lt;=</span> viewPortHeight<span class="token number">2.</span> el<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top <span class="token operator">&lt;=</span> viewPortHeight<span class="token number">3.</span> intersectionRatio <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> intersectionRatio <span class="token operator">&lt;=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-缺点："><a href="#2-缺点：" class="headerlink" title="2.缺点："></a><strong>2.缺点：</strong></h4><ul><li>前面两种方式都是使用scroll的方式，会造成频繁的触发事件，容易造成性能问题，所以还需要做防抖的处理</li><li>另外获取<code>srollTop</code>的值和<code>getBoundingClientRect</code>方法都会导致<code>回流</code></li><li>滚动事件会绑定多个事件处理函数，阻塞UI渲染</li></ul><h4 id="3-IntersectionObserver"><a href="#3-IntersectionObserver" class="headerlink" title="3.IntersectionObserver"></a><strong>3.IntersectionObserver</strong></h4><p>IntersectionObserver时浏览器提供的方法，兼容性好像不是特别高，可以使用ployfill，<strong>IntersectionObserver API 是异步的，不随着目标元素的滚动同步触发。</strong></p><h6 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h6><ul><li><code>observe</code> 开始监听一个目标元素(target)，<code>target</code>必须是root的后代</li><li><code>unobserve</code> 停止监听一个目标元素</li><li><code>takeRecords</code> 返回所有监听的目标元素集合</li><li><code>disconnect</code> 停止所有监听</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> option<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol><li>callback参数：目标元素的可见性变化时，就会调用观察器的回调函数<code>callback</code>。一般会触发两次一次进入视口一次离开视口</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>  <span class="token parameter">entries</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>callback</code>函数的参数（<code>entries</code>）是一个数组，每个成员都是一个<a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry"><code>IntersectionObserverEntry</code></a>对象。举例来说，如果同时有两个被观察的对象的可见性发生变化，<code>entries</code>数组就会有两个成员。</p></li><li><p>option参数：</p><ol><li>threshold：性决定了什么时候触发回调函数。它是一个数组，每个成员都是一个门槛值，默认为<code>[0]</code>，即交叉比例（<code>intersectionRatio</code>）达到<code>0</code>时触发回调函数。</li><li>root：顾名思义，就是监听对象的父元素</li><li>rootMargin：它使用CSS的定义方法，比如<code>10px 20px 30px 40px</code>，表示 top、right、bottom 和 left 四个方向的值，从而影响<code>intersectionRect</code>交叉区域的大小</li></ol></li></ul><h4 id="4-IntersectionObserverEntry"><a href="#4-IntersectionObserverEntry" class="headerlink" title="4.IntersectionObserverEntry"></a><strong>4.IntersectionObserverEntry</strong></h4><p><code>IntersectionObserverEntry</code>对象提供目标元素的信息，一共有六个属性。</p><ul><li><code>time</code>：可见性发生变化的时间，是一个高精度时间戳，单位为毫秒</li><li><code>target</code>：被观察的目标元素，是一个 DOM 节点对象</li><li><code>rootBounds</code>：根元素的矩形区域的信息，<code>getBoundingClientRect()</code>方法的返回值，如果没有根元素（即直接相对于视口滚动），则返回<code>null</code></li><li><code>boundingClientRect</code>：目标元素的矩形区域的信息</li><li><code>intersectionRect</code>：目标元素与视口（或根元素）的交叉区域的信息</li><li><code>intersectionRatio</code>：目标元素的可见比例，即<code>intersectionRect</code>占<code>boundingClientRect</code>的比例，完全可见时为<code>1</code>，完全不可见时小于等于<code>0</code></li></ul><h4 id="5-代码示例"><a href="#5-代码示例" class="headerlink" title="5.代码示例"></a><strong>5.代码示例</strong></h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">&#x2F;&#x2F; useLoading.js&#x2F;* * @Description: 滚动加载,只需传入对呀ref即可 * @Autor: wxy * @Date: 2021-06-23 16:43:10 * @LastEditors: wxy * @LastEditTime: 2021-06-23 17:21:44 *&#x2F;import &#123; useState, useEffect &#125; from &#39;react&#39;;const useLoading &#x3D; (ref) &#x3D;&gt; &#123;  const [loading, setLoading] &#x3D; useState(true);  useEffect(() &#x3D;&gt; &#123;    setTimeout(() &#x3D;&gt; &#123;      if (!ref.current) &#123;        return () &#x3D;&gt; &#123; &#125;      &#125;      const node &#x3D; ref.current;      const observer &#x3D; new IntersectionObserver((entries, observer) &#x3D;&gt; &#123;        entries.forEach((entry) &#x3D;&gt; &#123;          if (entry.isIntersecting) &#123;            setLoading(false);            observer.unobserve(entry.target);          &#125;        &#125;);      &#125;);      if (node !&#x3D; null) &#123;        observer.observe(node);      &#125;      return () &#x3D;&gt; &#123;        observer.disconnect();      &#125;    &#125;, 1000)  &#125;, [ref]);  return loading;&#125;export default useLoading;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年2月23日(数组，列表，集合)</title>
      <link href="/record-blog/2021/02/23/20210223/"/>
      <url>/record-blog/2021/02/23/20210223/</url>
      
        <content type="html"><![CDATA[<h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p><strong>由一个或多个确定的元素所构成的整体</strong></p><p>首先，集合里的元素类型不一定相同。 你可以将商品看作一个集合，也可以将整个商店看作一个集合，这个商店中有人或者其他物品也没有关系。</p><p>其次，集合里的元素没有顺序。 我们不会这样讲：我想要集合中的第三个元素，因为集合是没有顺序的。</p><p>事实上，这样的集合并不直接存在于编程语言中。然而，实际编程语言中的很多数据结构，就是在集合的基础上添加了一些规则形成的。</p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p><strong>是一种数据项构成的有限序列，即按照一定的线性顺序，排列而成的数据项的集合。</strong></p><p>在编程语言中，列表最常见的表现形式有数组和链表，而我们熟悉的栈和队列则是两种特殊类型的列表。除此之外，向列表中添加、删除元素的具体实现方式会根据编程语言的不同而有所区分。</p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p><strong>数组是列表的实现方式之一</strong></p><p>列表是没有索引的，而数组是有的，其次，数组中的元素在内存中是连续存储的，且每个元素占用相同大小的内存，相反，列表中的元素在内存中可能彼此相邻，也可能不相邻。比如列表的另一种实现方式——链表，它的元素在内存中则不一定是连续的</p><h4 id="为什么React使用的单向链表而不是数组呢？"><a href="#为什么React使用的单向链表而不是数组呢？" class="headerlink" title="为什么React使用的单向链表而不是数组呢？"></a>为什么React使用的单向链表而不是数组呢？</h4><p>链表和数组的区别：数组的存储空间是静态的，数组是连续存储，链表并不是连续，链表的节点与节点之间通过指针来联系，链表也有不同的形态,主要分为三种:单向链表、双向链表、循环链表</p><img src="https://xiaomuzhu-image.oss-cn-beijing.aliyuncs.com/56377ec66d30a5840cce25141cbdaf68.png" alt="链表vs数组" loading="lazy"><h5 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h5><p>单向链表的节点通常由两个部分构成,一个是节点储存的值<code>val</code>,另一个就是节点的指针<code>next</code>.</p><img src="https://xiaomuzhu-image.oss-cn-beijing.aliyuncs.com/7fcadf08736bf6c79155832ee4f06c4f.png" alt="单向链表" loading="lazy"><p>由于链表和数组的特性不同，导致不同的操作，复杂度也不一样</p><ol><li>查找</li></ol><p>数组：可以按下标索引来访问，速度快</p><p>单向链表:</p><ul><li><p>从头节点进入,开始比对节点的值,如果不同则通过指针进入下一个节点</p></li><li><p>重复上面的动作,直到找到相同的值,或者节点的指针指向null</p></li></ul><ol start="2"><li>插入删除性能</li></ol><p>链表与数组最大的不同就在于删除、插入的性能优势,由于链表是非连续的内存,所以不用像数组一样在插入、删除操作的时候需要进行大面积的成员位移，链表只需要移动一下指针即可，而且链表由于指针的存在可以形成环形链表，在特定场景也非常有用</p><h5 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h5><img src="https://xiaomuzhu-image.oss-cn-beijing.aliyuncs.com/6ce72061e616823739f9d246915200fd.png" alt="双向链表" loading="lazy">]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年2月21日(大屏数据可视化屏幕适配)</title>
      <link href="/record-blog/2021/02/20/20210221/"/>
      <url>/record-blog/2021/02/20/20210221/</url>
      
        <content type="html"><![CDATA[<h4 id="常见大屏分辨率"><a href="#常见大屏分辨率" class="headerlink" title="常见大屏分辨率"></a>常见大屏分辨率</h4><ul><li>1366 * 768 ： 普通液晶显示器</li><li>1920 * 1080： 高清液晶显示器</li><li>2560 * 1440： 2K高清显示器</li><li>4096 * 2160： 4K高清显示器</li><li>1280 * 720： 笔记本（1920*1080分辨率下系统默认推荐150%缩放比产生的尺寸。。。。）</li></ul><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><ul><li><p>设计稿按照1920*1080的分辨率，16:9的比例设计， 实际开发中，document窗口不足16:9（高度减掉顶部tab及导航栏，地址栏等）</p></li><li><p>不同分辨率：实际应用场景中，显示场景不同，不能固定写死px单位</p></li><li><p>不同比例：不同的显示器宽高比与设计稿不一致</p></li><li><p>由于大屏数据可视化项目通常用于放在电视或广告屏上展示用，不允许出现滚动条</p></li></ul><h4 id="常见适配方法"><a href="#常见适配方法" class="headerlink" title="常见适配方法"></a>常见适配方法</h4><p><strong>1. rem</strong></p><p>移动端有比较常用的插件比如阿里的 手淘lib-flexible 方案,设置相对于根元素的 font-size 值的大小</p><ul><li>通常如果应用场景只涉及16:9比例下，1920*1080分辨率屏幕的话，使用rem来自动计算即可实现不同大小屏幕的适配</li></ul><p><strong>2. px2rem</strong> </p><p>要将设计稿的px转为rem，就要经过计算，可以在vscode上下载插件px to rem，进行自动转化，还可以使用<strong>postcss-plugin-px2rem</strong>插件进行配置</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">css<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      loaderOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          postcss<span class="token operator">:</span> <span class="token punctuation">&#123;</span>              plugins<span class="token operator">:</span> <span class="token punctuation">[</span>                  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'postcss-plugin-px2rem'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                       rootValue<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token comment">//换算基数， 默认100  ，这样的话把根标签的字体规定为1rem为50px,这样就可以从设计稿上量出多少个px直接在代码中写多上px了。</span>                      unitPrecision<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">//允许REM单位增长到的十进制数字。</span>                      propWhiteList<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">//默认值是一个空数组，这意味着禁用白名单并启用所有属性。</span>                      propBlackList<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//黑名单</span>                      exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_module)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  <span class="token comment">//默认false，可以（reg）利用正则表达式排除某些文件夹的方法，例如/(node_module)/ 。如果想把前端UI框架内的px也转换成rem，请把此属性设为默认值</span>                      selectorBlackList<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//要忽略并保留为px的选择器</span>                      ignoreIdentifier<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">//（boolean/string）忽略单个属性的方法，启用ignoreidentifier后，replace将自动设置为true。</span>                      replace<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// （布尔值）替换包含REM的规则，而不是添加回退。</span>                      mediaQuery<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">//（布尔值）允许在媒体查询中转换px。</span>                      minPixelValue<span class="token operator">:</span> <span class="token number">3</span> <span class="token comment">//设置要替换的最小像素值(3px会被转rem)。 默认 0</span>                  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. css3缩放scale</strong></p><p>通过设备的高度或宽度除以输入的高度或宽度</p><p>获取设备宽度：const domWidth = document.body.clientWidth</p><p>获取输入宽度：通常就是设计稿容器的宽度</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * @description: 自适应布局 * @param &#123;*&#125; element dom元素 * @author: wxy */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fitLayout</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> cWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth <span class="token comment">// 设备</span>  <span class="token keyword">const</span> appWidth <span class="token operator">=</span> <span class="token number">3593</span> <span class="token comment">// 输入</span>  <span class="token keyword">const</span> scaleValue <span class="token operator">=</span> cWidth <span class="token operator">/</span> appWidth  <span class="token keyword">return</span> scaleValue<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后在app.vue中调用</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;a-config-provider :locale&#x3D;&quot;locale&quot;&gt;    &lt;div id&#x3D;&quot;app&quot; ref&#x3D;&quot;app&quot; :style&#x3D;&quot;transformStyle&quot;&gt;      &lt;router-view&#x2F;&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;a-config-provider&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123; domTitle, setDocumentTitle, fitLayout &#125; from &#39;@&#x2F;utils&#x2F;domUtil&#39;export default &#123;  data () &#123;    return &#123;      scaleValue: 0,      transformStyle: &#123;&#125;    &#125;  &#125;,  mounted () &#123;    this.$nextTick(() &#x3D;&gt; &#123;      this.scaleValue &#x3D; fitLayout(this.$refs.app)      this.transformStyle &#x3D; &#123;        transform: &#39;scale(&#39; + this.scaleValue + &#39;) translateY(-50%)&#39;,        transformOrigin: &#39;left top&#39;,        position: &#39;absolute&#39;,        top: &#39;50%&#39;      &#125;    &#125;)  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210220(vue项目总结)</title>
      <link href="/record-blog/2021/02/20/20210220/"/>
      <url>/record-blog/2021/02/20/20210220/</url>
      
        <content type="html"><![CDATA[<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>src目录下主要可以分为：</p><ul><li>api (存放api请求，文件名与模型名称基本一致，文件名使用小驼峰，方法名称与后端 restful 控制器一致)</li><li>assets (存放静态资源)</li><li>icons (手机端需要使用svg时，可用于存放，使用svg-sprite-loader插件，具体可以看<a href="https://rookiewxy.github.io/record-blog/2021/02/13/20201102/">20201102笔记</a>)</li><li>lang (存放多语言)</li><li>layouts (布局组件)</li><li>mock (需要mock使用，我通常使用mockjs2)</li><li>plugins (存放插件配置，比如 axios,antd 等)</li><li>router (其中还可以根据项目内容划分模块，可以在里面封装对应的方法，例如权限，动态路由的生成)</li><li>store (状态管理)</li><li>styles (可以具体分为color.less flex_box.less,….)</li><li>utils (存放辅助函数)</li><li>views (为业务视图层，其由 vue-router 直接调度)</li><li>main.js (为 app 的入口)</li><li>components  (目录，存放组件。通常是一些可复用的组件)</li></ul><h4 id="项目规范"><a href="#项目规范" class="headerlink" title="项目规范"></a>项目规范</h4><p>每个公司甚至有可能每个项目的规范都不太一样</p><p>1.注释：当项目比较大，代码量多的时候，就体现到了注释的重要性，使用vscode的koroFileHeader的插件可以快速生成，很方便</p><p>2.数据：前端做的事情可以分为三类，数据请求，状态管理，页面渲染，我再写项目的过程当中通常会在store文件夹下新建models文件，里面在进行模块的划分，把api的请求写在actions里面，在组件里面进行调用（只在views下的组件调用），最后写一个initData()方法，在生命周期调用该方法</p><p>3.组件命名：采用驼峰式命名，例如test-demo，组件的name的首字母必须大写</p><p>4.eslint: 具体的eslint可以在vscode开启，也会在编译的时候给出提示，让代码更加规范</p><h5 id="项目优化"><a href="#项目优化" class="headerlink" title="项目优化"></a>项目优化</h5><p>1.webpack: 具体可以看<a href="https://rookiewxy.github.io/record-blog/2021/02/13/20210108/">2021年1月8日(webpack项目优化)笔记</a></p><p>2.缓存: <img src="/record-blog/2021/02/20/20210220/image-20210220090948599.png" alt="image-20210220090948599"></p><p>，结合自身需要选择一种合适的缓存方式，有条件的也可以使用cdn</p><p>3.代码层面：按照代码规范来就行</p><h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p>可以查看<a href="https://rookiewxy.github.io/record-blog/2021/02/13/20201106/">20201106笔记</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年2月19日(装饰器)</title>
      <link href="/record-blog/2021/02/19/20210219/"/>
      <url>/record-blog/2021/02/19/20210219/</url>
      
        <content type="html"><![CDATA[<h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><p>装饰器是一种特殊类型的声明，它能够被附加到类声明，方法，访问符，属性或参数上。装饰器函数的第一个参数，就是所要装饰的目标类。ES7 中的 decorator其实是一个语法糖， 依赖于 ES5 的 <code>Object.defineProperty</code> 方法 </p><h4 id="装饰器组合"><a href="#装饰器组合" class="headerlink" title="装饰器组合"></a>装饰器组合</h4><p>多个装饰器可以同时应用到被装饰对象上，例如：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">@sealed@<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>装饰器执行顺序：</p><ol><li>装饰器工厂需要先求值，再装饰，求值顺序是由上到下</li><li>装饰器可以直接求值，装饰顺序是由下到上(在__decorate函数中，通过遍历装饰器列表进行执行，由于遍历的时候是倒序遍历的)</li></ol><p>例子如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'f求值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'f装饰'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'g求值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'g装饰'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>@<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>@<span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行顺序为</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">f求值g求值g装饰f装饰<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="装饰器类型"><a href="#装饰器类型" class="headerlink" title="装饰器类型"></a>装饰器类型</h4><ol><li>类装饰器</li><li>方法装饰器</li><li>属性装饰器</li><li>函数参数装饰器</li></ol><h5 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h5><p>   类装饰器在定义类的地方。类装饰器可以监视、修改或替换类定义。类的构造函数将作为唯一参数传递给装饰器。如果类装饰器返回一个值，它会使用返回的构造函数替换原来的类声明。</p>   <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//类装饰器</span><span class="token keyword">function</span> <span class="token function">logClass1</span><span class="token punctuation">(</span><span class="token parameter">params<span class="token operator">:</span>any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>　　<span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token operator">:</span>any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token comment">//当前类</span>　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token comment">// 调用装饰器传入实参</span>　　<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>@<span class="token function">logClass1</span><span class="token punctuation">(</span><span class="token string">'fsdf'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">HttpClict1</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h5><p>   方法装饰器用来装饰类的方法（静态方法和实例方法都可以）。方法装饰器可以监视、修改或替换方法定义。</p><p>   方法装饰器接收3个参数：</p><ul><li><p>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</p></li><li><p>成员的名字</p></li><li><p>成员属性的描述符</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*** 方法装饰器会在运行时传入三个参数* 1.对于静态成员来说是类的构造函数，对于实例成员是类的原型对象* 2.成员的名字* 3.成员属性的描述符*/</span><span class="token keyword">function</span> <span class="token function">logMethod</span><span class="token punctuation">(</span><span class="token parameter">params<span class="token operator">:</span>any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>　　<span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token operator">:</span>any<span class="token punctuation">,</span>methodName<span class="token operator">:</span>any<span class="token punctuation">,</span>desc<span class="token operator">:</span>any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span>　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span>　　<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">HttpClict1</span> <span class="token punctuation">&#123;</span>　　@<span class="token function">logMethod</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>    <span class="token function">getdata</span><span class="token punctuation">(</span><span class="token parameter">param<span class="token operator">:</span>any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>　　<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//属性装饰器</span><span class="token keyword">function</span> <span class="token function">attr</span><span class="token punctuation">(</span><span class="token parameter">params<span class="token operator">:</span>any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>　　<span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token operator">:</span>any<span class="token punctuation">,</span>attr<span class="token operator">:</span>any</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token comment">// 属性url传入的形参</span>　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token comment">// 当前类</span>　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span> <span class="token comment">//当前属性名称</span>　　　　target<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> params<span class="token punctuation">;</span> <span class="token comment">// 修改构造函数里面的属性</span>　　<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">HttpClict1</span> <span class="token punctuation">&#123;</span>　　@<span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span>　　url<span class="token operator">:</span>string <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="函数参数装饰器"><a href="#函数参数装饰器" class="headerlink" title="函数参数装饰器"></a>函数参数装饰器</h5>   <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//方法参数装饰器</span><span class="token comment">/*** 1.对于静态成员来说是类的构造函数，对于实例成员来说是类的原型对象* 2.参数 的名字* 3.参数在函数参数列表中的索引*/</span><span class="token keyword">function</span> <span class="token function">logParams</span><span class="token punctuation">(</span><span class="token parameter">params<span class="token operator">:</span>string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>　　<span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token operator">:</span>any<span class="token punctuation">,</span>methodName<span class="token operator">:</span>any<span class="token punctuation">,</span>paramsIndes<span class="token operator">:</span>any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span>　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>paramsIndes<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">HttpClict1</span> <span class="token punctuation">&#123;</span><span class="token function">　　getdata</span><span class="token punctuation">(</span>@<span class="token function">logParams</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span> param<span class="token operator">:</span>any<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>　　<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年02月05日(Diff)</title>
      <link href="/record-blog/2021/02/13/20210205/"/>
      <url>/record-blog/2021/02/13/20210205/</url>
      
        <content type="html"><![CDATA[<h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><p>1.在<code>react</code>中最多会存在两颗<code>Fiber</code>树，视图中的<code>Fiber</code>树(current Fiber)，和内存中构建的<code>Fiber</code>树(workInProgress Fiber)</p><p><code>react</code>应用的根节点会通过<code>current</code>指针，在这两颗<code>Fiber</code>树之间进行切换,当<code>workInProgress Fiber</code>构建完成时渲染在页面上之后，<code>current</code>指针就会指向<code>workInProgress Fiber</code>，它就变成了<code>current Fiber</code></p><p>在<strong>update</strong>时，会生成一棵新的<code>workInProgress Fiber</code>，他的创建可以复用<code>current Fiber</code>对应的节点数据，这个过程称之为Diff</p><p>2.如何判断dom节点是否可以复用？</p><ul><li><p>单节点：</p><p>只需判断key和type即可，如果key不相同，type就可以不用看了，如果key相同，但是type不同，也不可以复用，key最好设置为id，如果是index，其实和没设置是一样的</p></li><li><p>多节点：</p><p><code>Diff</code>其实就是增，删，改，不同的操作是有优先级的，因为更新的频率更高，所以<code>Diff</code>会优先判断当前节点属于是不是更新操作</p><p><code>Diff算法</code>的整体逻辑会经历两轮遍历：</p><p>第一轮遍历：处理<code>更新</code>的节点。</p><p>第二轮遍历：处理剩下的不属于<code>更新</code>的节点。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 之前</span><span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"0"</span> className<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"1"</span> className<span class="token operator">=</span><span class="token string">"b"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token comment">// 之后 情况1 —— newChildren与oldFiber都遍历完</span><span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"0"</span> className<span class="token operator">=</span><span class="token string">"aa"</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"1"</span> className<span class="token operator">=</span><span class="token string">"bb"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token comment">// 之后 情况2 —— newChildren没遍历完，oldFiber遍历完</span><span class="token comment">// newChildren剩下 key==="2" 未遍历</span><span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"0"</span> className<span class="token operator">=</span><span class="token string">"aa"</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"1"</span> className<span class="token operator">=</span><span class="token string">"bb"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"2"</span> className<span class="token operator">=</span><span class="token string">"cc"</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token comment">// 之后 情况3 —— newChildren遍历完，oldFiber没遍历完</span><span class="token comment">// oldFiber剩下 key==="1" 未遍历</span><span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"0"</span> className<span class="token operator">=</span><span class="token string">"aa"</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>newChildren与oldFiber都遍历完如果都遍历完，说明节点复用了，因为在遍历时如果key不同则会跳出遍历，如果key相同，type不同，则会为oldFiber<code>标记为</code>DELETION，并继续遍历</li><li>newChildren没遍历完，oldFiber遍历完，这个时候该复用的已经复用，，但是newChildren没有遍历完，说明会有新增的节点</li><li>newChildren遍历完，oldFiber没遍历完，意味着本次更新比之前的节点数量少，有节点被删除了。所以需要遍历剩下的<code>oldFiber</code>，依次标记<code>Deletion</code></li></ol></li></ul><p>对于只是移动的节点，可以通过key来判断，如何判断节点是否移动？</p><p>需要一个参照物，最后一个可复用的节点在<code>oldFiber</code>中的位置索引（用变量<code>lastPlacedIndex</code>表示）。</p><p>由于本次更新中节点是按<code>newChildren</code>的顺序排列。在遍历<code>newChildren</code>过程中，每个<code>遍历到的可复用节点</code>一定是当前遍历到的<code>所有可复用节点</code>中<strong>最靠右的那个</strong>，即一定在<code>lastPlacedIndex</code>对应的<code>可复用的节点</code>在本次更新中位置的后面。</p><p>那么我们只需要比较<code>遍历到的可复用节点</code>在上次更新时是否也在<code>lastPlacedIndex</code>对应的<code>oldFiber</code>后面，就能知道两次更新中这两个节点的相对位置改变没有。</p><p>如果<code>oldIndex &lt; lastPlacedIndex</code>，代表本次更新该节点需要向右移动。</p><p>lastPlacedIndex<code>初始为</code>0<code>，每遍历一个可复用的节点，如果</code>oldIndex &gt;= lastPlacedIndex<code>，则</code>lastPlacedIndex = oldIndex</p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年1月12日(react合成事件)</title>
      <link href="/record-blog/2021/02/13/20210112/"/>
      <url>/record-blog/2021/02/13/20210112/</url>
      
        <content type="html"><![CDATA[<h6 id="1-react为什么要提供合成事件？"><a href="#1-react为什么要提供合成事件？" class="headerlink" title="1.react为什么要提供合成事件？"></a>1.react为什么要提供合成事件？</h6><p>官方文档的描述:</p><p><strong>SyntheticEvent 实例将被传递给你的事件处理函数，它是浏览器的原生事件的跨浏览器包装器。除兼容所有浏览器外，它还拥有和浏览器原生事件相同的接口</strong></p><p>可以看出React 想实现一个全浏览器的框架， 为了实现这种目标就需要提供全浏览器一致性的事件系统，以此抹平不同浏览器的差异</p><h6 id="2-react的合成事件和原生事件如何对应，如何绑定呢？"><a href="#2-react的合成事件和原生事件如何对应，如何绑定呢？" class="headerlink" title="2.react的合成事件和原生事件如何对应，如何绑定呢？"></a>2.react的合成事件和原生事件如何对应，如何绑定呢？</h6><p>合成事件和原生事件的对应关系被存放在<code>EventPlugin</code>中，可以认为是将不同的合成事件函数封装成一个模块，每个模块只处理自己对应的合成事件，方便解耦</p><p>React 在一开始就将事件插件全部加载进来, <a href="https://github.com/facebook/react/blob/v16.13.1/packages/react-dom/src/client/ReactDOMClientInjection.js#L56">ReactDOMClientInjection</a> </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">injectEventPluginsByName</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    SimpleEventPlugin<span class="token operator">:</span> LegacySimpleEventPlugin<span class="token punctuation">,</span>    EnterLeaveEventPlugin<span class="token operator">:</span> LegacyEnterLeaveEventPlugin<span class="token punctuation">,</span>    ChangeEventPlugin<span class="token operator">:</span> LegacyChangeEventPlugin<span class="token punctuation">,</span>    SelectEventPlugin<span class="token operator">:</span> LegacySelectEventPlugin<span class="token punctuation">,</span>    BeforeInputEventPlugin<span class="token operator">:</span> LegacyBeforeInputEventPlugin<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个对象是 <strong>registrationNameModule</strong>,实现合成事件到plugin的映射，判断一个组件的prop是否是事件类型，如果再才会被当做事件处理</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>    onBlur<span class="token operator">:</span> SimpleEventPlugin<span class="token punctuation">,</span>    onClick<span class="token operator">:</span> SimpleEventPlugin<span class="token punctuation">,</span>    onClickCapture<span class="token operator">:</span> SimpleEventPlugin<span class="token punctuation">,</span>    onChange<span class="token operator">:</span> ChangeEventPlugin<span class="token punctuation">,</span>    onChangeCapture<span class="token operator">:</span> ChangeEventPlugin<span class="token punctuation">,</span>    onMouseEnter<span class="token operator">:</span> EnterLeaveEventPlugin<span class="token punctuation">,</span>    onMouseLeave<span class="token operator">:</span> EnterLeaveEventPlugin<span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二个对象是 <strong>registrationNameDependencies</strong>，这个对象是合成事件到原生事件的映射</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>    onBlur<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'blur'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    onClick<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'click'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    onClickCapture<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'click'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    onChange<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'blur'</span><span class="token punctuation">,</span> <span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token string">'focus'</span><span class="token punctuation">,</span> <span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token string">'keydown'</span><span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token string">'selectionchange'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    onMouseEnter<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'mouseout'</span><span class="token punctuation">,</span> <span class="token string">'mouseover'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    onMouseLeave<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'mouseout'</span><span class="token punctuation">,</span> <span class="token string">'mouseover'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三个对象是 <strong>plugins</strong>， 这个对象就是上面注册的所有插件列表</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">plugins <span class="token operator">=</span> <span class="token punctuation">[</span>LegacySimpleEventPlugin<span class="token punctuation">,</span> LegacyEnterLeaveEventPlugin<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.在React 的协调(Reconciler)阶段，也可以说是diff阶段，标记出哪些 <strong>DOM 类型</strong> 的节点需要添加或者更新</p><p>2.当检测到需要创建一个节点或者更新一个节点时， 使用 <strong>registrationNameModule</strong> 查看一个 prop 是不是一个事件类型，如果是则执行下一步</p><p>3.通过 <strong>registrationNameDependencies</strong> 检查这个 React 事件依赖了哪些<strong>原生事件类型</strong>。</p><p>4.检查这些一个或多个原生事件类型有没有注册过，如果有则忽略</p><p>5.如果这个原生事件类型没有注册过，则注册这个原生事件到 <code>document</code> 上</p><h6 id="3-setState是异步还是同步"><a href="#3-setState是异步还是同步" class="headerlink" title="3.setState是异步还是同步"></a>3.setState是异步还是同步</h6><p>网上有不少答案是这样说的：在钩子函数和合成事件中是异步，在原生事件和setTimeout中是同步</p><p>为什么被<code>setTimeout</code>包裹的<code>this.setState</code>可以在当前调用栈获取到更新后的<code>state</code>？</p><p>在老版<code>React</code>中，事件回调会被包裹在<code>batchedUpdates</code>函数中执行</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">batchedUpdates</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> prevContext <span class="token operator">=</span> context<span class="token punctuation">;</span>  context <span class="token operator">|=</span> batchedContext<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    context <span class="token operator">=</span> prevContext<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>被包裹的事件回调<code>fn</code>通过全局变量<code>context</code>就能获取当前是否处于<code>batchedContext</code>的上下文环境。</p><p>如果处于该环境就执行一些批处理操作。</p><p>而是否用<code>setTimeout</code>包裹<code>this.setState</code>影响的，就是在执行<code>this.setState</code>时全局变量<code>context</code>是否包含<code>batchedContext</code>。</p><p>在v17以后，就不会出现这样的问题</p><h6 id="4-React-17-中事件系统有哪些新特性"><a href="#4-React-17-中事件系统有哪些新特性" class="headerlink" title="4. React 17 中事件系统有哪些新特性"></a>4. React 17 中事件系统有哪些新特性</h6><ul><li><p>将顶层事件绑定在 <code>container</code> 上而不是 <code>document</code> 上能够解决我们遇到的多版本共存问题</p></li><li><p>React 17 中终于支持了原生捕获事件的支持， 对齐了浏览器原生标准。同时<code>onScroll</code> 事件不再进行事件冒泡。onFocus<code>和</code>onBlur<code>使用原生</code>focusin<code>， </code>focusout` 合成。</p></li><li><p>取消事件复用</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年1月8日(webpack项目优化)</title>
      <link href="/record-blog/2021/02/13/20210108/"/>
      <url>/record-blog/2021/02/13/20210108/</url>
      
        <content type="html"><![CDATA[<h5 id="查看项目分析图"><a href="#查看项目分析图" class="headerlink" title="查看项目分析图"></a>查看项目分析图</h5><ul><li><p>webpack-bundle-analyzer<br><img src="/record-blog/2021/02/13/20210108/image-20210108113653639.png" alt="image-20210108113653639"></p><p><img src="/record-blog/2021/02/13/20210108/image-20210108113714529.png" alt="image-20210108113714529"></p></li></ul><h3 id="2-多进程"><a href="#2-多进程" class="headerlink" title="2.多进程"></a>2.多进程</h3><ul><li><strong><code>HappyPack</code></strong></li></ul><p><strong>注：由于HappyPack作者对js的兴趣逐步丢失，所以之后维护将变少，webpack4及之后推荐使用thread-loader</strong></p><p>使用<code>HappyPack</code>优化打包速度，比如我们有多个模块，交给HappyPack,在webpack compiler的run方法之后，进程就会到达<code>HappyPack</code>，<code>HappyPack</code>会做一些初始化，初始化之后会创建一个线程池，线程池会将构建任务里面的模块进行分配，那么一个happyPack的一个线程池会包括多个线程，这时候线程池的这些线程会各自去处理其中的模块以及它的依赖，处理完成之后会有一个通信的过程，会将处理好的资源传输给<code>HappyPack</code>的一个主进程，完成整个的一个构建过程。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">override</span><span class="token punctuation">(</span>  <span class="token function">addWebpackModuleRule</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.jsx$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">//</span>    use<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token comment">// 'babel-loader'</span>      <span class="token string">'happypack/loader'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">alter_config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">alter_config</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  config<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>    <span class="token comment">/* 多线程编译 */</span>    <span class="token keyword">new</span> <span class="token class-name">HappyPack</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      loaders<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'babel-loader'</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span>  <span class="token keyword">return</span> config<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="thread-loader"><a href="#thread-loader" class="headerlink" title="thread-loader"></a><strong><code>thread-loader</code></strong></h3></li></ul><p>原理：与HappyPack类似，每次webpack解析一个模块，thread-loader会将它及它的依赖分配给worker进程中</p><pre class="line-numbers language-none"><code class="language-none">module.exports &#x3D; override( addWebpackModuleRule(&#123;    test: &#x2F;.jsx$&#x2F;, &#x2F;&#x2F; 对所有js后缀的文件进行编译    include: resolve(&#39;src&#39;), &#x2F;&#x2F; 表示在src目录下的.js文件都要进行一下使用的loader    use: [      &#39;babel-loader&#39;,      &#123;        loader: &#39;thread-loader&#39;,        options: &#123;          workers: 3,        &#125;      &#125;    ]  &#125;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="hard-source-webpack-plugin"><a href="#hard-source-webpack-plugin" class="headerlink" title="hard-source-webpack-plugin"></a>hard-source-webpack-plugin</h3><h3 id="抛弃-DLL，选择hard-source-webpack-plugin"><a href="#抛弃-DLL，选择hard-source-webpack-plugin" class="headerlink" title="抛弃 DLL，选择hard-source-webpack-plugin"></a>抛弃 DLL，选择hard-source-webpack-plugin</h3><h3 id="dll的概念-其实是做缓存"><a href="#dll的概念-其实是做缓存" class="headerlink" title="dll的概念: 其实是做缓存"></a>dll的概念: 其实是做缓存</h3><blockquote><p>所谓动态链接，就是把一些经常会共享的代码制作成 DLL 档，当可执行文件调用到 DLL 档内的函数时，Windows 操作系统才会把 DLL 档加载存储器内，DLL 档本身的结构就是可执行档，当程序有需求时函数才进行链接。透过动态链接方式，存储器浪费的情形将可大幅降低。</p></blockquote><p>将dll和缓存进行对比可以发现：</p><table><thead><tr><th>缓存</th><th>DLL</th></tr></thead><tbody><tr><td>把常用的文件存储到内存或硬盘中</td><td>把公共代码打包为dll文件放到硬盘中</td></tr><tr><td>再次打包时，直接取读取缓存</td><td>再次打包时，读取dll文件，不重新打包</td></tr><tr><td>加载时间减少</td><td>打包时间减少</td></tr></tbody></table></li></ul><h3 id="2-并行压缩，移除console-log"><a href="#2-并行压缩，移除console-log" class="headerlink" title="2.并行压缩，移除console.log"></a>2.并行压缩，移除console.log</h3><ul><li><p><strong>terser-webpack-plugin</strong></p><p>但是因为是<strong>webpack4</strong>，所以在运用 <strong>terser-webpack-plugin</strong> 的时候一定要注意版本号，刚开始就是用的5.0.1，要用<code>&quot;terser-webpack-plugin&quot;: &quot;^4.2.3&quot;,</code>版本，否则会报一个 ‘javascript’ 的错误</p></li></ul><pre class="line-numbers language-none"><code class="language-none">config.optimization &#x3D; &#123;    minimize: true,    minimizer: [      new TerserPlugin(&#123;        parallel: 4, &#x2F;&#x2F; 开启并行压缩        terserOptions: &#123;          ecma: undefined,          warnings: false,          parse: &#123;&#125;,          compress: &#123;            drop_console: true,            drop_debugger: false,            pure_funcs: [&#39;console.log&#39;], &#x2F;&#x2F; 移除console          &#125;        &#125;      &#125;)    ] &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-图片压缩"><a href="#3-图片压缩" class="headerlink" title="3.图片压缩"></a>3.图片压缩</h3><ul><li><p>image-webpack-loader</p><p>在这里<code>url-loader </code>和<code> image-webpack-loader</code> 不能一起使用，否则会导致图片出不来</p><p>使用<code>file-loader</code>搭配，一定要先写<code>file-loader</code>才能使用 <code>image-webpack-loader</code></p><p>通过yarn安装<code>image-webpack-loader</code>会导致Error: Cannot find module ‘gifsicle’，使用cnpm安装即可</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">addWebpackModuleRule</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpe?g|gif|svg)(\?.*)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>   use<span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token punctuation">&#123;</span>       loader<span class="token operator">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span>       options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>         name<span class="token operator">:</span> <span class="token string">'[name]_[hash:8].[ext]'</span><span class="token punctuation">,</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token punctuation">&#123;</span>       loader<span class="token operator">:</span> <span class="token string">'image-webpack-loader'</span><span class="token punctuation">,</span>       options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>         mozjpeg<span class="token operator">:</span> <span class="token punctuation">&#123;</span>           progressive<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>           quality<span class="token operator">:</span> <span class="token number">50</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         optipng<span class="token operator">:</span> <span class="token punctuation">&#123;</span>           enabled<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         pngquant<span class="token operator">:</span> <span class="token punctuation">&#123;</span>           quality<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.65</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           speed<span class="token operator">:</span> <span class="token number">4</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         gifsicle<span class="token operator">:</span> <span class="token punctuation">&#123;</span>           interlaced<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         webp<span class="token operator">:</span> <span class="token punctuation">&#123;</span>           quality<span class="token operator">:</span> <span class="token number">100</span>         <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-去掉无用的css"><a href="#4-去掉无用的css" class="headerlink" title="4.去掉无用的css"></a>4.去掉无用的css</h3><p>使用插件<code>purgecss-webpack-plugin</code>，直接使用配置很简单<a href="https://github.com/FullHuman/purgecss-webpack-plugin">文档</a></p><p>如果使用<code>css modules</code>，需要配置白名单<code>whitelistPatterns</code>，</p><p>如果开启<code>css modules</code>，配合<code>babel-plugin-react-css-modules</code>一起使用，需要特别注意css的引入方式是<code>import styles from &quot;./index.module.css&quot;;</code>，而不能省略变量<code>styles</code>。</p><p>如果<code>import &quot;./index.module.css&quot;;</code>这样的话，模块话的<code>css</code>会被忽略。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>       filename<span class="token operator">:</span> <span class="token string">"css/[name].[contenthash:8].css"</span><span class="token punctuation">,</span>       chunkFilename<span class="token operator">:</span> <span class="token string">"css/[name].[contenthash:8].css"</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment">// 放在MiniCssExtractPlugin之后</span>   <span class="token keyword">new</span> <span class="token class-name">PurgecssWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>       <span class="token comment">// collectWhitelistPatternsChildren: () => &#123;</span>       <span class="token comment">//     return [/^purify-/];</span>       <span class="token comment">// &#125;,</span>       <span class="token comment">// whitelist: () => &#123;</span>       <span class="token comment">//     return [/\.module\.(css|scss|sass)$/];</span>       <span class="token comment">// &#125;,</span>       <span class="token function-variable function">whitelistPatterns</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^purify-</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>       <span class="token function-variable function">paths</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>paths<span class="token punctuation">.</span>appSrc<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/**/*</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> nodir<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-代码分割"><a href="#5-代码分割" class="headerlink" title="5.代码分割"></a>5.代码分割</h3><p><code>webpack4</code>废弃了<code>CommonsChunkPlugin</code>插件，使用<code>optimization.splitChunks</code>和<code>optimization.runtimeChunk</code>来代替，原因可以参考<a href="https://www.cnblogs.com/wmhuang/p/8967639.html">《webpack4：连奏中的进化》</a>一文。关于<code>runtimeChunk</code>参数，有的文章说是提取出入口chunk中的runtime部分，形成一个单独的文件，由于这部分不常变化，可以利用缓存。google开发者社区的博文是这样描述的</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">code_slicing</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  config<span class="token punctuation">.</span>devtool <span class="token operator">=</span> <span class="token boolean">false</span>  config<span class="token punctuation">.</span>optimization <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    minimizer<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        parallel<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment">// 开启并行压缩</span>        cache<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        terserOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          ecma<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>          warnings<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          parse<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          compress<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            drop_console<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            drop_debugger<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            pure_funcs<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'console.log'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 移除console</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    splitChunks<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      cacheGroups<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        earth<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          chunks<span class="token operator">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>          priority<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\/]node_modules[\\/]xt-earth[\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>          name<span class="token operator">:</span> <span class="token string">'Earth'</span><span class="token punctuation">,</span>          minSize<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          minChunks<span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        editor<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          chunks<span class="token operator">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>          priority<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\/]node_modules[\\/]monaco-editor[\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>          name<span class="token operator">:</span> <span class="token string">'Editor'</span><span class="token punctuation">,</span>          minSize<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          minChunks<span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        echarts<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          chunks<span class="token operator">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>          priority<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(echarts|echarts-for-react|echarts-gl)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>          name<span class="token operator">:</span> <span class="token string">'Echarts'</span><span class="token punctuation">,</span>          minSize<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          minChunks<span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        babel<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          chunks<span class="token operator">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>          priority<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\/]node_modules[\\/]@babel[\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>          name<span class="token operator">:</span> <span class="token string">'Babel'</span><span class="token punctuation">,</span>          minSize<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          minChunks<span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> config<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-代码压缩"><a href="#6-代码压缩" class="headerlink" title="6.代码压缩"></a>6.代码压缩</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">CompressionWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      filename<span class="token operator">:</span> <span class="token string">'[path].gz[query]'</span><span class="token punctuation">,</span>      algorithm<span class="token operator">:</span> <span class="token string">'gzip'</span><span class="token punctuation">,</span>      test<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'\\.('</span> <span class="token operator">+</span> productionGzipExtensions<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')$'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 匹配文件名</span>      threshold<span class="token operator">:</span> <span class="token number">10240</span><span class="token punctuation">,</span> <span class="token comment">// 对10K以上的数据进行压缩</span>      minRatio<span class="token operator">:</span> <span class="token number">0.8</span><span class="token punctuation">,</span>      deleteOriginalAssets<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 是否删除源文件</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要在nginx配置</p><p><img src="/record-blog/2021/02/13/20210108/165659_c0591fb1_5266997.png" alt="输入图片说明"></p>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年1月5日(egg异常捕获)</title>
      <link href="/record-blog/2021/02/13/20210105/"/>
      <url>/record-blog/2021/02/13/20210105/</url>
      
        <content type="html"><![CDATA[<h5 id="1-try…catch"><a href="#1-try…catch" class="headerlink" title="1.try…catch"></a>1.try…catch</h5><p>Node.js 是一个异步的世界,之前都是callback的形式的异步编程模型，会带来很多问题，在es8的时候发布了async function可以很好的解决回调地狱的问题，可以使用try…catch来捕获异常</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">onerror</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ctx<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'server error'</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> err<span class="token punctuation">.</span>status <span class="token operator">||</span> <span class="token number">500</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-ctx-runInBackground-scope"><a href="#2-ctx-runInBackground-scope" class="headerlink" title="2.ctx.runInBackground(scope)"></a>2.ctx.runInBackground(scope)</h5><p>如果 <code>service.trade.check</code> 方法中代码有问题，导致执行时抛出了异常，尽管框架会在最外层通过 <code>try catch</code> 统一捕获错误，但是由于 <code>setImmediate</code> 中的代码『跳出』了异步链，它里面的错误就无法被捕捉到了。因此在编写类似代码的时候一定要注意。</p><p>框架也考虑到了这类场景，提供了 <code>ctx.runInBackground(scope)</code> 辅助方法，通过它又包装了一个异步链，所有在这个 scope 里面的错误都会统一捕获。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">HomeController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">async</span> <span class="token function">buy</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>service<span class="token punctuation">.</span>trade<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 下单后需要进行一次核对，且不阻塞当前请求</span>    ctx<span class="token punctuation">.</span><span class="token function">runInBackground</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 这里面的异常都会统统被 Backgroud 捕获掉，并打印错误日志</span>      <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>service<span class="token punctuation">.</span>trade<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="为了保证异常可追踪，必须保证所有抛出的异常都是-Error-类型，因为只有-Error-类型才会带上堆栈信息，定位到问题"><a href="#为了保证异常可追踪，必须保证所有抛出的异常都是-Error-类型，因为只有-Error-类型才会带上堆栈信息，定位到问题" class="headerlink" title="为了保证异常可追踪，必须保证所有抛出的异常都是 Error 类型，因为只有 Error 类型才会带上堆栈信息，定位到问题"></a>为了保证异常可追踪，必须保证所有抛出的异常都是 Error 类型，因为只有 Error 类型才会带上堆栈信息，定位到问题</h6><h5 id="3-中间件"><a href="#3-中间件" class="headerlink" title="3.中间件"></a>3.中间件</h5><p>在app文件下创建middleware文件夹，同时创建一个error_handler.js的文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// app/middleware/error_handler.js</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">option<span class="token punctuation">,</span> app</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">errorHandler</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 所有的异常都在 app 上触发一个 error 事件，框架会记录一条错误日志</span>        ctx<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">const</span> status <span class="token operator">=</span> err<span class="token punctuation">.</span>status <span class="token operator">||</span> <span class="token number">500</span><span class="token punctuation">;</span>        <span class="token comment">// 生产环境时 500 错误的详细错误内容不返回给客户端，因为可能包含敏感信息</span>        <span class="token keyword">const</span> error <span class="token operator">=</span> status <span class="token operator">===</span> <span class="token number">500</span> <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">.</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>env <span class="token operator">===</span> <span class="token string">'prod'</span>          <span class="token operator">?</span> <span class="token string">'Internal Server Error'</span>          <span class="token operator">:</span> err<span class="token punctuation">.</span>message<span class="token punctuation">;</span>          <span class="token comment">// 从 error 对象上读出各个属性，设置到响应中</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span> error <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token number">422</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          ctx<span class="token punctuation">.</span>body<span class="token punctuation">.</span>detail <span class="token operator">=</span> err<span class="token punctuation">.</span>errors<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在config.default.js中配置</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">config<span class="token punctuation">.</span>middleware <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'errorHandler'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4-框架层统一异常处理"><a href="#4-框架层统一异常处理" class="headerlink" title="4.框架层统一异常处理"></a>4.框架层统一异常处理</h5><p>框架通过 <a href="https://github.com/eggjs/egg-onerror">onerror</a> 插件提供了统一的错误处理机制。对一个请求的所有处理方法（Middleware、Controller、Service）中抛出的任何异常都会被它捕获，并自动根据请求想要获取的类型返回不同类型的错误（基于 <a href="https://tools.ietf.org/html/rfc7231#section-5.3.2">Content Negotiation</a>）。</p><ul><li><h6 id="errorPageUrl"><a href="#errorPageUrl" class="headerlink" title="errorPageUrl"></a>errorPageUrl</h6><p>在 <code>config/config.default.js</code> 中</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// config/config.default.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  onerror<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 线上页面发生异常时，重定向到这个页面上</span>    errorPageUrl<span class="token operator">:</span> <span class="token string">'/50x.html'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h6 id="自定义统一异常处理"><a href="#自定义统一异常处理" class="headerlink" title="自定义统一异常处理"></a>自定义统一异常处理</h6></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// config/config.default.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  onerror<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">all</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> ctx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 在此处定义针对所有响应类型的错误处理方法</span>      <span class="token comment">// 注意，定义了 config.all 之后，其他错误处理方法不会再生效</span>      ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'error'</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">html</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> ctx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// html hander</span>      ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'&lt;h3>error&lt;/h3>'</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">json</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> ctx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// json hander</span>      ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span> message<span class="token operator">:</span> <span class="token string">'error'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> ctx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 一般来说，不需要特殊针对 jsonp 进行错误定义，jsonp 的错误处理会自动调用 json 错误处理，并包装成 jsonp 的响应格式</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h6 id="自定义-404-响应"><a href="#自定义-404-响应" class="headerlink" title="自定义 404 响应"></a>自定义 404 响应</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// app/middleware/notfound_handler.js</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">notFoundHandler</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">404</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ctx<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>acceptJSON<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span> error<span class="token operator">:</span> <span class="token string">'Not Found'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'&lt;h1>Page Not Found&lt;/h1>'</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在配置中引入中间件：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// config/config.default.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  middleware<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">'notfoundHandler'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> egg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年12月29日(图表)</title>
      <link href="/record-blog/2021/02/13/20201229/"/>
      <url>/record-blog/2021/02/13/20201229/</url>
      
        <content type="html"><![CDATA[<h3 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h3><p>1.进度条</p><p><img src="/20201229/image-20201229204730678.png" alt="image-20201229204730678"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>progress-bar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>progress<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.progress-bar</span> <span class="token punctuation">&#123;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 18 * <span class="token atrule"><span class="token rule">@uh</span><span class="token punctuation">;</span></span>      <span class="token property">margin</span><span class="token punctuation">:</span> 10 * <span class="token atrule"><span class="token rule">@uh</span> 0 0 0<span class="token punctuation">;</span></span>      <span class="token property">background</span><span class="token punctuation">:</span> #073866<span class="token punctuation">;</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token selector">;      .progress</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token selector">;        &amp;::before,        &amp;::after</span> <span class="token punctuation">&#123;</span>          <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>          <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>          <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>          <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>          <span class="token property">height</span><span class="token punctuation">:</span> 11 * <span class="token atrule"><span class="token rule">@uh</span><span class="token punctuation">;</span></span>        <span class="token punctuation">&#125;</span>        <span class="token selector">&amp;::before</span> <span class="token punctuation">&#123;</span>          <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>          <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>90deg<span class="token punctuation">,</span> #0742b9<span class="token punctuation">,</span> #1bdffc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">&amp;::after</span> <span class="token punctuation">&#123;</span>          <span class="token property">z-index</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>          <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>            to right<span class="token punctuation">,</span>            #073866 0%<span class="token punctuation">,</span>            #073866 25%<span class="token punctuation">,</span>            transparent 25%<span class="token punctuation">,</span>            transparent 50%<span class="token punctuation">,</span>            #073866 50%<span class="token punctuation">,</span>            #073866 75%<span class="token punctuation">,</span>            transparent 75%<span class="token punctuation">,</span>            transparent 100%          <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token property">background-size</span><span class="token punctuation">:</span> 20px 12px <span class="token important">!important</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.仪表盘 </p><ul><li>案例1</li></ul><p><img src="/record-blog/2021/02/13/20201229/image-20201229205005301.png" alt="image-20201229205005301"></p><p><img src="/record-blog/2021/02/13/20201229/image-20201229205132660.png" alt="image-20201229205132660"></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- * @Description:仪表盘 * @Autor: wxy * @Date: 2020-12-25 11:48:49 * @LastEditors: wxy * @LastEditTime: 2020-12-25 14:21:07--&gt;&lt;template&gt;  &lt;div&gt;    &lt;div class&#x3D;&quot;gauge-item&quot; ref&#x3D;&quot;chart&quot;&gt;&lt;&#x2F;div&gt;    &lt;img      src&#x3D;&quot;@&#x2F;assets&#x2F;image&#x2F;home&#x2F;gauge-bg.png&quot;      id&#x3D;&quot;bg_img&quot;      style&#x3D;&quot;display: none&quot;    &#x2F;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &#39;Gauge&#39;,  data () &#123;    return &#123;&#125;  &#125;,  mounted () &#123;    this.drawGauge()  &#125;,  computed: &#123;&#125;,  methods: &#123;    &#x2F;**     * @description: 绘制仪表盘     * @author: wxy     *&#x2F;    drawGauge () &#123;      const value &#x3D; 0.8 &#x2F;&#x2F; 值，0~1之间      const startAngle &#x3D; 215 &#x2F;&#x2F; 开始角度      const endAngle &#x3D; -35 &#x2F;&#x2F; 结束角度      const splitCount &#x3D; 20 &#x2F;&#x2F; 刻度数量      const pointerAngle &#x3D; (startAngle - endAngle) * (1 - value) + endAngle &#x2F;&#x2F; 当前指针（值）角度      const myChart &#x3D; this.$echarts.init(this.$refs.chart)      const option &#x3D; &#123;        series: [          &#123;            type: &#39;gauge&#39;,            radius: &#39;95%&#39;,            startAngle: pointerAngle,            endAngle: endAngle,            splitNumber: 1,            axisLine: &#123;              show: false,              lineStyle: &#123;                width: 2,                opacity: 0              &#125;            &#125;,            title: &#123; show: false &#125;,            detail: &#123; show: false &#125;,            splitLine: &#123; show: false &#125;,            axisTick: &#123;              length: 4,              splitNumber: Math.ceil((1 - value) * splitCount),              lineStyle: &#123;                color: &#39;#001242&#39;,                width: 2              &#125;            &#125;,            axisLabel: &#123; show: false &#125;,            pointer: &#123; show: false &#125;,            itemStyle: &#123;&#125;          &#125;,          &#123;            type: &#39;gauge&#39;,            radius: &#39;100%&#39;,            startAngle: startAngle,            endAngle: pointerAngle,            splitNumber: 1,            axisLine: &#123;              show: false,              lineStyle: &#123;                width: 1,                opacity: 0              &#125;            &#125;,            title: &#123; show: false &#125;,            detail: &#123;              formatter: &#39;&#123;value&#125;%&#39;,              textStyle: &#123;                fontWeight: &#39;bolder&#39;,                fontSize: 10,                color: &#39;white&#39;              &#125;,              offsetCenter: [0, 0]            &#125;,            splitLine: &#123; show: false &#125;,            axisTick: &#123;              length: 4,              splitNumber: Math.ceil(value * splitCount),              lineStyle: &#123;                color: &#123;                  image: document.getElementById(&#39;bg_img&#39;), &#x2F;&#x2F; bg_img渐变颜色图片                  repeat: &#39;no-repeat&#39;                &#125;,                width: 2              &#125;            &#125;,            axisLabel: &#123; show: false &#125;,            pointer: &#123; show: false &#125;,            itemStyle: &#123;&#125;,            data: [              &#123;                value: value              &#125;            ]          &#125;        ]      &#125;      myChart.setOption(option)    &#125;  &#125;&#125;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;.gauge-item &#123;  width: 65 * @uw;  height: 65 * @uh;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>案例2</p><p><img src="/record-blog/2021/02/13/20201229/image-20201229205333275.png" alt="image-20201229205343053"></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- * @Description:仪表盘 * @Autor: wxy * @Date: 2020-12-29 19:47:14 * @LastEditors: wxy * @LastEditTime: 2020-12-29 20:15:32--&gt;&lt;template&gt;    &lt;div id&#x3D;&quot;gauge-id&quot; ref&#x3D;&quot;chart&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &#39;Gauge&#39;,  data () &#123;    return &#123;    &#125;  &#125;,  mounted () &#123;    this.drawGauge()  &#125;,  computed: &#123;  &#125;,  methods: &#123;    &#x2F;**     * @description:绘制电机转速     * @author: wxy     *&#x2F;    drawGauge () &#123;      const myChart &#x3D; this.$echarts.init(this.$refs.chart)      const option &#x3D; &#123;        tooltip: &#123;          formatter: &#39;&#123;a&#125; &lt;br&#x2F;&gt;&#123;c&#125; &#123;b&#125;&#39;        &#125;,        series: [          &#123;            name: &#39;速度&#39;,            type: &#39;gauge&#39;,            radius: &#39;70%&#39;,            axisLine: &#123; &#x2F;&#x2F; 坐标轴线              lineStyle: &#123; &#x2F;&#x2F; 属性lineStyle控制线条样式                color: [[0.4, &#39;#BFC9CC&#39;], [0.8, &#39;#1e90ff&#39;], [0.9, &#39;#FEA787&#39;], [1, &#39;#ff4500&#39;]],                width: 2              &#125;            &#125;,            axisLabel: &#123; &#x2F;&#x2F; 坐标轴小标记              fontWeight: &#39;bolder&#39;,              shadowBlur: 10,              fontSize: &#39;12px&#39;,              distance: -26 &#x2F;&#x2F; 值设置在外环            &#125;,            axisTick: &#123; &#x2F;&#x2F; 坐标轴小标记              length: 5, &#x2F;&#x2F; 属性length控制线长              lineStyle: &#123; &#x2F;&#x2F; 属性lineStyle控制线条样式                color: &#39;auto&#39;,                shadowColor: &#39;#fff&#39;, &#x2F;&#x2F; 默认透明                shadowBlur: 2              &#125;            &#125;,            splitLine: &#123; &#x2F;&#x2F; 分隔线              length: 8, &#x2F;&#x2F; 属性length控制线长              lineStyle: &#123; &#x2F;&#x2F; 属性lineStyle（详见lineStyle）控制线条样式                width: 2,                color: &#39;#fff&#39;,                shadowColor: &#39;#fff&#39;, &#x2F;&#x2F; 默认透明                shadowBlur: 2              &#125;            &#125;,            pointer: &#123;              width: 3, &#x2F;&#x2F; 分隔线              shadowColor: &#39;#fff&#39;, &#x2F;&#x2F; 默认透明              shadowBlur: 5            &#125;,            detail: &#123;              formatter: &#39;&#123;value&#125;&#39;,              offsetCenter: [0, &#39;100%&#39;],              textStyle: &#123;                color: &#39;auto&#39;,                fontSize: &#39;18&#39;              &#125;            &#125;,            data: [&#123; value: 40 &#125;]          &#125;        ]      &#125;      myChart.setOption(option)    &#125;  &#125;&#125;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;#gauge-id&#123;  width: 100%;  height: 150*@uh;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>3.散点图</p><p><img src="/record-blog/2021/02/13/20201229/image-20201229205202324.png" alt="image-20201229205202324"></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- * @Description:散点图 * @Autor: wxy * @Date: 2020-12-28 19:55:54 * @LastEditors: wxy * @LastEditTime: 2020-12-28 20:45:41--&gt;&lt;template&gt;    &lt;div&gt;      &lt;div id&#x3D;&quot;testing-apparatus-id&quot; ref&#x3D;&quot;chart&quot;&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &#39;&#39;,  props: &#123;    colorArr: &#123;      type: String,      default: &#39;#E37FF2&#39;    &#125;  &#125;,  data () &#123;    return &#123;    &#125;  &#125;,  mounted () &#123;    this.drawScatter(this.colorArr)  &#125;,  computed: &#123;  &#125;,  methods: &#123;    &#x2F;**     * @description: 绘制散点图     * @author: wxy     *&#x2F;    drawScatter (colorArr) &#123;      const myChart &#x3D; this.$echarts.init(this.$refs.chart)      const data &#x3D; [[286, 77, 170, &#39;Australia&#39;, 1990], [33, 77.4, 240, &#39;Canada&#39;, 190], [151, 68, 113, &#39;China&#39;, 1990], [13670, 74.7, 10582082, &#39;Cuba&#39;, 1990], [28599, 75, 4986705, &#39;Finland&#39;, 1990], [29476, 77.1, 56943299, &#39;France&#39;, 1990], [314, 75.4, 789, &#39;Germany&#39;, 1990], [28, 78.1, 230, &#39;Iceland&#39;, 1990], [177, 57.7, 8601776, &#39;India&#39;, 1990], [29550, 79.1, 122249285, &#39;Japan&#39;, 1990], [2076, 67.9, 20194354, &#39;North Korea&#39;, 1990], [12087, 72, 42972254, &#39;South Korea&#39;, 1990], [24021, 75.4, 3397534, &#39;New Zealand&#39;, 1990], [43296, 76.8, 4240375, &#39;Norway&#39;, 1990], [10088, 70.8, 38195258, &#39;Poland&#39;, 1990], [19349, 69.6, 147568552, &#39;Russia&#39;, 1990], [10670, 67.3, 53994605, &#39;Turkey&#39;, 1990], [26424, 75.7, 57110117, &#39;United Kingdom&#39;, 1990], [37062, 75.4, 252847810, &#39;United States&#39;, 1990]]      const option &#x3D; &#123;        grid: &#123;          left: &#39;0%&#39;,          right: &#39;0%&#39;,          bottom: &#39;10%&#39;,          top: &#39;20%&#39;,          containLabel: true        &#125;,        tooltip: &#123;          axisPointer: &#123;            type: &#39;none&#39;          &#125;        &#125;,        xAxis: &#123;          axisLabel: &#123;            show: false,            color: &#39;rgba(216, 233, 255, 0.6)&#39;,            fontSize: 14 &#x2F;&#x2F; 更改坐标轴文字大小          &#125;,          splitLine: &#123;            show: false          &#125;,          axisTick: &#123;            show: false &#x2F;&#x2F; 不显示坐标轴刻度          &#125;,          axisLine: &#123;            lineStyle: &#123;              color: &#39;#162A4D&#39;            &#125;          &#125;        &#125;,        yAxis: &#123;          name: &#39;单位&#39;,          nameTextStyle: &#123;            color: &#39;rgba(216, 233, 255, 0.6)&#39;          &#125;,          axisLabel: &#123;            color: &#39;rgba(216, 233, 255, 0.6)&#39;,            fontSize: 14 &#x2F;&#x2F; 更改坐标轴文字大小          &#125;,          axisTick: &#123;            show: false &#x2F;&#x2F; 不显示坐标轴刻度          &#125;,          splitLine: &#123;            show: true,            lineStyle: &#123;              color: [&#39;#162A4D&#39;],              width: 1,              type: &#39;solid&#39;            &#125;          &#125;,          axisLine: &#123;            lineStyle: &#123;              color: &#39;#162A4D&#39;            &#125;          &#125;        &#125;,        series: [          &#123;            symbolSize: 20,            data: data,            itemStyle: &#123;              normal: &#123;                color: colorArr              &#125;            &#125;,            type: &#39;scatter&#39;          &#125;        ]      &#125;      myChart.setOption(option)    &#125;  &#125;&#125;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;  #testing-apparatus-id &#123;    width: 440 * @uw;    height: 200 * @uh;  &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年12月21日(搭建博客(hexo))</title>
      <link href="/record-blog/2021/02/13/20201221/"/>
      <url>/record-blog/2021/02/13/20201221/</url>
      
        <content type="html"><![CDATA[<h3 id="搭建博客-hexo"><a href="#搭建博客-hexo" class="headerlink" title="搭建博客(hexo)"></a>搭建博客(hexo)</h3><p><a href="https://rookiewxy.github.io/record-blog/">博客</a>展示,目前还没有把内容放上去</p><p><img src="/record-blog/2021/02/13/20201221/image-20201221184538302.png" alt="image-20201221184538302"></p><p>1.在github创建自己的仓库</p><p><img src="/record-blog/2021/02/13/20201221/image-20201221184701929.png" alt="image-20201221184701929"></p><p>2.使用hexo，还有很多搭建博客的方法，比如vuepress等等,在地址栏输入cmd，进入clone文件夹</p><p><img src="/record-blog/2021/02/13/20201221/image-20201221185007623.png" alt="image-20201221185007623"></p><p>输入命令</p><pre class="line-numbers language-none"><code class="language-none">hexo init record-blogcd record-bloghexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>默认打开是4040，可以通过命令更改,如果报not found index.html的错误，导致打开是空白页面，看看是不是自己的主题下载的有问题，或者是配置原因多半是这个原因</p><pre class="line-numbers language-none"><code class="language-none">hexo server -p 8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认的主题是landspace虽然比较朴素，但是人家是经典</p><p>3.进入主题官网，选择喜欢的<a href="https://hexo.io/themes/">主题</a></p><p>我选择的是<code>hexo-theme-matery</code>主题</p><p>接下来更改配置</p><p><img src="/record-blog/2021/02/13/20201221/image-20201221185447636.png" alt="image-20201221185447636"></p><p><img src="/record-blog/2021/02/13/20201221/image-20201221185455982.png" alt="image-20201221185455982"></p><p>deploy的repo写上自己的仓库地址</p><p>在创建仓库上添加一个分支gh-pages</p><p><img src="/record-blog/2021/02/13/20201221/image-20201221185644926.png" alt="image-20201221185644926"></p><p>点击设置</p><p><img src="/record-blog/2021/02/13/20201221/image-20201221185715807.png" alt="image-20201221185715807"></p><p>更改为gh-pages，如果你的仓库设置了私有，是没有这个选项的</p><p>4.主题下载好之后</p><pre class="line-numbers language-none"><code class="language-none">hexo clean &amp;&amp; hexo genratehexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在提交到github上面的仓库，每次更改完配置之后执行</p><pre class="line-numbers language-none"><code class="language-none">hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.可以使用travis ci进行自动化部署，配置麻烦就不写了，<code>github</code> 提供的免费网页空间，可以用来存放你的静态网页文件，通过 <code>https://用户名.github.io/项目名/</code> 的方式来访问</p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年12月15日（杂七杂八）</title>
      <link href="/record-blog/2021/02/13/20201215/"/>
      <url>/record-blog/2021/02/13/20201215/</url>
      
        <content type="html"><![CDATA[<h3 id="2020年12月15日（杂七杂八）"><a href="#2020年12月15日（杂七杂八）" class="headerlink" title="2020年12月15日（杂七杂八）"></a>2020年12月15日（杂七杂八）</h3><h4 id="一-vue-seamless-scroll"><a href="#一-vue-seamless-scroll" class="headerlink" title="一.vue-seamless-scroll"></a>一.vue-seamless-scroll</h4><p>因为项目中列表滚动的工能，于是使用了<code>vue-seamless-scroll</code>插件，但是我觉得感官上面并不好，速度变慢了之后会有卡顿的情况，而且很明显，最主要的是绑定事件之后只会绑定初始数据，比如我的初始数据只有六条，那么我的点击事件只会在这六条上面起作用，大致感觉问题是由于重复渲染，相同的部分绑定的事件不能同时运行</p><p><img src="/record-blog/2021/02/13/20201215/image-20201215145427582.png" alt="image-20201215145427582"></p><p>可以使用事件委托，事件委托依靠的就是事件冒泡和事件捕获的机制</p><p><a href="https://juejin.cn/post/6844903661647167495">事件委托</a></p><p>可以在最外层绑定点击事件，然后使用自定义属性获取</p><p><img src="/record-blog/2021/02/13/20201215/image-20201215145711899.png" alt="image-20201215145711899"></p><p><img src="/record-blog/2021/02/13/20201215/image-20201215145818448.png" alt="image-20201215145818448"></p><p>在只有两条数据或者数量不多的时候不会滚动<br>设置limitMoveNum即可</p><h4 id="二-github"><a href="#二-github" class="headerlink" title="二.github"></a>二.github</h4><p><img src="/record-blog/2021/02/13/20201215/image-20201215150147401.png" alt="image-20201215150147401"></p><p>点击explore,出现下面的几个板块</p><p>1.Explore会根据你的爱好跟你推荐一些开源项目</p><p>2.Topic 会对一些领域进行划分，比如</p><p><img src="/record-blog/2021/02/13/20201215/image-20201215150403627.png" alt="image-20201215150403627"></p><p>3.Trending github会将当天的start较高的项目推荐出来</p><p><strong>高效的在github上找到自己想要的开源项目</strong></p><p>例如：</p><p><img src="/record-blog/2021/02/13/20201215/image-20201215150934966.png" alt="image-20201215150934966"></p><p>1.只想查找仓库名称包含XX的仓库。语法：</p><p>　　 in:name 关键词</p><p>2.查找描述的内容</p><p>　　in:descripton 关键词</p><p>3.查README文件包含特定关键词</p><p>　　in:readme 关键词</p><p>二、明确搜索 star、fork 数大于多少的</p><ol><li>star 数大于 1000 的XX 仓库</li></ol><p>　　stars: &gt; 数字 关键字</p><p>2.star 数在某个区间 的XX 仓库</p><p>　　stars: 10..20 关键词</p><h4 id="三-个人常用的插件"><a href="#三-个人常用的插件" class="headerlink" title="三.个人常用的插件"></a>三.个人常用的插件</h4><p>1.Color Highlight   </p><p>颜色高亮</p><p>2.koroFileHeader</p><p>这个真的巨好用呀，自动生成注释，就不用手动来写格式了，还可以生成各种各样的图案，不过咱也不整那些花里胡哨的东西</p><p>头部注释</p><p>快捷键：window：ctrl+alt+i,mac：ctrl+cmd+i, linux: ctrl+meta+i</p><p>在光标处添加函数注释</p><p>window：ctrl+alt+t,mac：ctrl+cmd+t,linux: ctrl+meta+t</p><p>3.Image preview</p><p>在引入图片的时候不知道自己路径是否正确，这个插件可以看到图片</p><p><img src="/record-blog/2021/02/13/20201215/1.png" alt="输入图片说明"></p><p>4.Auto Import自动导入</p><p>例如我写mapState时就会自动导入vuex</p><p>5.ES7 React/Redux/GraphQL/React-Native snippets</p><p>可以简写哦</p><p><img src="/record-blog/2021/02/13/20201215/2.png" alt="输入图片说明"></p><p>6.Import Cost</p><p>可以看见你导入包的大小</p><p><img src="/record-blog/2021/02/13/20201215/3.png" alt="输入图片说明"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年11月30日(antd-design-vue)</title>
      <link href="/record-blog/2021/02/13/20201130/"/>
      <url>/record-blog/2021/02/13/20201130/</url>
      
        <content type="html"><![CDATA[<h3 id="2020年11月30日-antd-design-vue"><a href="#2020年11月30日-antd-design-vue" class="headerlink" title="2020年11月30日(antd-design-vue)"></a>2020年11月30日(antd-design-vue)</h3><p>1.关于<code>antd-design</code>中from的踩坑</p><p><img src="/record-blog/2021/02/13/20201130/image-20201130195333715.png" alt="image-20201130195333715"></p><p>我使用的是from表单里面的input，在提交表单时，通过name来获取值，但输入内容之后，清空，发现在调用提交方法时，这个name还是会有一个字符，可是输入框内什么内容都没有了呀，比如当我输入1111之后，我请清空了，打印出来的name是1,很少疑惑，上网百度之后也没发现为什么，可以看到这个表单是放在一个背景为黑色的div里，这个是我封装的一个组件，因为有很多地方要用到这样的背景,所以封装了一个组件</p><p><img src="/record-blog/2021/02/13/20201130/image-20201130195739926.png" alt="image-20201130195739926"></p><p>代码如下:</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;outerbox&quot; :style&#x3D;&quot;&#123;width, height, padding, transition&#125;&quot;&gt;    &lt;slot name&#x3D;&quot;title&quot;&#x2F;&gt;    &lt;slot name&#x3D;&quot;content&quot;&#x2F;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &#39;HeritageContainer&#39;,  data () &#123;    return &#123;&#125;  &#125;,  props: &#123;    width: &#123;       type: String,       default: &#39;400px&#39;    &#125;,    transition: &#123;      type: String,      default: &#39;all 0.3s&#39;    &#125;,    height: &#123;      type: String,      default: &#39;650px&#39;    &#125;,    padding: &#123;      type: String,      default: &#39;10px 14px&#39;    &#125;  &#125;&#125;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;.outerbox&#123;  background: rgba(0,0,0,0.6);  border-radius: 12px;  box-sizing: border-box;  overflow: hidden;    h2, h3&#123;      color: #ffffff;      font-size: 18px;    &#125;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我之前的代码是把from放在<code>HeritageContainer</code>这个组件里，后来发现问题就在这个组件上，当我把from代码移出来之后，就好了，莫名其妙:bust_in_silhouette:,现在当我清空之后就没有值了是个空字符串，提交也不会有什么问题，可是我现在要做一个历史记录的功能</p><p><img src="/record-blog/2021/02/13/20201130/image-20201130200656241.png" alt="image-20201130200656241"></p><p>当我点击其中的一项，对应的内容放在对于的输入框里，那就要用到v-model了，好家伙，用了v-model，之后placeholder不显示了，设置为’’，null都不显示，最后改为undefined就显示了，而且他们的placeholder样式还不一样Cascader ，input，select,查看placeholder的样式</p><p><img src="/record-blog/2021/02/13/20201130/image-20201130201028000.png" alt="image-20201130201028000"></p><p><img src="/record-blog/2021/02/13/20201130/image-20201130201051188.png" alt="image-20201130201051188"></p><p>好了，就可以看placeholder的样式了</p><p>对于vue-amap的搜索，真的难用呀，当输入框没有内容时，提示框居然还在，他也没有别的事件，封装的一个组件，本来想通过ref来获取value，压根获取不了</p><p><img src="/record-blog/2021/02/13/20201130/image-20201130201159939.png" alt="image-20201130201159939"></p><p>2.表格合并</p><p>根据不同的数据，对应生成不同的表格格式，antd的table就提供了一个方法，element也是<img src="/record-blog/2021/02/13/20201130/image-20201130201604405.png" alt="image-20201130201604405"></p><p>提供了一个customRender方法，在封装一个mergeCells方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">mergeCells</span> <span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 上一行该列数据是否一样</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> text <span class="token operator">===</span> data<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> rowSpan <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment">// 判断下一行是否相等</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">!==</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">break</span>      <span class="token punctuation">&#125;</span>      rowSpan<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> rowSpan<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.v-show和v-if</p><p>都知道v-show就是普通的显示和隐藏，但是v-if是重新创建和生成，但是有时候写着写着就没有注意那么多，多人开发的时候更不用说了，</p><p><img src="/record-blog/2021/02/13/20201130/image-20201130201940821.png" alt="image-20201130201940821"></p><p>这是同事加的判断，是一个更加滑动鼠标，使地图缩放，根据缩放的距离显示隐藏对应的组件，这个base-box之前是v-if，当我缩放到一定的距离，这个组件就销毁了，所以当我监听他里面的属性时，咋就没反应？？？还以为是我的vuex写的有问题，检查了好久,唉！vue和redux都是基于flux的思想、模式</p><p>4.transtion</p><p>有时候的折叠效果，如果直接设置width或者其他的属性就会很单调，加上一个transtion就会好很多，因为有一个元素的height不确定，我就想用auto，折叠的时候就是0,结果没效果，后来发现设置具体值就可以,也可以使用可以使用 max-height 进行 hack</p><p>5.vite</p><p>虽然没有用到项目中，但是今天用vite创建了一个小demo，瞬间觉得webpack又丑又重，但是vite现在还是beta，说的是不久之后就会有正式版，估计还是会要一段事件的，太新的东西，也不敢在项目当中顺便瞎用呀:smiley:</p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年11月07日(react项目配置)</title>
      <link href="/record-blog/2021/02/13/20201107/"/>
      <url>/record-blog/2021/02/13/20201107/</url>
      
        <content type="html"><![CDATA[<h3 id="react项目配置"><a href="#react项目配置" class="headerlink" title="react项目配置"></a>react项目配置</h3><p>之前分环境打包部署在package.json里配置，都没有问题，今天部署的时候居然发现没生效，然后直接用他的内置环境变量获取</p><p>之前：</p><p><img src="/record-blog/2021/02/13/20201107/image-20201107202037083.png" alt="image-20201107202037083"></p><p><img src="/record-blog/2021/02/13/20201107/image-20201107202157354.png" alt="image-20201107202157354"></p><p>之后：</p><p><img src="/record-blog/2021/02/13/20201107/image-20201107202219409.png" alt="image-20201107202219409"></p><p><img src="/record-blog/2021/02/13/20201107/image-20201107202231155.png" alt="image-20201107202231155"></p><p>但是发现好多人都会用到cross-env，那他的优点是什么？<br>不同平台使用唯一指令，无需担心跨平台问题</p><p>部署之后，发现我没点击一个页面都要加载很久，打包之后的请求的一个js有二十几M,于是做了代码分割，也可以压缩</p><p>我是用的是react-app-rewired，于是在config-overrides.js里配置</p><p><img src="/record-blog/2021/02/13/20201107/image-20201107202652467.png" alt="image-20201107202652467"></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">const code_slicing &#x3D; () &#x3D;&gt; (config) &#x3D;&gt; &#123;  config.devtool &#x3D; false  config.optimization &#x3D; &#123;    splitChunks: &#123;      cacheGroups: &#123;        earth: &#123;          chunks: &#39;all&#39;,          priority: 1,          test: &#x2F;[\\&#x2F;]node_modules[\\&#x2F;]xt-earth[\\&#x2F;]&#x2F;,          name: &#39;Earth&#39;,          minSize: 0,          minChunks: 1        &#125;,        editor: &#123;          chunks: &#39;all&#39;,          priority: 1,          test: &#x2F;[\\&#x2F;]node_modules[\\&#x2F;]monaco-editor[\\&#x2F;]&#x2F;,          name: &#39;Editor&#39;,          minSize: 0,          minChunks: 1        &#125;,        echarts: &#123;          chunks: &#39;all&#39;,          priority: 1,          test: &#x2F;(echarts|echarts-for-react|echarts-gl)&#x2F;,          name: &#39;Echarts&#39;,          minSize: 0,          minChunks: 1        &#125;,        babel: &#123;          chunks: &#39;all&#39;,          priority: 1,          test: &#x2F;[\\&#x2F;]node_modules[\\&#x2F;]@babel[\\&#x2F;]&#x2F;,          name: &#39;Babel&#39;,          minSize: 0,          minChunks: 1        &#125;      &#125;    &#125;  &#125;  return config&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年11月06日(XSS CSRF)</title>
      <link href="/record-blog/2021/02/13/20201106/"/>
      <url>/record-blog/2021/02/13/20201106/</url>
      
        <content type="html"><![CDATA[<h3 id="XSS-CSRF"><a href="#XSS-CSRF" class="headerlink" title="XSS CSRF"></a>XSS CSRF</h3><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>XSS，即 Cross Site Script，中译是跨站脚本攻击；其原本缩写是 CSS，但为了和层叠样式表(Cascading Style Sheet)有所区分，因而在安全领域叫做 XSS。</p><p>XSS 攻击是指攻击者在网站上注入恶意的客户端代码，通过恶意脚本对客户端网页进行篡改，从而在用户浏览网页时，对用户浏览器进行控制或者获取用户隐私数据的一种攻击方式。</p><p>攻击者对客户端网页注入的恶意脚本一般包括 JavaScript，有时也会包含 HTML 和 Flash。有很多种方式进行 XSS 攻击，但它们的共同点为：将一些隐私数据像 cookie、session 发送给攻击者，将受害者重定向到一个由攻击者控制的网站，在受害者的机器上进行一些恶意操作。</p><p>XSS攻击可以分为3类：反射型（非持久型）、存储型（持久型）、基于DOM。</p><h4 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h4><p>反射型 XSS 只是简单地把用户输入的数据 “反射” 给浏览器，这种攻击方式往往需要攻击者诱使用户点击一个恶意链接，或者提交一个表单，或者进入一个恶意网站时，注入脚本进入被攻击者的网站。</p><p>看一个示例。我先准备一个如下的静态页：</p><p><a href="https://user-images.githubusercontent.com/7871813/42720000-30a9b93a-8752-11e8-879b-edd8519f4e3e.png"><img src="https://user-images.githubusercontent.com/7871813/42720000-30a9b93a-8752-11e8-879b-edd8519f4e3e.png" alt="反射型xss1"></a></p><p>恶意链接的地址指向了 <code>localhost:8001/?q=111&amp;p=222</code>。然后，我再启一个简单的 Node 服务处理恶意链接的请求：</p><pre class="line-numbers language-none"><code class="language-none">const http &#x3D; require(&#39;http&#39;);function handleReequest(req, res) &#123;    res.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);    res.writeHead(200, &#123;&#39;Content-Type&#39;: &#39;text&#x2F;html; charset&#x3D;UTF-8&#39;&#125;);    res.write(&#39;&lt;script&gt;alert(&quot;反射型 XSS 攻击&quot;)&lt;&#x2F;script&gt;&#39;);    res.end();&#125;const server &#x3D; new http.Server();server.listen(8001, &#39;127.0.0.1&#39;);server.on(&#39;request&#39;, handleReequest);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当用户点击恶意链接时，页面跳转到攻击者预先准备的页面，会发现在攻击者的页面执行了 js 脚本：</p><p><a href="https://user-images.githubusercontent.com/7871813/42720046-ee5a3f40-8752-11e8-8cc5-8b464414864a.png"><img src="https://user-images.githubusercontent.com/7871813/42720046-ee5a3f40-8752-11e8-8cc5-8b464414864a.png" alt="执行脚本"></a></p><p>这样就产生了反射型 XSS 攻击。攻击者可以注入任意的恶意脚本进行攻击，可能注入恶作剧脚本，或者注入能获取用户隐私数据(如cookie)的脚本，这取决于攻击者的目的。</p><h4 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h4><p>存储型 XSS 会把用户输入的数据 “存储” 在服务器端，当浏览器请求数据时，脚本从服务器上传回并执行。这种 XSS 攻击具有很强的稳定性。</p><p>比较常见的一个场景是攻击者在社区或论坛上写下一篇包含恶意 JavaScript 代码的文章或评论，文章或评论发表后，所有访问该文章或评论的用户，都会在他们的浏览器中执行这段恶意的 JavaScript 代码。</p><p>举一个示例。</p><p>先准备一个输入页面：</p><pre class="line-numbers language-none"><code class="language-none">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;input&quot;&gt;&lt;button id&#x3D;&quot;btn&quot;&gt;Submit&lt;&#x2F;button&gt;   &lt;script&gt;    const input &#x3D; document.getElementById(&#39;input&#39;);    const btn &#x3D; document.getElementById(&#39;btn&#39;);    let val;         input.addEventListener(&#39;change&#39;, (e) &#x3D;&gt; &#123;        val &#x3D; e.target.value;    &#125;, false);    btn.addEventListener(&#39;click&#39;, (e) &#x3D;&gt; &#123;        fetch(&#39;http:&#x2F;&#x2F;localhost:8001&#x2F;save&#39;, &#123;            method: &#39;POST&#39;,            body: val        &#125;);    &#125;, false);&lt;&#x2F;script&gt;     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动一个 Node 服务监听 <code>save</code> 请求。为了简化，用一个变量来保存用户的输入：</p><pre class="line-numbers language-none"><code class="language-none">const http &#x3D; require(&#39;http&#39;);let userInput &#x3D; &#39;&#39;;function handleReequest(req, res) &#123;    const method &#x3D; req.method;    res.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);    res.setHeader(&#39;Access-Control-Allow-Headers&#39;, &#39;Content-Type&#39;)        if (method &#x3D;&#x3D;&#x3D; &#39;POST&#39; &amp;&amp; req.url &#x3D;&#x3D;&#x3D; &#39;&#x2F;save&#39;) &#123;        let body &#x3D; &#39;&#39;;        req.on(&#39;data&#39;, chunk &#x3D;&gt; &#123;            body +&#x3D; chunk;        &#125;);        req.on(&#39;end&#39;, () &#x3D;&gt; &#123;            if (body) &#123;                userInput &#x3D; body;            &#125;            res.end();        &#125;);    &#125; else &#123;        res.writeHead(200, &#123;&#39;Content-Type&#39;: &#39;text&#x2F;html; charset&#x3D;UTF-8&#39;&#125;);        res.write(userInput);        res.end();    &#125;&#125;const server &#x3D; new http.Server();server.listen(8001, &#39;127.0.0.1&#39;);server.on(&#39;request&#39;, handleReequest);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当用户点击提交按钮将输入信息提交到服务端时，服务端通过 <code>userInput</code> 变量保存了输入内容。当用户通过 <code>http://localhost:8001/$&#123;id&#125;</code> 访问时，服务端会返回与 <code>id</code> 对应的内容(本示例简化了处理)。如果用户输入了恶意脚本内容，则其他用户访问该内容时，恶意脚本就会在浏览器端执行：</p><p><a href="https://user-images.githubusercontent.com/7871813/42720476-eb71a5c8-8759-11e8-8763-eb08b3480201.gif"><img src="https://user-images.githubusercontent.com/7871813/42720476-eb71a5c8-8759-11e8-8763-eb08b3480201.gif" alt="存储型xss"></a></p><h4 id="基于DOM"><a href="#基于DOM" class="headerlink" title="基于DOM"></a>基于DOM</h4><p>基于 DOM 的 XSS 攻击是指通过恶意脚本修改页面的 DOM 结构，是纯粹发生在客户端的攻击。</p><p>看如下代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;h2&gt;XSS: &lt;&#x2F;h2&gt;&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;input&quot;&gt;&lt;button id&#x3D;&quot;btn&quot;&gt;Submit&lt;&#x2F;button&gt;&lt;div id&#x3D;&quot;div&quot;&gt;&lt;&#x2F;div&gt;&lt;script&gt;    const input &#x3D; document.getElementById(&#39;input&#39;);    const btn &#x3D; document.getElementById(&#39;btn&#39;);    const div &#x3D; document.getElementById(&#39;div&#39;);    let val;         input.addEventListener(&#39;change&#39;, (e) &#x3D;&gt; &#123;        val &#x3D; e.target.value;    &#125;, false);    btn.addEventListener(&#39;click&#39;, () &#x3D;&gt; &#123;        div.innerHTML &#x3D; &#96;&lt;a href&#x3D;$&#123;val&#125;&gt;testLink&lt;&#x2F;a&gt;&#96;    &#125;, false);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击 <code>Submit</code> 按钮后，会在当前页面插入一个链接，其地址为用户的输入内容。如果用户在输入时构造了如下内容：</p><pre class="line-numbers language-none"><code class="language-none">&#39;&#39; onclick&#x3D;alert(&#x2F;xss&#x2F;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用户提交之后，页面代码就变成了：</p><pre class="line-numbers language-none"><code class="language-none">&lt;a href onlick&#x3D;&quot;alert(&#x2F;xss&#x2F;)&quot;&gt;testLink&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时，用户点击生成的链接，就会执行对应的脚本：</p><p><a href="https://user-images.githubusercontent.com/7871813/42721109-cb7ce572-8766-11e8-96d9-9ada8a787827.gif"><img src="https://user-images.githubusercontent.com/7871813/42721109-cb7ce572-8766-11e8-96d9-9ada8a787827.gif" alt="dom-xss"></a></p><h3 id="XSS-攻击的防范"><a href="#XSS-攻击的防范" class="headerlink" title="XSS 攻击的防范"></a>XSS 攻击的防范</h3><p>现在主流的浏览器内置了防范 XSS 的措施，例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP">CSP</a>。但对于开发者来说，也应该寻找可靠的解决方案来防止 XSS 攻击。</p><h4 id="HttpOnly-防止劫取-Cookie"><a href="#HttpOnly-防止劫取-Cookie" class="headerlink" title="HttpOnly 防止劫取 Cookie"></a>HttpOnly 防止劫取 Cookie</h4><p>HttpOnly 最早由微软提出，至今已经成为一个标准。浏览器将禁止页面的Javascript 访问带有 HttpOnly 属性的Cookie。</p><p>上文有说到，攻击者可以通过注入恶意脚本获取用户的 Cookie 信息。通常 Cookie 中都包含了用户的登录凭证信息，攻击者在获取到 Cookie 之后，则可以发起 Cookie 劫持攻击。所以，严格来说，HttpOnly 并非阻止 XSS 攻击，而是能阻止 XSS 攻击后的 Cookie 劫持攻击。</p><h4 id="输入检查"><a href="#输入检查" class="headerlink" title="输入检查"></a>输入检查</h4><p><strong>不要相信用户的任何输入。</strong> 对于用户的任何输入要进行检查、过滤和转义。建立可信任的字符和 HTML 标签白名单，对于不在白名单之列的字符或者标签进行过滤或编码。</p><p>在 XSS 防御中，输入检查一般是检查用户输入的数据中是否包含 <code>&lt;</code>，<code>&gt;</code> 等特殊字符，如果存在，则对特殊字符进行过滤或编码，这种方式也称为 XSS Filter。</p><p>而在一些前端框架中，都会有一份 <code>decodingMap</code>， 用于对用户输入所包含的特殊字符或标签进行编码或过滤，如 <code>&lt;</code>，<code>&gt;</code>，<code>script</code>，防止 XSS 攻击：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; vuejs 中的 decodingMap&#x2F;&#x2F; 在 vuejs 中，如果输入带 script 标签的内容，会直接过滤掉const decodingMap &#x3D; &#123;  &#39;&lt;&#39;: &#39;&lt;&#39;,  &#39;&gt;&#39;: &#39;&gt;&#39;,  &#39;&quot;&#39;: &#39;&quot;&#39;,  &#39;&amp;&#39;: &#39;&amp;&#39;,  &#39;&amp;#10;&#39;: &#39;\n&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出检查"><a href="#输出检查" class="headerlink" title="输出检查"></a>输出检查</h4><p>用户的输入会存在问题，服务端的输出也会存在问题。一般来说，除富文本的输出外，在变量输出到 HTML 页面时，可以使用编码或转义的方式来防御 XSS 攻击。例如利用 <a href="https://github.com/punkave/sanitize-html">sanitize-html</a> 对输出内容进行有规则的过滤之后再输出到页面中。</p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>CSRF，即 Cross Site Request Forgery，中译是跨站请求伪造，是一种劫持受信任用户向服务器发送非预期请求的攻击方式。</p><p>通常情况下，CSRF 攻击是攻击者借助受害者的 Cookie 骗取服务器的信任，可以在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击服务器，从而在并未授权的情况下执行在权限保护之下的操作。</p><p>在举例子之前，先说说浏览器的 Cookie 策略。</p><h3 id="浏览器的-Cookie-策略"><a href="#浏览器的-Cookie-策略" class="headerlink" title="浏览器的 Cookie 策略"></a>浏览器的 Cookie 策略</h3><p>Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。Cookie 主要用于以下三个方面：</p><ul><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>个性化设置（如用户自定义设置、主题等）</li></ul><p>而浏览器所持有的 Cookie 分为两种：</p><ul><li>Session Cookie(会话期 Cookie)：会话期 Cookie 是最简单的Cookie，它不需要指定过期时间（Expires）或者有效期（Max-Age），它仅在会话期内有效，浏览器关闭之后它会被自动删除。</li><li>Permanent Cookie(持久性 Cookie)：与会话期 Cookie 不同的是，持久性 Cookie 可以指定一个特定的过期时间（Expires）或有效期（Max-Age）。</li></ul><pre class="line-numbers language-none"><code class="language-none">res.setHeader(&#39;Set-Cookie&#39;, [&#39;mycookie&#x3D;222&#39;, &#39;test&#x3D;3333; expires&#x3D;Sat, 21 Jul 2018 00:00:00 GMT;&#39;]);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述代码创建了两个 Cookie：<code>mycookie</code> 和 <code>test</code>，前者属于会话期 Cookie，后者则属于持久性 Cookie。当我们去查看 Cookie 相关的属性时，不同的浏览器对会话期 Cookie 的 <code>Expires</code> 属性值会不一样：</p><p>Firefox：</p><p><a href="https://user-images.githubusercontent.com/7871813/42733717-fe5c16fe-8868-11e8-979b-37aaf8311375.png"><img src="https://user-images.githubusercontent.com/7871813/42733717-fe5c16fe-8868-11e8-979b-37aaf8311375.png" alt="firefox cookie"></a></p><p>Chrome:</p><p><a href="https://user-images.githubusercontent.com/7871813/42733724-1e22c6ae-8869-11e8-9f84-0fbc2d2fdeb7.png"><img src="https://user-images.githubusercontent.com/7871813/42733724-1e22c6ae-8869-11e8-9f84-0fbc2d2fdeb7.png" alt="chrome cookie"></a></p><p>此外，每个 Cookie 都会有与之关联的域，这个域的范围一般通过 <code>donmain</code> 属性指定。如果 Cookie 的域和页面的域相同，那么我们称这个 Cookie 为第一方 Cookie（first-party cookie），如果 Cookie 的域和页面的域不同，则称之为第三方 Cookie（third-party cookie）。一个页面包含图片或存放在其他域上的资源（如图片）时，第一方的 Cookie 也只会发送给设置它们的服务器。</p><h3 id="通过-Cookie-进行-CSRF-攻击"><a href="#通过-Cookie-进行-CSRF-攻击" class="headerlink" title="通过 Cookie 进行 CSRF 攻击"></a>通过 Cookie 进行 CSRF 攻击</h3><p>假设有一个 bbs 站点：<code>http://www.c.com</code>，当登录后的用户发起如下 GET 请求时，会删除 ID 指定的帖子：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;www.c.com:8002&#x2F;content&#x2F;delete&#x2F;:id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如发起 <code>http://www.c.com:8002/content/delete/87343</code> 请求时，会删除 id 为 87343 的帖子。当用户登录之后，会设置如下 cookie：</p><pre class="line-numbers language-none"><code class="language-none">res.setHeader(&#39;Set-Cookie&#39;, [&#39;user&#x3D;22333; expires&#x3D;Sat, 21 Jul 2018 00:00:00 GMT;&#39;]);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://user-images.githubusercontent.com/7871813/42733982-62308f16-886e-11e8-9c59-c3b0352b0002.png"><img src="https://user-images.githubusercontent.com/7871813/42733982-62308f16-886e-11e8-9c59-c3b0352b0002.png" alt="user"></a></p><p><code>user</code> 对应的值是用户 ID。然后构造一个页面 A：</p><pre class="line-numbers language-none"><code class="language-none">&lt;p&gt;CSRF 攻击者准备的网站：&lt;&#x2F;p&gt;&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;www.c.com:8002&#x2F;content&#x2F;delete&#x2F;87343&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>页面 A 使用了一个 <code>img</code> 标签，其地址指向了删除用户帖子的链接：</p><p><a href="https://user-images.githubusercontent.com/7871813/42734074-38bc206c-8870-11e8-8f93-2aa5c39d245e.png"><img src="https://user-images.githubusercontent.com/7871813/42734074-38bc206c-8870-11e8-8f93-2aa5c39d245e.png" alt="A"></a></p><p>可以看到，当登录用户访问攻击者的网站时，会向 <code>www.c.com</code> 发起一个删除用户帖子的请求。此时若用户在切换到 <code>www.c.com</code> 的帖子页面刷新，会发现ID 为 87343 的帖子已经被删除。</p><p>由于 Cookie 中包含了用户的认证信息，当用户访问攻击者准备的攻击环境时，攻击者就可以对服务器发起 CSRF 攻击。在这个攻击过程中，攻击者借助受害者的 Cookie 骗取服务器的信任，但并不能拿到 Cookie，也看不到 Cookie 的内容。而对于服务器返回的结果，由于浏览器同源策略的限制，攻击者也无法进行解析。因此，攻击者无法从返回的结果中得到任何东西，他所能做的就是给服务器发送请求，以执行请求中所描述的命令，在服务器端直接改变数据的值，而非窃取服务器中的数据。</p><p>但若 CSRF 攻击的目标并不需要使用 Cookie，则也不必顾虑浏览器的 Cookie 策略了。</p><h3 id="CSRF-攻击的防范"><a href="#CSRF-攻击的防范" class="headerlink" title="CSRF 攻击的防范"></a>CSRF 攻击的防范</h3><p>当前，对 CSRF 攻击的防范措施主要有如下几种方式。</p><h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><p>验证码被认为是对抗 CSRF 攻击最简洁而有效的防御方法。</p><p>从上述示例中可以看出，CSRF 攻击往往是在用户不知情的情况下构造了网络请求。而验证码会强制用户必须与应用进行交互，才能完成最终请求。因为通常情况下，验证码能够很好地遏制 CSRF 攻击。</p><p>但验证码并不是万能的，因为出于用户考虑，不能给网站所有的操作都加上验证码。因此，验证码只能作为防御 CSRF 的一种辅助手段，而不能作为最主要的解决方案。</p><h4 id="Referer-Check"><a href="#Referer-Check" class="headerlink" title="Referer Check"></a>Referer Check</h4><p>根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。通过 Referer Check，可以检查请求是否来自合法的”源”。</p><p>比如，如果用户要删除自己的帖子，那么先要登录 <code>www.c.com</code>，然后找到对应的页面，发起删除帖子的请求。此时，Referer 的值是 <code>http://www.c.com</code>；当请求是从 <code>www.a.com</code> 发起时，Referer 的值是 <code>http://www.a.com</code> 了。因此，要防御 CSRF 攻击，只需要对于每一个删帖请求验证其 Referer 值，如果是以 <code>www.c.com</code> 开头的域名，则说明该请求是来自网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是 CSRF 攻击，可以拒绝该请求。</p><p>针对上文的例子，可以在服务端增加如下代码：</p><pre class="line-numbers language-none"><code class="language-none">if (req.headers.referer !&#x3D;&#x3D; &#39;http:&#x2F;&#x2F;www.c.com:8002&#x2F;&#39;) &#123;    res.write(&#39;csrf 攻击&#39;);    return;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://user-images.githubusercontent.com/7871813/42734407-0f4c0728-8876-11e8-8565-21f89b01f6f0.png"><img src="https://user-images.githubusercontent.com/7871813/42734407-0f4c0728-8876-11e8-8565-21f89b01f6f0.png" alt="referer check"></a></p><p>Referer Check 不仅能防范 CSRF 攻击，另一个应用场景是 “防止图片盗链”。</p><h4 id="添加-token-验证"><a href="#添加-token-验证" class="headerlink" title="添加 token 验证"></a>添加 token 验证</h4><p>CSRF 攻击之所以能够成功，是因为攻击者可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 Cookie 中，因此攻击者可以在不知道这些验证信息的情况下直接利用用户自己的 Cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入攻击者所不能伪造的信息，并且该信息不存在于 Cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当然，在 Web 安全领域，除了这两种常见的攻击方式，也存在这 SQL 注入等其它攻击方式，最后，总结一下 XSS 攻击和 CSRF 攻击的常见防御措施：</p><ol><li>防御 XSS 攻击<ul><li>HttpOnly 防止劫取 Cookie</li><li>用户的输入检查</li><li>服务端的输出检查</li></ul></li><li>防御 CSRF 攻击<ul><li>验证码</li><li>Referer Check</li><li>Token 验证</li></ul></li></ol><h2 id="简化版"><a href="#简化版" class="headerlink" title="简化版"></a>简化版</h2><h3 id="CSRF-1"><a href="#CSRF-1" class="headerlink" title="CSRF"></a>CSRF</h3><p>CSRF（Cross-site request forgery）跨站请求伪造。</p><h4 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h4><ol><li>用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；</li><li>在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；</li><li>用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；</li><li>网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；</li><li>浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。</li></ol><h4 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h4><ol><li>Token验证</li><li>Referer 验证（简单易行，但 referer 可能被改变）</li><li>隐藏令牌（跟 Token验证差不多，把令牌存到 header 中）</li></ol><h3 id="XSS-1"><a href="#XSS-1" class="headerlink" title="XSS"></a>XSS</h3><p>XSS（cross-site scripting）跨域脚本攻击</p><h4 id="攻击原理-1"><a href="#攻击原理-1" class="headerlink" title="攻击原理"></a>攻击原理</h4><p>往 Web 页面里插入恶意Script代码</p><h4 id="防御措施-1"><a href="#防御措施-1" class="headerlink" title="防御措施"></a>防御措施</h4><ol><li>HTML：对以下这些字符进行转义：</li></ol><pre class="line-numbers language-none"><code class="language-none">&amp;：&amp;&lt;：&amp;alt;&gt;：&gt;&#39;：&amp;#x27;&quot;：&quot;&#x2F;：&#x2F;复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>Javascript：把所有非字母、数字的字符都转义成小于256的ASCII字符；</li><li>URL：使用Javascript的encodeURIComponent()方法对用户的输入进行编码，该方法会编码如下字符：, / ? : @ &amp; = + $ #</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年11月05日(Concurrent Mode)</title>
      <link href="/record-blog/2021/02/13/20201105/"/>
      <url>/record-blog/2021/02/13/20201105/</url>
      
        <content type="html"><![CDATA[<h2 id="Concurrent-Mode"><a href="#Concurrent-Mode" class="headerlink" title="Concurrent  Mode"></a>Concurrent  Mode</h2><p>官方文档<a href="https://react.docschina.org/docs/concurrent-mode-intro.html">https://react.docschina.org/docs/concurrent-mode-intro.html</a></p><p><strong>可中断的rendering</strong></p><p>在通常状况下，React 在 render 的时候是没有办法被打断的，（在react15中使用的是递归，在react16中用到了fiber(纤程)），JS可以操作DOM，GUI渲染线程与JS线程是互斥的。所以<strong>JS脚本执行</strong>和<strong>浏览器布局、绘制</strong>不能同时执行</p><p>当用户在输入框输入内容时，会产生卡顿，因为每一次重新渲染都将阻塞主线程（关于进程，线程，协程不了解的话可以看这篇文章<a href="https://www.cnblogs.com/williamjie/p/11195069.html">https://www.cnblogs.com/williamjie/p/11195069.html</a><br>浏览器就没有办法实时的响应用户在输入框输入的东西，一般会使用防抖和节流，但是治标不治本</p><p>但是如果区分优先级，比如当我再输入框输入的时候，React 可以暂停 render 让浏览器优先对用户的输入进行更新，然后 React 会在<strong>内存中</strong>渲染最新的页面，等到第一次 render 完成后再直接将最新的页面更新出来，保证用户能看到最新的页面。</p><p>主流浏览器刷新频率为60Hz，即每（1000ms / 60Hz）16.6ms浏览器刷新一次。</p><p>在每16.6ms时间内，需要完成如下工作：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">JS脚本执行 -----  样式布局 ----- 样式绘制<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开启<code>Concurrent Mode</code>后在浏览器每一帧的时间中，预留5ms给JS线程，<code>React</code>利用这部分时间更新组件。当预留时间执行完后，react将线程控制权交还给浏览器使其有时间渲染UI，下一帧的时候在继续中断的任务</p><p>当网络延迟时候可以先在当前页面停留了一小段时间，这一小段时间被用来请求数据，当这一小段时间足够短时，用户是无感知的。如果请求时间超过一个范围，再显示<code>loading</code>的效果。react17中也提供了配套的方法<code>useDeferredValue</code>，还有<code>useTransition</code></p><p>Concurrent Mode将<strong>同步的更新</strong>变为<strong>可中断的异步更新</strong>，通过启用 Fiber reconciler 实现了可打断的渲染，在react15是没有调度器（Scheduler）的只有协调器Reconciler（Stack Reconciler）和渲染器Renderer，不能打断这也是为什么有了fiber的原因</p><p>Fiber架构配合Scheduler实现了Concurrent Mode的底层 —— “异步可中断的更新”。</p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年11月03日(请求的串行和并行)</title>
      <link href="/record-blog/2021/02/13/20201103/"/>
      <url>/record-blog/2021/02/13/20201103/</url>
      
        <content type="html"><![CDATA[<h3 id="请求的串行和并行"><a href="#请求的串行和并行" class="headerlink" title="请求的串行和并行"></a>请求的串行和并行</h3><p>1.有三个ajax请求，如何让这三个ajax请求串行执行，即第一个执行完成后在执行另一个？</p><p>2.如何让他们并行执行，然后三个请求都执行完成后，再执行某个操作？</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 用同步模式async: false</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      url<span class="token operator">:</span> <span class="token string">"ajax请求1"</span><span class="token punctuation">,</span>      async<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ajax请求1 完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      url<span class="token operator">:</span> <span class="token string">"ajax请求2"</span><span class="token punctuation">,</span>      async<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ajax请求2 完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      url<span class="token operator">:</span> <span class="token string">"ajax请求3"</span><span class="token punctuation">,</span>      async<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>"ajax请求<span class="token number">3</span> 完成<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用async和await来实现串行</p><p>那么async和await到底帮我们做了什么呢？</p><p>1.async</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"hello async"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出一个promise对象，所以async会返回一个 Promise 对象，如果在函数中<code> return</code> 一个直接量，<code>async</code> 会把这个直接量通过 Promise.resolve() 封装成 Promise 对象。如果async没有返回值呢？可想而知会返回Promise { undefined }</p><p>2.await</p><p>await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值，等到之后，他会干嘛呢？</p><p>如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。</p><p>如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。嘿嘿，说到这里想到了洋葱模型，这就是 <strong><em>await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行</em></strong></p><hr><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//并行执行就只能用异步模式。并设置变量进行计数  </span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">isAllSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      num<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">)</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"三个ajax请求全部完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      url<span class="token operator">:</span> <span class="token string">"ajax请求1"</span><span class="token punctuation">,</span>      async<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ajax请求1 完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">isAllSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      url<span class="token operator">:</span> <span class="token string">"ajax请求2"</span><span class="token punctuation">,</span>      async<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ajax请求3 完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">isAllSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      url<span class="token operator">:</span> <span class="token string">"ajax请求3"</span><span class="token punctuation">,</span>      async<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ajax请求3 完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">isAllSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现并行可以使用Promise.all()</p><p><strong>Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组,一一对应，而失败的时候则返回最先被reject失败状态的值。</strong></p><p>题目原文连接<a href="https://juejin.im/post/6865962560363167758/">https://juejin.im/post/6865962560363167758/</a></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;** &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 题目 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;**&#x2F;const delay &#x3D; (ms) &#x3D;&gt; new Promise((resolve) &#x3D;&gt; setTimeout(resolve, ms));const subFlow &#x3D; createFlow([() &#x3D;&gt; delay(1000).then(() &#x3D;&gt; log(&quot;c&quot;))]);createFlow([  () &#x3D;&gt; log(&quot;a&quot;),  () &#x3D;&gt; log(&quot;b&quot;),  subFlow,  [() &#x3D;&gt; delay(1000).then(() &#x3D;&gt; log(&quot;d&quot;)), () &#x3D;&gt; log(&quot;e&quot;)],]).run(() &#x3D;&gt; &#123;  console.log(&quot;done&quot;);&#125;);&#x2F;&#x2F; 需要按照 a,b,延迟1秒,c,延迟1秒,d,e, done 的顺序打印<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年11月02日(vue中使用svg)</title>
      <link href="/record-blog/2021/02/13/20201102/"/>
      <url>/record-blog/2021/02/13/20201102/</url>
      
        <content type="html"><![CDATA[<h4 id="vue中如何使用svg"><a href="#vue中如何使用svg" class="headerlink" title="vue中如何使用svg"></a>vue中如何使用svg</h4><p>我使用的是svg-sprite-loader插件</p><p><img src="/record-blog/2021/02/13/20201102/image-20201102102213476.png" alt="image-20201102102213476"></p><p>在public同级目录下新建icons文件夹，在分别创建svg文件夹和index.js文件</p><p>在封装一个SvgIcon组件</p><p><img src="/record-blog/2021/02/13/20201102/image-20201102102353498.png" alt="image-20201102102353498"></p><p>在vue.config.js配置</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">chainWebpack</span><span class="token operator">:</span> <span class="token parameter">config</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    isProd <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">'optimize-css'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>options<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>cssnanoOptions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        options<span class="token punctuation">.</span>cssnanoOptions<span class="token punctuation">.</span>preset<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>svgo <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// set svg-sprite-loader</span>    config<span class="token punctuation">.</span>module      <span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>exclude<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/icons'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    config<span class="token punctuation">.</span>module      <span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">'icons'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.svg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>include<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/icons'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'svg-sprite-loader'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">'svg-sprite-loader'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        symbolId<span class="token operator">:</span> <span class="token string">'icon-[name]'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用时，通过className定义类名</p><p><img src="/record-blog/2021/02/13/20201102/image-20201102102609148.png" alt="image-20201102102609148"></p><p>SvgIcon.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;svg :class&#x3D;&quot;svgClass&quot; aria-hidden&#x3D;&quot;true&quot; v-on&#x3D;&quot;$listeners&quot;&gt;        &lt;use :xlink:href&#x3D;&#39;iconName&#39; &#x2F;&gt;&gt;    &lt;&#x2F;svg&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;    name: &#39;SvgIcon&#39;,    props: &#123;        iconClass: &#123;            type: String,            require: true        &#125;,        className: &#123;            type: String,            default: &#39;&#39;        &#125;    &#125;,    computed: &#123;        iconName() &#123;            return &#96;#icon-$&#123;this.iconClass&#125;&#96;;        &#125;,        svgClass() &#123;            if (this.className) &#123;                return &#96;svg-icon $&#123;this.className&#125;&#96;            &#125; else &#123;                return &#39;svg-icon&#39;;            &#125;        &#125;    &#125;&#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;.svg-icon&#123;    width: 1.54666rem;    height: 1.54666rem;&#125;.guide &#123;    width: 1rem;    height: 1rem;&#125;.laye &#123;    width: 0.58667rem;    height: 0.58667rem;&#125;.send &#123;    width: 0.4‬rem;    height: 0.42666rem;&#125;.records &#123;    width: 0.45333‬rem;    height: 0.45rem;&#125;.shared &#123;    width: 0.42667rem;    height: 0.42666rem;&#125;.voice &#123;    width: 0.48rem;    height: 0.53333rem;&#125;.exchange &#123;    width: 0.42667rem;    height: 0.48‬rem;&#125;.icon-2d, .icon-3d, .retroaction &#123;    margin-top: -0.2rem;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在src/icons/index.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> SvgIcon <span class="token keyword">from</span> <span class="token string">'@/components/SvgIcon'</span><span class="token punctuation">;</span><span class="token comment">// 注册全局组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'svg-icon'</span><span class="token punctuation">,</span> SvgIcon<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> req <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">'./svg'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.svg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">requireAll</span> <span class="token operator">=</span> <span class="token parameter">requireContext</span> <span class="token operator">=></span> requireContext<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>requireContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">requireAll</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后在main.js引入</p><p><img src="/record-blog/2021/02/13/20201102/image-20201102102803376.png" alt="image-20201102102803376"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年10月29日过滤查询(数组的几种方法)</title>
      <link href="/record-blog/2021/02/13/20201029/"/>
      <url>/record-blog/2021/02/13/20201029/</url>
      
        <content type="html"><![CDATA[<p><img src="/record-blog/2021/02/13/20201029/image-20201029160334778.png" alt="图片展示"></p><p><img src="/record-blog/2021/02/13/20201029/image-20201029160522078.png" alt="代码展示"></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">handleSubmit</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span>      that<span class="token punctuation">.</span>form<span class="token punctuation">.</span><span class="token function">validateFields</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> values</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          values<span class="token punctuation">[</span><span class="token string">'areaCode'</span><span class="token punctuation">]</span> <span class="token operator">=</span> that<span class="token punctuation">.</span>areaCode <span class="token operator">||</span> <span class="token number">33</span>          values<span class="token punctuation">[</span><span class="token string">'datetime'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">let</span> resultList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token comment">// 全部数据</span>          resultList <span class="token operator">=</span> <span class="token keyword">await</span> that<span class="token punctuation">.</span><span class="token function">GetSearchDangerousCompanyList</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>          <span class="token comment">// 化学品名称过滤</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>processNames <span class="token operator">&amp;&amp;</span> that<span class="token punctuation">.</span>processNames<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            resultList <span class="token operator">=</span> resultList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token keyword">const</span> itemProcessNameList <span class="token operator">=</span> item<span class="token punctuation">.</span>processNames <span class="token operator">?</span> item<span class="token punctuation">.</span>processNames<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>              <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token boolean">false</span>              itemProcessNameList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> findResult <span class="token operator">=</span> that<span class="token punctuation">.</span>processNames<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">d</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">return</span> d <span class="token operator">===</span> i                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>findResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  result <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token keyword">return</span> result            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">// 等级过滤</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>Grade <span class="token operator">&amp;&amp;</span> that<span class="token punctuation">.</span>Grade<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            resultList <span class="token operator">=</span> resultList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token keyword">return</span> that<span class="token punctuation">.</span>Grade<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>hazardRankName<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>searchDangerousList <span class="token operator">=</span> resultList        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/record-blog/2021/02/13/20201029/11.png" alt="输入图片说明"></p><pre class="line-numbers language-none"><code class="language-none">drawRiskBar () &#123;     const canvas &#x3D; document.getElementById(&#39;riskBar&#39;)     const context &#x3D; canvas.getContext(&#39;2d&#39;)     const majorHeight &#x3D; this.majorRiskCount &#x2F; this.total * canvas.height     const largerHeight &#x3D; this.largerRiskCount &#x2F; this.total * canvas.height     const generalHeight &#x3D; this.generalRiskCount &#x2F; this.total * canvas.height     const lowHeight &#x3D; this.lowRiskCount &#x2F; this.total * canvas.height     const offlineHeight &#x3D; this.offlineCount &#x2F; this.total * canvas.height     context.fillStyle &#x3D; &#39;#FF4646&#39;     context.fillRect(0, 0, 20, majorHeight)     context.fillStyle &#x3D; &#39;#FE9056&#39;     context.fillRect(0, majorHeight, 20, largerHeight)     context.fillStyle &#x3D; &#39;#FFC900&#39;     context.fillRect(0, majorHeight + largerHeight, 20, generalHeight)     context.fillStyle &#x3D; &#39;#81BCFF&#39;     context.fillRect(0, majorHeight + largerHeight + generalHeight, 20, lowHeight)     context.fillStyle &#x3D; &#39;#7D8B8D&#39;     context.fillRect(0, majorHeight + largerHeight + generalHeight + lowHeight, 20, offlineHeight)     &#x2F;&#x2F; 绘制切面     context.beginPath()     context.arc(10, 10, 10.5, Math.PI, 0)     context.lineTo(21, 0)     context.lineTo(0, 0)     context.closePath()     context.arc(10, 170, 10.5, Math.PI, 0, true)     context.lineTo(21, 180)     context.lineTo(0, 180)     context.closePath()     context.clip()     context.clearRect(0, 0, 20, 180)   &#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年10月21日（vue composition api）</title>
      <link href="/record-blog/2021/02/13/20201022/"/>
      <url>/record-blog/2021/02/13/20201022/</url>
      
        <content type="html"><![CDATA[<ul><li>逻辑复用及代码整理</li><li>更好的Typescript支持</li></ul><p><a href="https://vue-composition-api-rfc.netlify.app/#summary">https://vue-composition-api-rfc.netlify.app/#summary</a></p><p>Vue中的是使用<strong>依赖追踪</strong>的方式去通知变更的，所以在开发Vue组件的时候我们只需要用<code>this.x = y</code>重新赋值某个状态，DOM Tree就会自动响应变更。这是Vue的优势，但在<code>Composition API</code>中就变了一个<strong>需要重点关注的点</strong>，如果使用不好，甚至会变成缺点。</p><p>我是可以从试着从Vue的实现原理去查找此原因。Vue2中是使用<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"><code>Object.defineProperty</code></a>，而Vue3则使用了<a href="https://links.jianshu.com/go?to=http://es6.ruanyifeng.com/%23docs/proxy"><code>Proxy</code></a>，但无论使用哪种方法，我们在访问和设置某个<code>state</code>的时候实际是调用了他们<strong>getter/setter</strong>的方法，但是这个state作为一个<strong>返回值</strong>或者<strong>参数</strong>的时候，它实际是作为一个<strong>值</strong>传递到了另外要给方法中，所以他的<strong>getter/setter</strong>将会丢失，数据无法响应。</p><p>这涉及到了引用传递及值传递，官方api也说的非常清楚</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">changeStuff</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  a <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">10</span>  b<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token string">'changed'</span>  c <span class="token operator">=</span> <span class="token punctuation">&#123;</span> item<span class="token operator">:</span> <span class="token string">'changed'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> item<span class="token operator">:</span> <span class="token string">'unchanged'</span> <span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> item<span class="token operator">:</span> <span class="token string">'unchanged'</span> <span class="token punctuation">&#125;</span><span class="token function">changeStuff</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> obje1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>item<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果为</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">10changedunchanged<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这说明Javascript中参数传递是以值传递的方式进行传递的，而传递的内容是<strong>它自己本身的引用值</strong></p><p><img src="/record-blog/2021/02/13/20201022/image-20201021203338813.png" alt="image-20201021203338813"></p><p>解决方法可以使用<code>toRefs</code></p><p>如果你从一个组合函数里返回了响应式对象，在使用函数里把它解构进行使用是会丢失响应性的，解决这个问题你可以把原封不动的返回：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> toRefs<span class="token punctuation">,</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">function</span> <span class="token function">useCounter</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        count<span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            count        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>setup</code>函数里返回的数据使用<code>toRefs</code>转换一下是有好处的：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> toRefs<span class="token punctuation">,</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            count<span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果这样的话在模板里使用需要通过<code>data.count</code>来引用<code>count</code>的值，如果使用<code>toRefs</code>的话可以直接使用<code>count</code></p><p>另外一个是使用<code>ref</code>去初始化state</p><pre class="line-numbers language-none"><code class="language-none">import &#123; toRefs, reactive &#125; from &#39;vue&#39;function useCounter () &#123;   let count &#x3D;ref (0)   return &#123;count&#125;&#125;export default &#123;    setup() &#123;        let &#123;count&#125; &#x3D; useCounter()        return &#123;            count        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vue3的响应式原理（proxy和reflect）可以看</p><p><a href="https://www.vuemastery.com/courses/vue-3-reactivity/">https://www.vuemastery.com/courses/vue-3-reactivity/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年10月20日(vue.config.js)</title>
      <link href="/record-blog/2021/02/13/20201021/"/>
      <url>/record-blog/2021/02/13/20201021/</url>
      
        <content type="html"><![CDATA[<p>出了一点问题需要在手机上面调试，自信满满的打开utools安装的内网穿透插件，因为之前也试过，一切顺利，结果今天不知道为啥，一直说我请求错误,今天早上试又莫名其妙的好了</p><p><img src="/record-blog/2021/02/13/20201021/image-20201020185612484.png" alt="image-20201020185612484"></p><p>于是我换了一下选项，可以了，但是打开地址是502,心想那就换一种方式吧，打开cmd输入ipconfig，查看id，在使用项目当中用的端口号，关闭防火墙，也能在手机上看到效果，谁知道还是失败，这么奇葩吗？自己电脑不能访问自己电脑？？？</p><p><img src="/record-blog/2021/02/13/20201021/image-20201020185850262.png" alt="image-20201020185850262"></p><p>最后在vue.config.js上找到了问题</p><p><img src="/record-blog/2021/02/13/20201021/image-20201020190222751.png" alt="image-20201020190222751"></p><p>因为写了这个host，导致我不能访问:cry:</p><p>之前在打包的时候一直失败，提示我svg有问题，于是我找遍了所有的svg实在是没有找出来，于是在vue.config.js里面配置了让他不检查</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">chainWebpack</span><span class="token operator">:</span> <span class="token parameter">config</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      isProd <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">'optimize-css'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>options<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>cssnanoOptions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         options<span class="token punctuation">.</span>cssnanoOptions<span class="token punctuation">.</span>preset<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>svgo <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vue.config.js代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> isProd <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-proxy-middleware'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">BASE_URL</span> <span class="token operator">=</span>isProd<span class="token operator">?</span><span class="token string">'/hzdz3'</span><span class="token operator">:</span><span class="token string">'/hzdz3'</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    publicPath<span class="token operator">:</span> <span class="token constant">BASE_URL</span><span class="token punctuation">,</span>    outputDir<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>outputDir<span class="token punctuation">,</span>    productionSourceMap<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    filenameHashing<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    lintOnSave<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        disableHostCheck<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        open<span class="token operator">:</span> process<span class="token punctuation">.</span>platform <span class="token operator">===</span> <span class="token string">"darwin"</span><span class="token punctuation">,</span>        host<span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token comment">// host: "127.0.0.1",</span>        port<span class="token operator">:</span> <span class="token number">443</span><span class="token punctuation">,</span>        https<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        hotOnly<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        headers<span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token string">'Access-Control-Allow-Origin'</span><span class="token operator">:</span><span class="token string">'*'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        overlay<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            warnings<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            errors<span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token comment">/*,    proxy: &#123;// 配置跨域      '/': &#123;        target: 'https://res.wx.qq.com/open/js/jweixin-1.3.2.js', // 这里后台的地址模拟的;应该填写你们真实的后台接口        ws: false,        changOrigin: true, // 允许跨域        pathRewrite: &#123;          '^/': ''// 请求的时候使用这个api就可以        &#125;      &#125;,  &#125;*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    configureWebpack<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        devtool<span class="token operator">:</span> <span class="token string">'source-map'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">chainWebpack</span><span class="token operator">:</span> <span class="token parameter">config</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>       isProd <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">'optimize-css'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>options<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>cssnanoOptions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          options<span class="token punctuation">.</span>cssnanoOptions<span class="token punctuation">.</span>preset<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>svgo <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">return</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年10月20日(javascript class)</title>
      <link href="/record-blog/2021/02/13/20201020/"/>
      <url>/record-blog/2021/02/13/20201020/</url>
      
        <content type="html"><![CDATA[<p>OOP 即 面向对象编程 （Object Oriented Programming），一些编程语言如 Java 、C++ 就是基于 OOP 的核心概念 class 开发出来。</p><p>在<code>javascript</code>也有class的概念，ES6 之后，JavaScript 也引入了 class 关键字用于声明一个类</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">&#125;</span>  <span class="token function">sayHello</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> says hello</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但需要注意的是，这样声明出来的类其实在底层使用了 JavaScript 的函数 和 原型链 来模拟类的行为，以上代码非常接近于,可以看出sayHello并不是Person内部封装的方法，只是普通方法，赋值到了person的原型上，因此，<strong>sayHello函数里的 this 对应的是调用时的上下文而不是定义时的上下文</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">&#125;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> says hello</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决this问题</p><p>1.**<code>bind()</code>**方法创建一个新的函数，在<code>bind()</code>被调用时，这个新函数的<code>this</code>被指定为<code>bind()</code>的第一个参数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>sayHello <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在构造器里显式调用 bind 函数绑定 this</span>  <span class="token punctuation">&#125;</span>  <span class="token function">sayHello</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> says hello</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.箭头函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">&#125;</span>  <span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sayHello<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> says hello</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>他等效于</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> says hello</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法不在原型链上，即 Person.prototype.sayHello的值是undefined ，所以这个类的子类并不能使用 super.sayHello() 调用到父类这个方法</p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年10月10日(vue swiper)</title>
      <link href="/record-blog/2021/02/13/20201010/"/>
      <url>/record-blog/2021/02/13/20201010/</url>
      
        <content type="html"><![CDATA[<p>效果图<img src="/record-blog/2021/02/13/20201010/image-20201010194435087.png" alt="image-20201010193445930"></p><p>类似于<a href="https://location.seeklane.com/szw/prod2/index.html#/location/home">https://location.seeklane.com/szw/prod2/index.html#/location/home</a></p><p>滑动居中切换是swiper自带的<br><img src="/record-blog/2021/02/13/20201010/112557_bf24ac4a_5266997.png" alt="输入图片说明"></p><p>swiper也有点击居中的方法<br><img src="/record-blog/2021/02/13/20201010/112502_ecf1c96a_5266997.png" alt="输入图片说明"><br>也可以自己手写一个</p><p><img src="/record-blog/2021/02/13/20201010/image-20201010194519499.png" alt="image-20201010193710808"></p><p>代码：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;divide-bar&quot;&gt;    &lt;div v-if&#x3D;&quot;this.maps.length &gt; 1&quot;&gt;      &lt;div class&#x3D;&quot;swiper-container&quot;&gt;        &lt;div class&#x3D;&quot;swiper-wrapper&quot;&gt;          &lt;div class&#x3D;&quot;swiper-slide&quot;               :class&#x3D;&quot;&#96;$&#123;mapIdTemp&#x3D;&#x3D;index ? &#39;swiper-slide-duplicate-active&#39; : &#39;&#39;&#125;&#96;&quot;               v-for&#x3D;&quot;(item,index) in this.maps&quot;               :key&#x3D;&quot;index&quot;               @click&#x3D;&quot;select(index, $event)&quot;&gt;&#123;&#123;item.alias&#125;&#125;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;      &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div v-else         class&#x3D;&quot;divide-bar-stage&quot;&gt;      &lt;div class&#x3D;&quot;divide-bar-container&quot;&gt;        &lt;div class&#x3D;&quot;divide-bar-item single active&quot;&gt;this.maps[0].alias&lt;&#x2F;div&gt;      &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import $ from &quot;jquery&quot;;import Swiper from &quot;swiper&quot;; &#x2F;&#x2F;导入import &#123; mapGetters, mapActions &#125; from &quot;vuex&quot;;export default &#123;  name: &quot;DivideBar&quot;,  props: &#123;    showMutilBar: &#123;      type: Boolean,      default: !0,    &#125;,  &#125;,  data () &#123;    return &#123;      stageHeigth: 90,      itemHeight: 25,      rotateRate: 0,      itemNum: 0,      zDistance: 0,      realRotate: 0,      lastRotate: 0,      eachOffset: 0,      touchStart: 0,      moveDistance: 0,      isTouch: !1,      mapIdTemp: 0,      position: &#39;&#39;,      marginTop:40    &#125;;  &#125;,  &#x2F;&#x2F;Y.c  mapGetters  &#x2F;&#x2F;Y.d  mapMutations  commit  &#x2F;&#x2F;Y.b  mapActions    dispatch  computed: &#123;    ...mapGetters(&#123;      maps: &quot;maps&quot;,      mapId: &quot;mapId&quot;,    &#125;),  &#125;,  watch: &#123;    maps (t) &#123;      &#x2F;&#x2F; this.init();    &#125;,    mapId (t) &#123;      &#x2F;&#x2F; this.select(t);    &#125;,  &#125;,  mounted () &#123;    this.showMutilBar &amp;&amp; $(&quot;.divide-bar&quot;).prepend(window.mutilBar);    this.init();    let self &#x3D; this;    &#x2F;&#x2F; 方法一：    var mySwiper &#x3D; new Swiper(&#39;.swiper-container&#39;, &#123;      direction: &#39;vertical&#39;,      slideToClickedSlide: true,      centeredSlides: true,      slidesPerView: 3.5, &#x2F;&#x2F; 设置slider容器能够同时显示的slides数量      on: &#123;        slideChange: function (e) &#123;          self.select(this.activeIndex, e);        &#125;      &#125;    &#125;)    mySwiper.setTranslate(0)    &#x2F;&#x2F; 方法二：    let mySwiper &#x3D; new Swiper(&quot;.swiper-container&quot;, &#123;      direction: &#39;vertical&#39;,      slidesPerView: &#39;auto&#39;,      observeParents: true,      centeredSlides: true, &#x2F;&#x2F;设定为true时，active slide会居中，而不是默认状态下的居左。      on: &#123;        slideChange: function (e) &#123;          &#x2F;&#x2F; this执行swiper          this.position &#x3D; self.itemHeight * e.el.offsetTop;          self.select(this.activeIndex, e);        &#125;,        click: function (e) &#123;          self.position &#x3D; self.itemHeight * e.clickedIndex;          self.swiperHeight &#x3D; mySwiper.$el[0].offsetHeight          self.maxTranslate &#x3D; mySwiper.maxTranslate();          self.maxHeight &#x3D; -self.maxTranslate + self.swiperHeight &#x2F; 2          let slide, slideTop, slideHeight, slideCenter, nowTlanslate;          slideTop &#x3D; self.position;          slideHeight &#x3D; self.itemHeight;          slideCenter &#x3D; slideTop + slideHeight &#x2F; 2;          if (slideCenter &lt;&#x3D; self.swiperHeight &#x2F; 2)&#123;            if (slideCenter &#x3D;&#x3D;&#x3D; 12.5)            &#123;              mySwiper.setTransition(300)              mySwiper.setTranslate(self.itemHeight + self.marginTop)            &#125; else if (slideCenter &#x3D;&#x3D;&#x3D; 37.5)            &#123;              mySwiper.setTransition(300)              mySwiper.setTranslate(0+self.marginTop)            &#125;          &#125; else if (slideCenter &gt;&#x3D; self.maxHeight)&#123;            if (slideCenter &#x3D;&#x3D;&#x3D; 62.5)            &#123;              mySwiper.setTransition(300)              mySwiper.setTranslate(-self.itemHeight + self.marginTop)            &#125; else            &#123;              mySwiper.setTransition(300)              mySwiper.setTranslate(-50+self.marginTop)            &#125;          &#125; else          &#123;            if (slideCenter &#x3D;&#x3D;&#x3D; 62.5)            &#123;              mySwiper.setTransition(300)              mySwiper.setTranslate(-self.itemHeight + self.marginTop)            &#125; else            &#123;              mySwiper.setTransition(300)              mySwiper.setTranslate(-50 + self.marginTop)            &#125;          &#125;        &#125;      &#125;    &#125;)  &#125;,  methods: &#123;    init () &#123;      this.store;      this.itemNum &#x3D; this.maps.length + 5;      this.rotateRate &#x3D; 360 &#x2F; this.itemNum;      this.zDistance &#x3D;        this.itemHeight &#x2F; (2 * Math.tan((this.rotateRate &#x2F; 360) * Math.PI));      this.updateMapId(this.mapId);    &#125;,    select (t, e) &#123;      &#x2F;&#x2F; this.mapIdTemp &#x3D; t      if (e.path)      &#123;        this.position &#x3D; e.path[0].offsetTop;      &#125; else      &#123;        this.position &#x3D; e.el.offsetTop      &#125;      this.updateMapId(t);    &#125;,     updateMapId (t) &#123;      t &gt; this.maps.length - 1 || t &lt; 0        ? console.log(&quot;mapid错误&quot; + t)        : (t !&#x3D;&#x3D; this.mapIdTemp &amp;&amp;          ((this.realRotate &#x3D; -this.rotateRate * t), (this.mapIdTemp &#x3D; t)),          t !&#x3D;&#x3D; this.mapId &amp;&amp; this.setMapId(t));    &#125;  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;.divide-bar &#123;  visibility: visible;&#125;.swiper-wrapper &#123;  &#x2F;&#x2F; margin-top: 0.2rem;&#125;.swiper-container &#123;  width: 100%;  height: 100%;  overflow: visible !important;  margin-top: -40px;&#125;.swiper-slide &#123;  width: 0.66667rem;  height: 0.66667rem !important;  line-height: 0.66667rem;  font-size: 0.34333rem;  margin-bottom: 0px !important;  transition: 300ms;  &#x2F;&#x2F; transform: scale(0.8);&#125;.swiper-slide-active,.swiper-slide-duplicate-active &#123;  background: #00bc92;  border-radius: 50%;  color: #ffffff;  font-size: 0.38667rem;  transform: scale(1);&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当用力上下滑动时，最后一个和第一个都希望在中间<br><img src="/record-blog/2021/02/13/20201010/1.png" alt="输入图片说明"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年10月7号渲染更新（vue)</title>
      <link href="/record-blog/2021/02/13/20201007/"/>
      <url>/record-blog/2021/02/13/20201007/</url>
      
        <content type="html"><![CDATA[<p>页面更新少不了diff,会对比新旧节点来进行更新，当两个节点不一样的时候，不难理解，直接创建新节点，删除旧节点</p><p>在for循环中会使用到key，并且不要使用index，用唯一值id做key，当使用v-for遍历数组时，如果没有指定key，则当数组元素顺序发生变更时，dom绑定的数据会更新，而dom本身的顺序不会变化；如果指定了key，则当数组元素顺序发生变更时，dom会和数据同步更新</p><p>我在项目中遇到父组件传值给子组件，通过props接收，我使用watch监听了这个属性，的确发生了变化，但是页面就是不更新，也不是什么对象，不需要使用$set，最后在对应元素上添加了key,就解决了</p><p><img src="/record-blog/2021/02/13/20201007/image-20201007170311389.png" alt="image-20201007170311389"></p><p><img src="/record-blog/2021/02/13/20201007/image-20201007170236836.png" alt="image-20201007170236836"></p><p>vue.js的虚拟DOM算法，在更新vNode时，需要从旧vNode列表中查找与新vNode节点相同的vNode进行更新，如果这个过程设置了属性key，过程就会快很多，但是还不清楚为什么有的需要添加key，难道是因为我的这个更新过于频繁？</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年9月22号（Echarts（柱状图））</title>
      <link href="/record-blog/2021/02/13/20200922/"/>
      <url>/record-blog/2021/02/13/20200922/</url>
      
        <content type="html"><![CDATA[<h4 id="选择不同的内容柱状图-实时变化，这里用到了vuex，echarts"><a href="#选择不同的内容柱状图-实时变化，这里用到了vuex，echarts" class="headerlink" title="选择不同的内容柱状图 实时变化，这里用到了vuex，echarts"></a>选择不同的内容柱状图 实时变化，这里用到了vuex，echarts</h4><p><img src="/record-blog/2021/02/13/20200922/image-20200922211422499.png" alt="image-20200922211422499"></p><p>由于项目的模块比较多所以会使用vuex里面的modules，使用过程当中遇到的问题</p><p><img src="/record-blog/2021/02/13/20200922/image-20200922211824684.png" alt="image-20200922211824684"></p><p>第一个指的是模块名称，第二个是值，然后在watch里面监听变化，这样是没有问题的，于是我在请求其他列表数据的时候发现取不到值</p><p><img src="/record-blog/2021/02/13/20200922/image-20200922212023354.png" alt="image-20200922212023354"></p><p>于是换了下面的一种方式,直接state.模块名，这样就可以顺利的获取了</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">...mapState(&#123;    saturationLineInfoList: (state) &#x3D;&gt; state.equipment.saturationLineInfoList  &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>比如父组件向子组件传值时一般是这么写</p><p><img src="/record-blog/2021/02/13/20200922/image-20200922212238027.png" alt="image-20200922212238027"></p><p>但是代码看着很丑，可以直接传一个对象，在此过程中如果嵌套过多可以使用$props,$attrs</p><ol><li>$attrs包含了父作用域中不作为 prop 被识别 (且获取) 的 attribute 绑定 (class 和 style 除外)。</li><li>$props当前组件接收到的 props 对象。</li></ol><h5 id="echarts-版本为4"><a href="#echarts-版本为4" class="headerlink" title="echarts(版本为4)"></a>echarts(版本为4)</h5><p>这是一个柱状图，要实现纵向效果，就把x和y轴的值反过来就行，之前调echarts的大小总觉得大小没占满，可以使用grid，还有一点就是鼠标放在x或者y轴上显示内容怎么做呢，首页在你需要显示的轴上写上triggerEvent:true</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">initMap (yData, seriesData) &#123;     const chart &#x3D; this.$echarts.init(this.$refs.bar)     chart.setOption(&#123;       tooltip: &#123;           trigger: &#39;axis&#39;       &#125;,       grid: &#123;           left: &#39;10px&#39;,           right: &#39;10px&#39;,           bottom: &#39;0&#39;,           top: &#39;10px&#39;,           containLabel: true       &#125;,       xAxis: [       &#123;           type: &#39;value&#39;,           axisTick: &#123;             show: false,             alignWithLabel: true           &#125;,           axisLine: &#123;               show: false,               lineStyle: &#123;                   color: &#39;#fff&#39;               &#125;           &#125;,           axisLabel: &#123;               fontSize: &#39;14&#39;           &#125;,           splitLine: &#123;             show: false           &#125;       &#125;   ],       yAxis: [         &#123;           triggerEvent: true,           data: yData,           type: &#39;category&#39;,           axisTick: &#123;             show: false           &#125;,           axisLine: &#123;               show: false,               lineStyle: &#123;                   color: &#39;#fff&#39;               &#125;           &#125;,           axisLabel: &#123;           formatter: value &#x3D;&gt; &#123;             let res &#x3D; value             if (res.length &gt; 4) &#123;               res &#x3D; res.substring(0, 3) + &#39;\n&#39; + res.substring(3, 5) + &#39;...&#39;             &#125;             return res             &#125;,             interval: 0,             fontSize: &#39;14&#39;           &#125;,           splitLine: &#123;             show: false           &#125;       &#125;   ],       series: [       &#123;           name: &#39;浸润线埋深&#39;,           type: &#39;bar&#39;,           label: &#123;             show: true,             position: &#39;right&#39;,             textStyle: &#123;               fontSize: &#39;12&#39;,               color: &#39;#fff&#39;             &#125;           &#125;,           barWidth: &#39;40%&#39;,           data: seriesData,           itemStyle: &#123;              normal: &#123;                  color: &#39;#0099FF&#39;                &#125;              &#125;           &#125;        ]       &#125;)     this.extension(chart)   &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后调用extension方法</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">&#x2F;&#x2F; 显示名称    extension (chart) &#123;      const dom &#x3D; document.getElementById(&#39;extension&#39;)      if (!dom) &#123;        const div &#x3D; document.createElement(&#39;div&#39;)        div.id &#x3D; &#39;extension&#39;        div.style.display &#x3D; &#39;none&#39;        document.body.append(div)      &#125;      const extension &#x3D; document.getElementById(&#39;extension&#39;)      chart.on(&#39;mouseover&#39;, (params) &#x3D;&gt; &#123;        console.log(params)        if (params.componentType &#x3D;&#x3D;&#x3D; &#39;yAxis&#39;) &#123;          extension.style.position &#x3D; &#39;absolute&#39;          extension.style.color &#x3D; &#39;white&#39;          extension.style[&#39;font-size&#39;] &#x3D; &#39;15px&#39;          extension.style.padding &#x3D; &#39;5px&#39;          extension.style.display &#x3D; &#39;inline&#39;          extension.textContent &#x3D; params.value          const event &#x3D; window.event          const xx &#x3D; event.pageX - 130          const yy &#x3D; event.pageY - 5          extension.style.top &#x3D; yy + &#39;px&#39;          extension.style.left &#x3D; xx + &#39;px&#39;        &#125;      &#125;)      chart.on(&#39;mouseout&#39;, (params) &#x3D;&gt; &#123;        if (params.componentType &#x3D;&#x3D;&#x3D; &#39;yAxis&#39;) &#123;          extension.style.display &#x3D; &#39;none&#39;        &#125;      &#125;)    &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年9月15日（require和import）</title>
      <link href="/record-blog/2021/02/13/20200915/"/>
      <url>/record-blog/2021/02/13/20200915/</url>
      
        <content type="html"><![CDATA[<p>在平常写vue或者react的项目时，我大多数时候写的是<code>import</code>，在写nodeJs的时候使用的都是<code>require</code>这种形式导入，因为nodeJs里面不支持<code>ES Module</code></p><p>在有一次写项目（react+echarts）的过程中，要导入json数据，于是我还是使用的是import导入，结果同事要我换成require,因为require是同步，import是异步</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>require用于读取并执行js文件， 并返回该模块的exports对象， 若无指定模块， 会报错。 Node使用CommonJS模块规范， CommonJS规范加载模块是<strong>同步</strong>的， 只有加载完成， 才能执行后续操作。</p><p><strong>每一个文件就是一个模块，拥有自己独立的作用域，变量，以及方法等</strong>，对其他的模块都<strong>不可见</strong>。CommonJS规范规定：每个模块内部，module变量代表当前模块。这个变量是一个对象，它的exports属性（即module.exports）是对外的接口。加载某个模块，其实是加载该模块的module.exports属性。require方法用于加载模块。</p><p>import用于引入外部模块， 其他脚本等的函数， 对象或者基本类型。 import属于ES6的命令， 它和require不一样， 它会生成外部模块的引用而不是加载模块， 等到真正使用到该模块的时候才会去加载模块中的值。</p><h3 id="requir动态编译"><a href="#requir动态编译" class="headerlink" title="requir动态编译"></a>requir动态编译</h3><p>第一次加载某个模块时， Node会缓存该模块， 后续加载就从缓存中获取。require是<strong>运行时调用</strong>，所以require理论上可以运用在代码的任何地方。但是使用CommonJS会使打包体积变大<a href="https://mp.weixin.qq.com/s/ITBFo8UE9LNxhhX-vvTCVw">https://mp.weixin.qq.com/s/ITBFo8UE9LNxhhX-vvTCVw</a></p><h3 id="import静态编译"><a href="#import静态编译" class="headerlink" title="import静态编译"></a>import静态编译</h3><p>ES6模块的编译： import模块时只是生成引用， 等到需要时才去取值， 所以不存在缓存的问题， 而且模块里的变量， 绑定其所在的模块。import是<strong>编译时调用</strong>，虽然import命令具有提升效果，会提升到整个模块的头部， 但还是建议放在文件开头。</p><h3 id="在node中使用ES6模块"><a href="#在node中使用ES6模块" class="headerlink" title="在node中使用ES6模块"></a>在node中使用ES6模块</h3><p>node要求ES6模块的后缀名为mjs,commonJS为cjs,如果不希望更改后缀名，可以设置package.json的type字段为module,require命令不能加载mjs，import命令也不能加载cjs,必须使用import</p><h3 id="CommonJS加载ESModule"><a href="#CommonJS加载ESModule" class="headerlink" title="CommonJS加载ESModule"></a>CommonJS加载ESModule</h3><p>可以使用import(),require()不支持 ES6 模块的一个原因是，它是同步加载，而 ES6 模块内部可以使用顶层await命令，导致无法被同步加载。</p><h3 id="ESModule加载CommonJS"><a href="#ESModule加载CommonJS" class="headerlink" title="ESModule加载CommonJS"></a>ESModule加载CommonJS</h3><p>ES6 模块的import命令可以加载 CommonJS 模块，但是只能整体加载，不能只加载单一的输出项。这是因为 ES6 模块需要支持静态代码分析，而 CommonJS 模块的输出接口是module.exports，是一个对象，无法被静态分析，所以只能整体加载。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年8月17日(less/sass/css弹性盒子封装)</title>
      <link href="/record-blog/2021/02/13/20200817/"/>
      <url>/record-blog/2021/02/13/20200817/</url>
      
        <content type="html"><![CDATA[<h4 id="1-css"><a href="#1-css" class="headerlink" title="1.css"></a>1.css</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@charset</span> <span class="token string">"UTF-8"</span><span class="token punctuation">;</span></span><span class="token comment">/** * flexbox布局方式  */</span> <span class="token selector">.fx</span><span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">/** * 向从左到右排列（左对齐） * &lt;div class="fx fx-row">&lt;/div> */</span><span class="token selector">.fx-row</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">/** * 向从左到右排列（右边对齐） * &lt;div class="fx fx-row">&lt;/div> */</span><span class="token selector">.fx-row-reverse</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row-reverse<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">/** * 纵向从上往下排列（顶对齐） * &lt;div class="fx fx-column">&lt;/div> */</span><span class="token selector">.fx-column</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">/** * 纵向从上往下排列（底部对齐） * &lt;div class="fx fx-column">&lt;/div> */</span><span class="token selector">.fx-column-reverse</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column-reverse<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token comment">/* 主轴 */</span><span class="token selector">.fx-justify-start</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.fx-justify-end</span> <span class="token punctuation">&#123;</span>   <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token selector">.fx-justify-center</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">.fx-justify-between</span> <span class="token punctuation">&#123;</span>   <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">.fx-justify-around</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token comment">/* 侧轴 */</span> <span class="token selector">.fx-align-start</span><span class="token punctuation">&#123;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token selector">.fx-align-end</span><span class="token punctuation">&#123;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token selector">.fx-align-center</span><span class="token punctuation">&#123;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">/** * wrap */</span><span class="token selector">.fx-wrap</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 子项目排列 * &lt;div class="fx fx-column">&lt;/div> */</span><span class="token selector">.fx-1, .fx-2, .fx-3, .fx-4, .fx-5, .fx-6, .fx-7, .fx-8, .fx-9</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** auto(1 1 auto) **/</span><span class="token selector">.fx-auto</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.fx-none</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">.fx-1</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.fx-2</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.fx-3</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">.fx-4</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.fx-5</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.fx-6</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 6<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.fx-7</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 7<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.fx-8</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 8<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.fx-9</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 9<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-scss"><a href="#2-scss" class="headerlink" title="2.scss"></a>2.scss</h4><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">@charset &quot;utf-8&quot;;&#x2F;** * flexbox布局方式 *&#x2F;@mixin flexbox &#123;  display: flex;&#125;%flexbox &#123; @include flexbox; &#125;&#x2F;** * 向从左到右排列（左对齐） * &lt;div class&#x3D;&quot;fx-row&quot;&gt;&lt;&#x2F;div&gt; *&#x2F;.fx-row&#123;  @include flexbox;  width: 100%;  flex-direction: row;&#125;&#x2F;** * 向从左到右排列（右边对齐） * &lt;div class&#x3D;&quot;fx-row&quot;&gt;&lt;&#x2F;div&gt; *&#x2F;.fx-row-reverse&#123;  @include flexbox;  width: 100%;  flex-direction: row-reverse; &#125;&#x2F;** * 纵向从上往下排列（顶对齐） * &lt;div class&#x3D;&quot;fx-column&quot;&gt;&lt;&#x2F;div&gt; *&#x2F;.fx-column&#123;  @include flexbox;  width: 100%;  flex-direction: column; &#125;&#x2F;** * 纵向从上往下排列（底部对齐） * &lt;div class&#x3D;&quot;fx-column&quot;&gt;&lt;&#x2F;div&gt; *&#x2F;.fx-column-reverse&#123;  @include flexbox;  width: 100%;  flex-direction: column-reverse; &#125;  &#x2F;* 主轴 *&#x2F;  .fx-justify-start &#123;    @include flexbox;    width: 100%;    justify-content: flex-start;  &#125;  .fx-justify-end &#123;    @include flexbox;    width: 100%;     justify-content: flex-end;     &#125;  .fx-justify-center &#123;    @include flexbox;    width: 100%;    justify-content: center;   &#125;  .fx-justify-between &#123;     @include flexbox;    width: 100%;    justify-content: space-between;   &#125;  .fx-justify-around &#123;    @include flexbox;    width: 100%;    justify-content: space-around;    &#125;     &#x2F;* 侧轴 *&#x2F;   .fx-align-start&#123;    align-items: flex-start;   &#125;     .fx-align-end&#123;    align-items: flex-end;   &#125;     .fx-align-center&#123;    align-items: center;   &#125;&#x2F;** * wrap策略 *&#x2F;.fx-wrap&#123;  flex-wrap: wrap;&#125;&#x2F;** * 子项目排列 * &lt;div class&#x3D;&quot;fx-column&quot;&gt;&lt;&#x2F;div&gt; *&#x2F;.fx,.fx-1,.fx-2,.fx-3,.fx-4,.fx-5,.fx-6,.fx-7,.fx-8,.fx-9&#123;  width: 100%;&#125;&#x2F;** auto(1 1 auto) **&#x2F;.fx-auto &#123;flex:auto;&#125;.fx-none &#123;flex:none;&#125;.fx-1 &#123;flex:1;&#125;.fx-2 &#123;flex:2;&#125;.fx-3 &#123;flex:3;&#125;.fx-4 &#123;flex:4;&#125;.fx-5 &#123;flex:5;&#125;.fx-6 &#123;flex:6;&#125;.fx-7 &#123;flex:7;&#125;.fx-8 &#123;flex:8;&#125;.fx-9 &#123;flex:9;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-less"><a href="#3-less" class="headerlink" title="3.less"></a>3.less</h4><pre class="line-numbers language-less" data-language="less"><code class="language-less">@fx-column: 24;.fx-column, .fx-row,.fx-row-reverse, .fx-column-reverse&#123;display: flex;&#125;.fx-row&#123;  flex-direction: row;  .build-align(row);&#125;.fx-row-reverse&#123;  flex-direction: row-reverse; &#125;.fx-column&#123;  flex-direction: column;  .build-align(column);&#125;.fx-column-reverse&#123;  flex-direction: column-reverse; &#125;.flex-item &#123;float: left;flex-grow: 1;&#125;&#x2F;&#x2F; fx-row的对齐方式.build-align(@type) when (@type &#x3D; row) &#123;  &amp;.fx-left &#123;justify-content: flex-start;&#125;&amp;.fx-right &#123;justify-content: flex-end;&#125;&amp;.fx-top &#123;align-items: flex-start;&#125;&amp;.fx-bottom &#123;align-items: flex-end;&#125;&amp;.fx-center &#123;justify-content: center;&#125;&amp;.fx-middle &#123;align-items: center;  &#125;&#125;&#x2F;&#x2F; fx-column的对齐方式.build-align(@type) when (@type &#x3D; column) &#123;  &amp;.fx-left &#123;align-items: flex-start;&#125;&amp;.fx-right &#123;align-items: flex-end;&#125;&amp;.fx-top &#123;justify-content: flex-start;&#125;&amp;.fx-bottom &#123;justify-content: flex-end;&#125;&amp;.fx-center &#123;align-items: center;&#125;&amp;.fx-middle &#123;justify-content: center;&#125;&#125;&#x2F;&#x2F; 递归生成栅格.build-item(@i) when (@i &gt; 0) &#123;.build-item((@i - 1));&#x2F;&#x2F; 栅格.flex-item-@&#123;i&#125; &#123;float: left;width: percentage(@i &#x2F; @fx-column);&#125;&#125;.build-item(@fx-column);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在react中使用需要配置</p><pre class="line-numbers language-none"><code class="language-none">const path &#x3D; require(&quot;path&quot;);const &#123;    override,    addWebpackAlias&#125; &#x3D; require(&#39;customize-cra&#39;);const alter_config&#x3D; ()&#x3D;&gt;(config, env)&#x3D;&gt;&#123;    const oneOf_loc&#x3D; config.module.rules.findIndex(n&#x3D;&gt;n.oneOf)    config.module.rules[oneOf_loc].oneOf&#x3D;[    &#x2F;&#x2F;例如要增加处理less的配置        &#123;            test: &#x2F;\.(css|less)$&#x2F;,            use: [                require.resolve(&#39;style-loader&#39;),                &#123;                    loader: require.resolve(&#39;css-loader&#39;),                    options: &#123;                        importLoaders: 1,                    &#125;,                &#125;,                &#123;                    loader: &#39;less-loader&#39;                &#125;            ],      &#125;,      &#123;        test:&#x2F;\.scss$&#x2F;,        loaders:[&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;sass-loader&#39;],      &#125;,        ...config.module.rules[oneOf_loc].oneOf    ]    return config;&#125;module.exports&#x3D; override(    alter_config(),   &#x2F;&#x2F;将自定义配置组合进来    addWebpackAlias(&#123;  &#x2F;&#x2F;增加路径别名的处理        &#39;@&#39;: path.resolve(&#39;.&#x2F;src&#39;)    &#125;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年8月6日（3d尾矿库项目）</title>
      <link href="/record-blog/2021/02/13/20200806/"/>
      <url>/record-blog/2021/02/13/20200806/</url>
      
        <content type="html"><![CDATA[<p>昨天加班到深夜，因为今天要演示，慌的一批呀，让别人看出我们封装的意义和价值,当然笔记里没有很详细的说明我们插件的使用的方法<br><video src="Rec-0001.mp4" type="video/mp4" controls="controls" width="100%" height="100%"><br></video></p><p>首先这是一个登陆页面，背景图片是有动画效果的，还有一些特效,特效使用react-particles-js插件，需要进行一些配置，当然也可以不用，使用默认的，根据自己的需求来加</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">&lt;div id&#x3D;&quot;app&quot;&gt;      &lt;ul className&#x3D;&quot;slide-box&quot;&gt;        &lt;li&gt;&lt;&#x2F;li&gt;        &lt;li&gt;&lt;&#x2F;li&gt;        &lt;li&gt;&lt;&#x2F;li&gt;        &lt;li&gt;&lt;&#x2F;li&gt;      &lt;&#x2F;ul&gt;      &lt;div&gt;        &lt;Particles          params&#x3D;&#123;params&#125;          style&#x3D;&#123;&#123;            zIndex: &#39;0&#39;,            width: &#39;100%&#39;,            height: &#39;100%&#39;,            position: &#39;absolute&#39;,            left: &#39;0px&#39;,            top: 0          &#125;&#125;        &#x2F;&gt;      &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">//css.slide-box, .slide-box li</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.slide-box</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #0086b3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.slide-box li:first-child</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/assets/image/bg1.jpg<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.slide-box li</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>  <span class="token property">background-position</span><span class="token punctuation">:</span> 50% 50%<span class="token punctuation">;</span>  <span class="token property">background-repeat</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> imageAnimation 48s linear 0s infinite<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.slide-box, .slide-box li</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.slide-box li:nth-child(2)</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/assets/image/bg2.jpg<span class="token punctuation">)</span></span><span class="token punctuation">;</span>  <span class="token property">-webkit-animation-delay</span><span class="token punctuation">:</span> 12s<span class="token punctuation">;</span>  <span class="token property">animation-delay</span><span class="token punctuation">:</span> 12s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.slide-box li:nth-child(3)</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/assets/image/bg3.jpg<span class="token punctuation">)</span></span><span class="token punctuation">;</span>  <span class="token property">-webkit-animation-delay</span><span class="token punctuation">:</span> 24s<span class="token punctuation">;</span>  <span class="token property">animation-delay</span><span class="token punctuation">:</span> 24s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.slide-box li:nth-child(4)</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/assets/image/bg4.jpg<span class="token punctuation">)</span></span><span class="token punctuation">;</span>  <span class="token property">-webkit-animation-delay</span><span class="token punctuation">:</span> 36s<span class="token punctuation">;</span>  <span class="token property">animation-delay</span><span class="token punctuation">:</span> 36s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> imageAnimation</span><span class="token punctuation">&#123;</span>  <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">animation-timing-function</span><span class="token punctuation">:</span> ease-in<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">8%</span> <span class="token punctuation">&#123;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.15<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">animation-timing-function</span><span class="token punctuation">:</span> ease-out<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">17%</span> <span class="token punctuation">&#123;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">25%</span> <span class="token punctuation">&#123;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">100%</span> <span class="token punctuation">&#123;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//配置内容</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">polygonParticles</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"particles"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"number"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"value"</span><span class="token operator">:</span> <span class="token number">70</span><span class="token punctuation">,</span>        <span class="token string">"density"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"enable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token string">"value_area"</span><span class="token operator">:</span> <span class="token number">1200</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token string">"color"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"value"</span><span class="token operator">:</span> <span class="token string">"#6495ED"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token string">"shape"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"type"</span><span class="token operator">:</span> <span class="token string">"circle"</span><span class="token punctuation">,</span>        <span class="token string">"stroke"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"width"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          <span class="token string">"color"</span><span class="token operator">:</span> <span class="token string">"#000000"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"polygon"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"nb_sides"</span><span class="token operator">:</span> <span class="token number">2</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"image"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"src"</span><span class="token operator">:</span> <span class="token string">"img/github.svg"</span><span class="token punctuation">,</span>          <span class="token string">"width"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token string">"height"</span><span class="token operator">:</span> <span class="token number">12</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token string">"opacity"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"value"</span><span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>        <span class="token string">"random"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token string">"anim"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"enable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token string">"speed"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token string">"opacity_min"</span><span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span>          <span class="token string">"sync"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token string">"size"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"value"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"random"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token string">"anim"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"enable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token string">"speed"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>          <span class="token string">"size_min"</span><span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span>          <span class="token string">"sync"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token string">"line_linked"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"enable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token string">"distance"</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>        <span class="token string">"color"</span><span class="token operator">:</span> <span class="token string">"#6495ED"</span><span class="token punctuation">,</span>        <span class="token string">"opacity"</span><span class="token operator">:</span> <span class="token number">0.4</span><span class="token punctuation">,</span>        <span class="token string">"width"</span><span class="token operator">:</span> <span class="token number">0.8</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token string">"move"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"enable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token string">"speed"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"direction"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>        <span class="token string">"random"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token string">"straight"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token string">"out_mode"</span><span class="token operator">:</span> <span class="token string">"out"</span><span class="token punctuation">,</span>        <span class="token string">"bounce"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token string">"attract"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"enable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token string">"rotateX"</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>          <span class="token string">"rotateY"</span><span class="token operator">:</span> <span class="token number">1200</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"interactivity"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"detect_on"</span><span class="token operator">:</span> <span class="token string">"canvas"</span><span class="token punctuation">,</span>      <span class="token string">"events"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"onhover"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"enable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token string">"mode"</span><span class="token operator">:</span> <span class="token string">"repulse"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"onclick"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"enable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token string">"mode"</span><span class="token operator">:</span> <span class="token string">"push"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"resize"</span><span class="token operator">:</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token string">"modes"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"grab"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"distance"</span><span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>          <span class="token string">"line_linked"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"opacity"</span><span class="token operator">:</span> <span class="token number">1</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"bubble"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"distance"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>          <span class="token string">"size"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>          <span class="token string">"duration"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          <span class="token string">"opacity"</span><span class="token operator">:</span> <span class="token number">0.8</span><span class="token punctuation">,</span>          <span class="token string">"speed"</span><span class="token operator">:</span> <span class="token number">2</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"repulse"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"distance"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>          <span class="token string">"duration"</span><span class="token operator">:</span> <span class="token number">0.4</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"push"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"particles_nb"</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"remove"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"particles_nb"</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"retina_detect"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> params<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来是一些功能，可以全屏，可以看到不同的图标，比如点击带有摄像头的图标的时候会弹出右边的内容播放视频，我点击绿色图标是需要弹出对应白色的弹框里面显示对应的信息，拖动地图，白色弹框跟着移动，包括右边栏的东西，表格里面数据的对接，echarts饼图的使用等</p><video src="Rec-0002.mp4" type="video/mp4" controls="controls" width="100%" height="100%"></video><p><strong>1.加载图标</strong></p><p>在fnList里面是已经封装好的一些请求接口，参数一样，写法一样，如果每个都写一个await看上去代码非常的冗余，于是我想到了<code>forEach</code>，可是<code>forEach</code>是异步的，它内部也进行了封装，所以使用了for，也可以使用promise.all()</p><pre class="line-numbers language-react" data-language="react"><code class="language-react"> const loadIconLayer &#x3D; async () &#x3D;&gt; &#123;            let total &#x3D; 0;            let deviceOffLine &#x3D; 0;            let iconLayerList &#x3D; [];            &#x2F;&#x2F; 存放参数为earth的方法            let fnList &#x3D; [loadDryBeach, loadReserWaterLevel, loadDisplacement, loadSaturationLine, loadRainfall, loadInclinometer]            async function requestFn (fnList) &#123;                for (var i &#x3D; 0; i &lt; fnList.length; i++) &#123;                    let res &#x3D; await fnList[i](earth)                    iconLayerList.push(res.iconLayer)                    total +&#x3D; res.total                &#125;                clickEvent(iconLayerList, mappanel.current.handleLeft, earth);            &#125;            requestFn(fnList)        &#125;        loadIconLayer();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举一个数组里面方法的例子</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 加载干滩</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">loadDryBeach</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">_earth</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getDryBeachEquipInfoList</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> currentpage<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> pagesize<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> datetime<span class="token operator">:</span> <span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">transformationCoordinate</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>list<span class="token punctuation">,</span> equipment<span class="token punctuation">.</span><span class="token constant">DRYBEACH</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取坐标方法</span>    <span class="token keyword">let</span> dryBeach <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Xt<span class="token punctuation">.</span>IconLayer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        data<span class="token operator">:</span> data<span class="token punctuation">,</span>        <span class="token function-variable function">id</span><span class="token operator">:</span> <span class="token parameter">d</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>equipno<span class="token punctuation">,</span>        <span class="token function-variable function">position</span><span class="token operator">:</span> <span class="token parameter">d</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>position<span class="token punctuation">,</span>        image<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PUBLIC_URL</span> <span class="token operator">+</span> <span class="token string">'/svg/dryBeach.svg'</span><span class="token punctuation">,</span>        width<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>        height<span class="token operator">:</span> <span class="token number">36</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _earth<span class="token punctuation">.</span>layers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dryBeach<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> iconLayer<span class="token operator">:</span> dryBeach<span class="token punctuation">,</span> total<span class="token operator">:</span> res<span class="token punctuation">.</span>total <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 坐标转换</span><span class="token keyword">const</span> <span class="token function-variable function">transformationCoordinate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> gcj02 <span class="token operator">=</span> Xt<span class="token punctuation">.</span>Math<span class="token punctuation">.</span><span class="token function">bd09ToGcj02</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>longitude<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Number</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>latitude<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> wgs84 <span class="token operator">=</span> Xt<span class="token punctuation">.</span>Math<span class="token punctuation">.</span><span class="token function">gcj02ToWgs84</span><span class="token punctuation">(</span>gcj02<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> gcj02<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wgs84<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> equipno <span class="token operator">=</span> e<span class="token punctuation">.</span>equipno <span class="token operator">||</span> e<span class="token punctuation">.</span>spbh<span class="token punctuation">;</span>        <span class="token keyword">const</span> id <span class="token operator">=</span> equipno <span class="token operator">&amp;&amp;</span> equipno<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> equipno<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 闲林钼铁矿集团尾矿库监测</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">===</span> <span class="token string">"3301100001"</span> <span class="token operator">||</span> <span class="token string">"3301100120"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                position<span class="token operator">:</span> wgs84<span class="token punctuation">,</span> equipno<span class="token operator">:</span> e<span class="token punctuation">.</span>equipno<span class="token punctuation">,</span> type<span class="token operator">:</span> type<span class="token punctuation">,</span> equipname<span class="token operator">:</span> e<span class="token punctuation">.</span>equipname            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//封装的请求方法，使用encrypt加密参数</span><span class="token keyword">const</span> <span class="token function-variable function">getDryBeachEquipInfoList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"username"</span><span class="token operator">:</span> <span class="token string">"zjwkk"</span><span class="token punctuation">,</span>        <span class="token string">"message"</span><span class="token operator">:</span> <span class="token function">Encrypt</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"tailingno"</span><span class="token operator">:</span> obj<span class="token punctuation">.</span>tailingno<span class="token punctuation">,</span>            <span class="token string">"currentpage"</span><span class="token operator">:</span> obj<span class="token punctuation">.</span>currentpage<span class="token punctuation">,</span>            <span class="token string">"pagesize"</span><span class="token operator">:</span> obj<span class="token punctuation">.</span>pagesize<span class="token punctuation">,</span>            <span class="token string">"datetime"</span><span class="token operator">:</span> obj<span class="token punctuation">.</span>datetime        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/api/Tailings/DryBeachEquipInfo/GetDryBeachEquipInfoList"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">100000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">reject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过以上的方法可以吧对应类型的图标放上去主要还是使用的是我们公司封装的Xt.IconLayer</p><p><strong>2.全屏</strong></p><p>首先在全屏图标上绑定方法</p><p><img src="/record-blog/2021/02/13/20200806/image-20200807091912511.png" alt="image-20200807091912511"></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">screenChange</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 取值17是为了处理页面内容出现滚动条的情况</span>  <span class="token keyword">let</span> isFull <span class="token operator">=</span> window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height <span class="token operator">-</span> window<span class="token punctuation">.</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">&lt;=</span> <span class="token number">17</span><span class="token punctuation">;</span>  <span class="token comment">// 阻止F11键默认事件，用HTML5全屏API代替</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keydown'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">122</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isFull<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">enterFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//监听窗口变化</span>  window<span class="token punctuation">.</span><span class="token function-variable function">onresize</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    isFull <span class="token operator">=</span> window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height <span class="token operator">-</span> window<span class="token punctuation">.</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">&lt;=</span> <span class="token number">98</span><span class="token punctuation">;</span>    <span class="token function">screenChange</span><span class="token punctuation">(</span>isFull<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//进入全屏</span><span class="token keyword">const</span> <span class="token function-variable function">enterFullScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>  <span class="token keyword">let</span> rfs <span class="token operator">=</span> el<span class="token punctuation">.</span>requestFullScreen <span class="token operator">||</span> el<span class="token punctuation">.</span>webkitRequestFullScreen <span class="token operator">||</span> el<span class="token punctuation">.</span>mozRequestFullScreen <span class="token operator">||</span> el<span class="token punctuation">.</span>msRequestFullscreen  <span class="token keyword">if</span> <span class="token punctuation">(</span>rfs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// typeof rfs != "undefined" &amp;&amp; rfs</span>    <span class="token function">rfs</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window<span class="token punctuation">.</span>ActiveXObject <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// for IE，这里其实就是模拟了按下键盘的F11，使浏览器全屏</span>    <span class="token keyword">let</span> wscript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">'WScript.Shell'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//eslint-disable-line</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wscript <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      wscript<span class="token punctuation">.</span><span class="token function">SendKeys</span><span class="token punctuation">(</span><span class="token string">'&#123;F11&#125;'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 退出全屏</span><span class="token keyword">const</span> <span class="token function-variable function">exitFullScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">;</span>  <span class="token keyword">let</span> cfs <span class="token operator">=</span> el<span class="token punctuation">.</span>cancelFullScreen <span class="token operator">||</span> el<span class="token punctuation">.</span>mozCancelFullScreen <span class="token operator">||</span> el<span class="token punctuation">.</span>msExitFullscreen <span class="token operator">||</span> el<span class="token punctuation">.</span>webkitExitFullscreen <span class="token operator">||</span> el<span class="token punctuation">.</span>exitFullscreen<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cfs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// typeof cfs != "undefined" &amp;&amp; cfs</span>    <span class="token function">cfs</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window<span class="token punctuation">.</span>ActiveXObject <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// for IE，这里和fullScreen相同，模拟按下F11键退出全屏</span>    <span class="token keyword">let</span> wscript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">'WScript.Shell'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//eslint-disable-line</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wscript <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      wscript<span class="token punctuation">.</span><span class="token function">SendKeys</span><span class="token punctuation">(</span><span class="token string">'&#123;F11&#125;'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  init<span class="token punctuation">,</span>  enterFullScreen<span class="token punctuation">,</span>  exitFullScreen<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.白色弹框随着拖动页面而移动</strong></p><p>之前我一位和普通的拖动是一样的，比如mouseenter,mousemove之类，但是我写了之后失效了，因为这是三维的没有效果，要在这个封装的earth里面去使用对应的方法才会生效,主要是这段代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> earth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Xt<span class="token punctuation">.</span>Earth</span><span class="token punctuation">(</span><span class="token string">'earthContainer'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            destination<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">30.2149454</span><span class="token punctuation">,</span> <span class="token number">1e3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//相机初始化位置</span>            orientation<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//相机初始化方向</span>            globeColor<span class="token operator">:</span> <span class="token string">'#1C1C1C'</span><span class="token punctuation">,</span>            backgroundColor<span class="token operator">:</span> <span class="token string">'#1C1C1C'</span><span class="token punctuation">,</span>            terrain<span class="token operator">:</span> <span class="token string">'http://47.94.231.113:10086/terrain'</span><span class="token punctuation">,</span> <span class="token comment">//是否开启地形</span>            operationMode<span class="token operator">:</span> Xt<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span>OperationMode<span class="token punctuation">.</span><span class="token constant">NORMAL</span><span class="token punctuation">,</span>            sceneMode<span class="token operator">:</span> Xt<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span>SceneMode<span class="token punctuation">.</span><span class="token constant">SCENE3D</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> key <span class="token operator">=</span> earth<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>                        Xt<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span>RenderEvent<span class="token punctuation">.</span><span class="token constant">POST_RENDER</span><span class="token punctuation">,</span> <span class="token comment">//渲染事件</span>                        <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                            mappanel<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">updatePostion</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>screenCoordinate<span class="token punctuation">)</span> <span class="token comment">//updatePostion是子组件获取的方法，e.screenCoordinate是我点击的屏幕坐标</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                        <span class="token punctuation">&#123;</span>                            target<span class="token operator">:</span> Xt<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span>RenderEventTarget<span class="token punctuation">.</span><span class="token constant">COORDINATE_TRANSFORM</span><span class="token punctuation">,</span> <span class="token comment">//目标事件</span>                            params<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                                position<span class="token operator">:</span> r<span class="token punctuation">.</span>coordinate<span class="token punctuation">,</span> <span class="token comment">//我们把position传给我们的弹框组件</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">&#x2F;&#x2F;弹框组件代码，就可以吧x和y赋值给弹框的left和topuseImperativeHandle(cRef, () &#x3D;&gt; (&#123;   updatePostion (position) &#123;     setInitialPos(&#123; x: position[0], y: position[1] &#125;)   &#125; &#125;));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.video</strong></p><p>这里视屏播放我是用的videojs插件,使用他的时候src第一次是不能为空的就是不能是undefined或者null因为就算动态的改变的src后面也会不生效，所以把判断放在父组件就可以，判断这个videoInfo是否有信息</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">const VideoFrequency &#x3D; (props) &#x3D;&gt; &#123;  let &#123; videoInfo, isShow &#125; &#x3D; props  useEffect(() &#x3D;&gt; &#123;    var myVideo &#x3D; videojs(&#39;myVideo&#39;, &#123;      sources: [&#123;        src: videoInfo.hdaddress,        type: &#39;application&#x2F;x-mpegURL&#39;      &#125;]    &#125;)    myVideo.play()  &#125;, [videoInfo])  return (    &lt;div className&#x3D;&quot;outerBox&quot; style&#x3D;&#123;&#123; display: isShow ? &#39;block&#39; : &#39;none&#39; &#125;&#125; &gt;      &lt;h4 style&#x3D;&#123;&#123; margin: &#39;0px&#39; &#125;&#125;&gt;钼铁矿坝顶视频&lt;&#x2F;h4&gt;      &lt;video        id&#x3D;&quot;myVideo&quot;        className&#x3D;&quot;video-js vjs-default-skin vjs-big-play-centered&quot;        controls        preload&#x3D;&quot;auto&quot;        poster&#x3D;&#39;&#39;        width&#x3D;&quot;340&quot;        height&#x3D;&quot;264&quot;        data-setup&#x3D;&quot;&#123;&#125;&quot;      &gt;      &lt;&#x2F;video&gt;    &lt;&#x2F;div&gt;  )&#125;export default VideoFrequency<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一些使用方法(能用css解决就可以不用js)</p><h5 id="暂停时显示播放按钮"><a href="#暂停时显示播放按钮" class="headerlink" title="暂停时显示播放按钮"></a>暂停时显示播放按钮</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.vjs-paused .vjs-big-play-button,.vjs-paused.vjs-has-started .vjs-big-play-button</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="点击屏幕播放-暂停"><a href="#点击屏幕播放-暂停" class="headerlink" title="点击屏幕播放/暂停"></a>点击屏幕播放/暂停</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.video-js.vjs-playing .vjs-tech</span> <span class="token punctuation">&#123;</span>    <span class="token property">pointer-events</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="进度显示当前播放时间"><a href="#进度显示当前播放时间" class="headerlink" title="进度显示当前播放时间"></a>进度显示当前播放时间</h5><p>video.js 默认倒序显示时间，也就是视频播放的剩余时间。</p><p>要显示当前的播放时间，以及总共视频时长，加2行CSS解决：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.video-js .vjs-time-control</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.video-js .vjs-remaining-time</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="修改-node-modules-里的文件"><a href="#修改-node-modules-里的文件" class="headerlink" title="修改 node_modules 里的文件"></a>修改 node_modules 里的文件</h5><p><a href="https://juejin.im/post/6844904163558555662">https://juejin.im/post/6844904163558555662</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年7月29日(react hooks的良心好文)</title>
      <link href="/record-blog/2021/02/13/20200729/"/>
      <url>/record-blog/2021/02/13/20200729/</url>
      
        <content type="html"><![CDATA[<h3 id="关于react-hooks的良心好文"><a href="#关于react-hooks的良心好文" class="headerlink" title="关于react hooks的良心好文"></a>关于react hooks的良心好文</h3><h4 id="1-官方文档"><a href="#1-官方文档" class="headerlink" title="1. 官方文档"></a>1. 官方文档</h4><p><a href="https://reactjs.org/docs/hooks-intro.html">https://reactjs.org/docs/hooks-intro.html</a></p><h4 id="2-文章"><a href="#2-文章" class="headerlink" title="2. 文章"></a>2. 文章</h4><p><a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/">useEffect 完整指南</a></p><p><a href="https://segmentfault.com/a/1190000018928587">React Hooks 解析（上）：基础</a></p><p><a href="https://segmentfault.com/a/1190000018950566">React Hooks 解析（下）：进阶</a></p><p><a href="https://zhuanlan.zhihu.com/p/92211533">React Hooks完全上手指南</a></p><p><a href="https://link.zhihu.com/?target=https://github.com/brickspert/blog/issues/26">React Hooks 原理</a></p><p>[精读《Function Component 入门》](<a href="https://github.com/dt-fe/weekly/blob/v2/104.%E7%B2%BE%E8%AF%BB%E3%80%8AFunction">https://github.com/dt-fe/weekly/blob/v2/104.精读《Function</a> Component 入门》.md)</p><p><a href="https://pomb.us/build-your-own-react/">《xx行代码带你实现迷你React》</a></p><h4 id="3-工具"><a href="#3-工具" class="headerlink" title="3. 工具"></a>3. 工具</h4><p><a href="https://www.npmjs.com/package/eslint-plugin-react-hooks">代码规范 eslint-plugin-react-hooks</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=antmdvs.vscode-react-hooks-snippets">React Hooks Snippets for VS Code</a></p><h4 id="4-优秀项目-可以引入"><a href="#4-优秀项目-可以引入" class="headerlink" title="4. 优秀项目(可以引入)"></a>4. 优秀项目(可以引入)</h4><p>阿里React-Hooks集合<a href="https://github.com/alibaba/hooks">ahooks</a></p><p>开源有用的hooks集合<a href="https://usehooks.com/">useHooks</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年7月29日（typescript基础)</title>
      <link href="/record-blog/2021/02/13/20200728/"/>
      <url>/record-blog/2021/02/13/20200728/</url>
      
        <content type="html"><![CDATA[<h3 id="一、TypeScript-是什么"><a href="#一、TypeScript-是什么" class="headerlink" title="一、TypeScript 是什么"></a>一、TypeScript 是什么</h3><p><a href="https://www.typescriptlang.org/">TypeScript</a> 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。</p><h4 id="TypeScript-与-JavaScript-的区别"><a href="#TypeScript-与-JavaScript-的区别" class="headerlink" title="TypeScript 与 JavaScript 的区别"></a>TypeScript 与 JavaScript 的区别</h4><table><thead><tr><th align="center">TypeScript</th><th align="center">JavaScript</th></tr></thead><tbody><tr><td align="center">JavaScript 的超集用于解决大型项目的代码复杂性</td><td align="center">一种脚本语言，用于创建动态网页。</td></tr><tr><td align="center">可以在编译期间发现并纠正错误</td><td align="center">作为一种解释型语言，只能在运行时发现错误</td></tr><tr><td align="center">强类型，支持静态和动态类型</td><td align="center">弱类型，没有静态类型选项</td></tr><tr><td align="center">最终被编译成 JavaScript 代码，使浏览器可以理解</td><td align="center">可以直接在浏览器中使用</td></tr><tr><td align="center">支持模块、泛型和接口</td><td align="center">不支持模块，泛型或接口</td></tr><tr><td align="center">支持 ES3，ES4，ES5 和 ES6 等</td><td align="center">不支持编译其他 ES3，ES4，ES5 或 ES6 功能</td></tr><tr><td align="center">社区的支持仍在增长，而且还不是很大</td><td align="center">大量的社区支持以及大量文档和解决问题的支持</td></tr></tbody></table><p>1.<strong>安装typescript</strong></p><p><code>yarn global add typescript</code></p><p><img src="/record-blog/2021/02/13/20200728/image-20200729202608107.png" alt="image-20200729202608107"></p><p>如果要编译 TypeScript 文件可以使用命令<code>tsc 1.ts</code>,但是我每一次想要运行还需要在控制台输入tsc xxx.ts，很麻烦，可以在当前文件夹使用<code>tsc --init</code>生成<code>tsconfig.json</code>,文件，安照你的需求配置，比如，我把编译之后的js文件放在了根目录js文件夹的下面<img src="/record-blog/2021/02/13/20200728/image-20200729202901348.png" alt="image-20200729202901348"></p><p>点击终端-&gt;运行任务-&gt;tsc监视就OK了<img src="/record-blog/2021/02/13/20200728/image-20200729203022885.png" alt="image-20200729203022885"><br>也可以直接全局安装ts-node<code>npm install ts-node -g</code></p><p>关于ts的基本内容我就不说了，毕竟微软出的东西文档都是写得非常好:grin:,可以看<a href="https://www.tslang.cn/docs/home.html">https://www.tslang.cn/docs/home.html</a></p><p>在网上copy了一个小案例，来看看他的目录结构吧</p><p><img src="/record-blog/2021/02/13/20200728/image-20200729204402109.png" alt="image-20200729204402109"></p><p>当我看见这个目录的第一个感觉就是@types这个文件夹，因为我也在<code>node_modules</code>里面见到过@types,后来百度之后知道</p><p><b>@types是npm的一个分支，我们把npm包发上去，npm包就会托管到服务器，供大家下载！但是ts为了代码的可复用性，要申明一些静态类型文件，其次，我们把代码push上去的时候，往往有2种方式，一种是把*.d.ts文件push到npm，这种我们只要下载即可，另外一种是我们没有及时把*.d.ts文件push到npm，这个时候我们为了保证能使用从npm下载的ts，我们就必须往@types这个分支上push对应的*.d.ts文件，然后按照npm install -s @types/*** 下载，然后使用，达到一次申明多次使用的目的,当然,我们也可以本地自己写ts文件申明，自己使用，不需要上传上去</b></p><h4 id="案例展示"><a href="#案例展示" class="headerlink" title="案例展示"></a>案例展示</h4><p><img src="/record-blog/2021/02/13/20200728/image-20200729204950985.png" alt="image-20200729204950985"></p><p>在输入框输入内容，点击add按钮在下方出现对应内容的列表</p><h4 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h4><p><img src="/record-blog/2021/02/13/20200728/image-20200729205155283.png" alt="image-20200729205155283"></p><p>发现使用的都是类型别名，没有使用interface,那他们有什么区别吗？</p><p>interface VS type</p><ul><li><p>相同点</p><ul><li><p>都可以描述一个对象或者函数</p></li><li><p>都允许拓展</p><ul><li><p>interface extends interface</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">interface Name &#123;   name: string; &#125;interface User extends Name &#123;   age: number; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><pre><code>- type 与 type 相交  <pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">type Name &#x3D; &#123;   name: string; &#125;type User &#x3D; Name &amp; &#123; age: number  &#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>- interface extends type  <pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">type Name &#x3D; &#123;   name: string; &#125;interface User extends Name &#123;   age: number; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>- type 与 interface 相交  <pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">interface Name &#123;   name: string; &#125;type User &#x3D; Name &amp; &#123;   age: number; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><ul><li><p>不同点</p><ul><li><p>type 可以声明基本类型别名，联合类型，元组等类型</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">&#x2F;&#x2F; 基本类型别名type Name &#x3D; string&#x2F;&#x2F; 联合类型interface Dog &#123;    wong();&#125;interface Cat &#123;    miao();&#125;type Pet &#x3D; Dog | Cat&#x2F;&#x2F; 具体定义数组每个位置的类型type PetList &#x3D; [Dog, Pet]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>type 语句中还可以使用 typeof 获取实例的 类型进行赋值</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">&#x2F;&#x2F; 当你想获取一个变量的类型时，使用 typeoflet div &#x3D; document.createElement(&#39;div&#39;);type B &#x3D; typeof div<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>interface会创建一个新的类型名称，并且可以在任何地方使用。但是type没有，它只是一个引用，并没有创建一个新的类型实例。</p></li></ul></li></ul><p>在老版本的typescript中，类型别名是不支持extended或者implemented（也不支持从其他类型别名extend/implement）</p><p>在2.7版本后，类型别名可以通过交叉类型实现extend。例如<code>type Cat = Animal &amp; &#123; purrs: true &#125;</code></p><p>根据软件的<a href="https://en.wikipedia.org/wiki/Open/closed_principle">开闭原则</a>, 你应该尽可能的使用interface代替type alias。</p><p><img src="/record-blog/2021/02/13/20200728/image-20200729210632552.png" alt="image-20200729210632552"></p><p>先从app.tsx文件开始看</p><p>可以分为两部分</p><p><img src="/record-blog/2021/02/13/20200728/image-20200730194245471.png" alt="image-20200730194245471"></p><p>其中mapState获取状态，mapDispatch获取方法</p><p><img src="/record-blog/2021/02/13/20200728/image-20200730194626813.png" alt="image-20200730194626813"></p><p>getMapDispatch的方法如下,具体说的是<code>keyof</code>，keyof操作符可以用于获取某种类型的所有键,其返回类型是联合类型。</p><p>首先定义了 T 类型并使用 extends 关键字约束该类型必须是 Actions 类型的子类型，然后使用 keyof 操作符获取 T 类型的所有键，其返回类型是联合类型，最后利用 extends 关键字约束 K类型必须为 keyof T 联合类型的子类型。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">export const getMapDispatch &#x3D; &lt;T extends Actions, K extends keyof T&gt;(    actions: T,    keys: K[]): MapDispatch&lt;ActionsProps&lt;Pick&lt;T, K&gt;&gt;&gt; &#x3D;&gt; dispatch &#x3D;&gt;        mapObject(pickObject(actions, keys), (_, value) &#x3D;&gt; (...args: any) &#x3D;&gt; dispatch(value(...args)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回mapDispatch<code>typeof</code> 操作符可以获取对象的结构类型</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">type ActionProps &#x3D; ReturnType&lt;typeof mapDispatch&gt;type StateProps &#x3D; &#123; todos: Todo[] &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/record-blog/2021/02/13/20200728/image-20200730195256889.png" alt="image-20200730195256889"></p><p>有了泛型，我们可以更加具体地描述一个不确定的类型。与any相比，泛型更具有约束力<img src="/record-blog/2021/02/13/20200728/image-20200730195346756.png" alt="image-20200730195346756"></p><p><img src="/record-blog/2021/02/13/20200728/image-20200730195612012.png" alt="image-20200730195612012"></p><p>TodoForm和TodoList组件</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">type TodoListProps &#x3D; &#123; onToggle: F1&lt;Todo&gt;; onRemove: F1&lt;Todo&gt;; todos: Todo[] &#125;export const TodoList: React.FC&lt;TodoListProps&gt; &#x3D; p &#x3D;&gt; (    &lt;ul&gt;        &#123;p.todos.map(t &#x3D;&gt; (            &lt;li key&#x3D;&#123;t.uuid&#125;&gt;                &lt;Todo &#123;...t&#125; onClick&#x3D;&#123;() &#x3D;&gt; p.onToggle(t)&#125; &#x2F;&gt;                &lt;button onClick&#x3D;&#123;() &#x3D;&gt; p.onRemove(t)&#125;&gt;remove&lt;&#x2F;button&gt;            &lt;&#x2F;li&gt;        ))&#125;    &lt;&#x2F;ul&gt;)type TodoFormProps &#x3D; &#123; onAddSubmit: (text: string) &#x3D;&gt; void &#125;export const TodoForm: React.FC&lt;TodoFormProps&gt; &#x3D; p &#x3D;&gt; &#123;    const [text, setText] &#x3D; React.useState(&quot;&quot;)    const submit &#x3D; () &#x3D;&gt; &#123;        p.onAddSubmit(text)        setText(&quot;&quot;)    &#125;    return (        &lt;&gt;            &lt;input type&#x3D;&quot;text&quot; value&#x3D;&#123;text&#125; onChange&#x3D;&#123;e &#x3D;&gt; setText((e.target.value || &quot;&quot;).trim())&#125; &#x2F;&gt;            &lt;button onClick&#x3D;&#123;submit&#125;&gt;Add&lt;&#x2F;button&gt;        &lt;&#x2F;&gt;    )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是核心代码，他有的代码写的我并没有怎么看懂，毕竟能力有限:sob:,发现他这里的ts文件都会有一个d.ts</p><p><img src="/record-blog/2021/02/13/20200728/image-20200730200007325.png" alt="image-20200730200007325"></p><p>因为ts最后会编译成 的 js 代码，供他人使用。这个时候，类型信息就丢失了。所以 ts 编译器会自动根据 中的信息，生成对外的 .d.ts文件，和生成的 js 文件搭配使用。其中，js 文件是给运行引擎用的，而 .d.ts文件是给 IDE（智能编辑器）写代码时参考用的。另一种情况是，你的代码不是用 ts 写的，只是希望最后给别人用时能有类型信息作为辅助，那么这种情况下的 .d.ts文件就需要你手写了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年7月24日(code editor)</title>
      <link href="/record-blog/2021/02/13/20200724/"/>
      <url>/record-blog/2021/02/13/20200724/</url>
      
        <content type="html"><![CDATA[<p>上一篇写的是react-monaco-editor的使用，当时写的是json格式，仅仅修改了几个属性，并没有把全部的代码都进行操作，因为当时也有想过操作全部的代码，但是一个字符串又怎么能当方法使用呢，但是老板说，我们要写全部的代码，别人复制我们的代码之后可以直接用的那种:smirk:</p><p>当时有想过用eval直接转成方法执行，可是不知道是不是识别不了react hook的语法还是什么，抱了语法错误，于是就放弃了这个方法，我又找到了另一个组件<code>react-simple-code-editor</code>,这个组件提供了方法，我可以直接使用字符串转对象了因为他用到了<code>babel</code></p><p><img src="/record-blog/2021/02/13/20200724/image-20200724203120260.png" alt="image-20200724203120260"></p><p>这下觉得我离成功不远了，就在写到之后的时候，我又绝望了，因为他封装的组件其实也是依赖于另一个组件，他就做了一个二次封装，只提供了onchange的方法，也就是实时改变，可是不是我们的需求，之前在react-monaco-editor里面我有改过源码，觉得一个方法不难改，于是我改了，在源码里加了这么一段代码</p><p><img src="/record-blog/2021/02/13/20200724/image-20200724203435027.png" alt="image-20200724203435027"></p><p>心想这次可以了，的确光标离开他才触发code的改变，可是我编辑框里面的内容有没有实时更新，绝望呀，感觉他这个设计非常不合理，作为一个编辑框，非要使用onchange事件触发，我的编辑框内容才会发生改变，难道不应该是默认的吗，但是他的原理是这样的</p><p><img src="/record-blog/2021/02/13/20200724/image-20200724203831295.png" alt="image-20200724203831295"></p><p>在这里传入一个方法onValueChange然后调用_handleChange把code以回调的形式传给我，在触发dispatch传给我上面图片右边的部分，也就是我接受code的部分，code在通过转化</p><p><img src="/record-blog/2021/02/13/20200724/image-20200724203908482.png" alt="image-20200724203908482"></p><p>但是每次想要编辑框里面的内容实时更新，页面也会实时刷新，这并不是我想要的效果，所以要把这两个事件分开单独操作互不影响，源码如下</p><p><img src="/record-blog/2021/02/13/20200724/image-20200724204415932.png" alt="image-20200724204415932"></p><p><img src="/record-blog/2021/02/13/20200724/image-20200724204428606.png" alt="image-20200724204428606"></p><p>他以写实，必须页面渲染，我的编辑框才更新，你说气不气，就好比做数学题，每次觉得答案要出来了，后来发现无解的感觉:cry:</p><p>于是我在绝望中寻找新的方法，突然意识到我可以把这两个编辑器的优点合起来呀，第一个编辑器，我可以自己修改事件，第二个编辑器我可以将字符串转化，于是我又换回了<code>react-monaco-eiditor</code></p><p><img src="/record-blog/2021/02/13/20200724/image-20200724204818287.png" alt="image-20200724204818287"></p><p>有了最后的效果图</p><p><img src="/record-blog/2021/02/13/20200724/201106_6a68a980_5266997.png" alt="image-20200724204912358"></p><p>终于成功了，属实不赖，不过现在还没有高亮提示，需要配置，现在去看看<br>配置之后<br><img src="/record-blog/2021/02/13/20200724/1.png" alt="最后效果"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年7月18日(react-monaco-editor)</title>
      <link href="/record-blog/2021/02/13/20200718/"/>
      <url>/record-blog/2021/02/13/20200718/</url>
      
        <content type="html"><![CDATA[<p>有可能老板看我这两天比较闲，让我仿照thing.js写一个在web页面更改代码，页面内容实时更新的功能，于是f12将thing.js的控制台打开看看到底用了什么组件</p><p><img src="/record-blog/2021/02/13/20200718/image-20200718205649186.png" alt="image-20200718205649186"></p><p>看到了monaco-editor,于是用到了react-monaco-editor这个组件，心想不就是一个组件吗，应该很容易把，照着api写应该问题不大，结果我现在用了一次再也不想用第二次了:slightly_smiling_face:,封装不够全面，用起来也并没有感觉很方便</p><p><img src="/record-blog/2021/02/13/20200718/image-20200718210130403.png" alt="image-20200718210130403"></p><p>value就是需要操作的代码，因为我的需求是更改属性，页面改变。所以把需要更改的部分放到了value中</p><p><img src="/record-blog/2021/02/13/20200718/image-20200718210258424.png" alt="image-20200718210258424"></p><p>因为我在操作push方法的时候需要操作的是对象，但是我的code是模板字符串呀，刚开始觉得怎么把模板字符串的符号去掉，然后正则写了没啥作用，于是换了一种方法，我写成json类型然后JSON.parse序列化一下不就行了:sweat_smile:</p><p>还有react-monaco-editor的样式问题，可以看到第二张图，直接写了width和height于是刚开始觉得其他属性应该也可以这么写，或者写个style总可以吧，后来都没有效果，于是看了他的源码</p><p><img src="/record-blog/2021/02/13/20200718/image-20200718210921343.png" alt="image-20200718210921343"></p><p>发现他只是对width和height做了封装，需要写个类名来定义样式</p><p>在完成初步操作之后需要做一下配置，这样才会有提示信息</p><p><img src="/record-blog/2021/02/13/20200718/image-20200718211321850.png" alt="image-20200718211321850"></p><p>这样就有提示信息了，通过他定义的onchange方法可以拿到更新的内容，可是他定义的是实时的，就是我没修改一个字母他都会打印，显然这不是我想要的，我需要的是修改好了之后的内容，于是发现他压根就没有定义其他的事件了</p><p><img src="/record-blog/2021/02/13/20200718/image-20200718211552966.png" alt="image-20200718211552966"></p><p>发现他使用了monaco-eidtior，于是搜了一下他有那些方法，发现了onDidBlurEditorText，但是这个react-monaco-editor压根没写，于是自己改了他的代码</p><p><img src="/record-blog/2021/02/13/20200718/image-20200718211908103.png" alt="image-20200718211908103"></p><p><img src="/record-blog/2021/02/13/20200718/image-20200718212032350.png" alt="image-20200718212032350"></p><p>然后在定义对应的时间获取对应的代码，最后赋值，就可以了</p><p><img src="/record-blog/2021/02/13/20200718/image-20200718212210927.png" alt="image-20200718212210927"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年7月15日（event loop)</title>
      <link href="/record-blog/2021/02/13/20200715/"/>
      <url>/record-blog/2021/02/13/20200715/</url>
      
        <content type="html"><![CDATA[<p>先看一段代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出2,6,5,3,4,1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体原因呢？</p><p><strong>从promise、process.nextTick、setTimeout出发，谈谈Event Loop中的任务队列</strong></p><p>event loop，是指主线程从“任务队列”中循环读取任务</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//例1：</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//打印2,1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当主线程任务执行完毕后，再从event loop中读取任务，因此先输出2，再输出1。</p><h4 id="任务队列的执行顺序"><a href="#任务队列的执行顺序" class="headerlink" title="任务队列的执行顺序"></a>任务队列的执行顺序</h4><p>任务队列分为两种类型，宏任务和微任务</p><p>宏任务队列包含任务: <strong><em>a1, a2 , a3</em></strong><br>微任务队列包含任务: <strong><em>b1, b2 , b3</em></strong></p><p>执行顺序为，首先执行宏任务队列开头的任务，也就是 <strong><em>a1</em></strong> 任务，执行完毕后，在执行微任务队列里的所有任务，也就是依次执行**<em>b1, b2 , b3**</em>，执行完后清空微任务队中的任务，接着执行宏任务队中的第二个任务，依次循环</p><p><img src="/record-blog/2021/02/13/20200715/7515749-2e1fcbed128544cb.webp" alt="7515749-2e1fcbed128544cb"></p><p>宏任务有：</p><ul><li>setTimeout</li><li>setInterval</li><li>setImmediate</li><li>requestAnimationFrame</li><li>I/O</li></ul><p>微任务</p><ul><li>process.nextTick</li><li>pormise.then</li><li>Object.observe</li></ul><p>执行顺序应该为:</p><p><strong><em>script(主程序代码)—&gt;process.nextTick—&gt;Promises…——&gt;setTimeout——&gt;setInterval——&gt;setImmediate——&gt; I/O——&gt;UI rendering</em></strong></p><p><a href="https://www.lisa33xiaoq.net/tag/process-nexttick">process.nextTick</a>() 是 Node 的一个定时器，让任务可以在指定的时间运行。其中 Node 一共提供了 4 个定时器，它们分别是 setTimeout()、setInterval()、setImmediate()、<a href="https://www.lisa33xiaoq.net/tag/process-nexttick">process.nextTick</a>()</p><p>process.nextTick它是在本轮循环执行的，而且是所有异步任务里面最快执行的。</p><h5 id="1-setTimeout和promise"><a href="#1-setTimeout和promise" class="headerlink" title="(1) setTimeout和promise"></a>(1) setTimeout和promise</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//例3:</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>script(主程序代码)——&gt;promise——&gt;setTimeout</em></strong><br>对应的输出依次为：1 ——&gt;2——&gt;3</p><h5 id="2-process-nextTick和promise、setTimeout"><a href="#2-process-nextTick和promise、setTimeout" class="headerlink" title="(2) process.nextTick和promise、setTimeout"></a>(2) process.nextTick和promise、setTimeout</h5><pre class="line-numbers language-none"><code class="language-none">例子4：setTimeout(function()&#123;console.log(1)&#125;,0);new Promise(function(resolve,reject)&#123;   console.log(2);   resolve();&#125;).then(function()&#123;console.log(3)&#125;).then(function()&#123;console.log(4)&#125;);process.nextTick(function()&#123;console.log(5)&#125;);console.log(6);&#x2F;&#x2F;输出2,6,5,3,4,1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>promise构造部分是同步执行的</strong></p><p>执行顺序：</p><p><strong><em>script(主程序代码)——&gt;process.nextTick——&gt;promise——&gt;setTimeout</em></strong></p><p>合的执行顺序就是： 2——&gt;6——&gt;5——&gt;3——&gt;4——&gt;1</p><p>接下来例子</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出的是  2 6 5 1 3 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟上面的例子不一样因为promise中没有同步的resolve，所以promise.then在当前的执行队列中是不存在的，只有promise从pending转移到resolve，才会有then方法，而这个resolve是在一个setTimout时间中完成的，因此3,4最后输出。</p><p><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html">阮一峰 event loop</a></p><p><a href="http://www.ruanyifeng.com/blog/2018/02/node-event-loop.html">阮一峰 Node定时器</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年7月14（cesium)</title>
      <link href="/record-blog/2021/02/13/20200714/"/>
      <url>/record-blog/2021/02/13/20200714/</url>
      
        <content type="html"><![CDATA[<p><strong>CesiumJS是一个开源JavaScript库，用于创建具有最佳性能，精度，视觉质量和易用性的世界一流的3D地球和地图。从航空航天到智慧城市再到无人机，各行各业的开发人员都使用CesiumJS创建用于共享动态地理空间数据的交互式Web应用程序</strong></p><!-- 由于我们公司仿照的是这个网站 http://cesium.marsgis.cn/examples.html#feature-feature-arcgis所以我们把echarts和cesiumjs做了一个结合封装成了我们自己的一个npm包，目前前端页面已经基本完善，案例内容也是封装了将近四十个 --><p><img src="/record-blog/2021/02/13/20200714/image-20200714155215684.png" alt="image-20200714155215684"></p><p>可以看到这里的地图有很多种，我们也是抽取了其中比较有代表性的几个案例，可以下载<code>cesiumlab2</code>这个软件，来帮助我们完成，点击影像-&gt;在线-&gt;获取服务地址</p><p><img src="/record-blog/2021/02/13/20200714/image-20200714155444188.png" alt="image-20200714155444188"></p><p>获取这个地址之后使用我们自己封装的插件</p><pre class="line-numbers language-none"><code class="language-none">useEffect(() &#x3D;&gt; &#123;    const earth &#x3D; new Xt.Earth(&#39;earthContainer&#39;, &#123;      destination: [120, 30, 17400000], &#x2F;&#x2F;相机初始化位置      orientation: [0, -90, 0], &#x2F;&#x2F;相机初始化方向      globeColor: &#39;#1C1C1C&#39;,      backgroundColor: &#39;#1C1C1C&#39;,      operationMode: Xt.Enum.OperationMode.NORMAL,      sceneMode: Xt.Enum.SceneMode.SCENE3D    &#125;)    setEarth(earth)    const imagery &#x3D; new Xt.ImageryLayer(&#123;      imagery: &#123;        type: Xt.Enum.ImageryType.URL_TEMPLATE,        url: &#39;http:&#x2F;&#x2F;www.google.cn&#x2F;maps&#x2F;vt?lyrs&#x3D;m&amp;gl&#x3D;CN&amp;x&#x3D;&#123;x&#125;&amp;y&#x3D;&#123;y&#125;&amp;z&#x3D;&#123;z&#125;&#39;,        minimumLevel: 0,        maximumLevel: 20      &#125;    &#125;)    earth.sceneTree.add(imagery);  &#125;, []);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然谷歌地图有很多种，比如谷歌电子，谷歌影像，谷歌影像标注等等，所以目前我是写的一个下拉框如图所示</p><p><img src="/record-blog/2021/02/13/20200714/image-20200714155909788.png" alt="image-20200714155909788"></p><p>使用react-dat-gui组件的DatSelect方法</p><p><img src="/record-blog/2021/02/13/20200714/image-20200714155950853.png" alt="image-20200714155950853"></p><p>可以看到我obj对象里面的value部分是一个变量，对应的就是我需要加载的地图类型</p><p>代码如下</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">&#x2F;&#x2F;1.通过使用指定的URL模板请求图像,google地图    const googleElectronic &#x3D; new Xt.ImageryLayer(&#123;      imagery: &#123;        type: Xt.Enum.ImageryType.URL_TEMPLATE,        url: &#39;http:&#x2F;&#x2F;www.google.cn&#x2F;maps&#x2F;vt?lyrs&#x3D;m&amp;gl&#x3D;CN&amp;x&#x3D;&#123;x&#125;&amp;y&#x3D;&#123;y&#125;&amp;z&#x3D;&#123;z&#125;&#39;,      &#125;,      initialConfiguration    &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之前自己对于DatSelect的用法一直都是这么用，后来发现没必要这么麻烦，因为DatSelect为我们封装了方法</p><p><img src="/record-blog/2021/02/13/20200714/image-20200714160338964.png" alt="image-20200714160338964"></p><p>可以从源码中看到，我们可以通过传入optionLables，在根据索引获取到对应的值，于是可以这样写</p><p><img src="/record-blog/2021/02/13/20200714/image-20200714160545010.png" alt="image-20200714160545010"></p><p>在使用天地图的时候要注意，现在使用所有的天地图都需要token，可以自己注册，也可以在api上面注册<a href="http://lbs.tianditu.gov.cn/server/MapService.html">http://lbs.tianditu.gov.cn/server/MapService.html</a></p><p>但是请求的网址最好还是不要看这个api，因为我试过都不可以，大概应该是这种格式</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">const imagery &#x3D; new Xt.ImageryLayer(&#123;      imagery: &#123;        type: Xt.Enum.ImageryType.WEB_MAP_TILE_SERVICE,        url: &quot;http:&#x2F;&#x2F;t0.tianditu.com&#x2F;img_w&#x2F;wmts?service&#x3D;wmts&amp;request&#x3D;GetTile&amp;version&#x3D;1.0.0&amp;LAYER&#x3D;img&amp;tileMatrixSet&#x3D;w&amp;TileMatrix&#x3D;&#123;TileMatrix&#125;&amp;TileRow&#x3D;&#123;TileRow&#125;&amp;TileCol&#x3D;&#123;TileCol&#125;&amp;style&#x3D;default&amp;format&#x3D;tiles&amp;tk&#x3D;d99d589f734f4e1ef4aeba30324575dc&quot;,      &#125;    &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2020年7月5号（react hook(一)）</title>
      <link href="/record-blog/2021/02/13/20200705/"/>
      <url>/record-blog/2021/02/13/20200705/</url>
      
        <content type="html"><![CDATA[<p>到目前为止学习和使用hook将近两个月的时间，在做项目的过程中也会遇到关于hook的很多坑，原因是对hook并没有很熟悉的掌握，所以今天打算总结一下关于hook的知识:v:</p><h4 id="useState"><a href="#useState" class="headerlink" title="useState()"></a><code>useState()</code></h4><p>模拟实现<br>1.React.useState() 里都做了些什么：<br>2.将初始值赋给一个变量我们称之为 state<br>3.返回这个变量 state 以及改变这个 state 的回调函数我们称之为 setState<br>4.当 setState() 被调用时， state 被其传入的新值重新赋值，并且更新视图</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function useState(initialState) &#123;  let _state &#x3D; initialState;  const setState &#x3D; (newState) &#x3D;&gt; &#123;    _state &#x3D; newState;    ReactDOM.render(&lt;App &#x2F;&gt;, rootElement);  &#125;;  return [_state, setState];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.每次更新时，函数组件会被重新调用，也就是说 useState() 会被重新调用，为了使 state 的新值被记录（而不是一直被重新赋上 initialState），需要将其提到外部作用域声明</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">let _state;function useState(initialState) &#123;   _state &#x3D; _state &#x3D;&#x3D;&#x3D; undefined ? initialState : _state;   const setState &#x3D; (newState) &#x3D;&gt; &#123;     _state &#x3D; newState;     ReactDOM.render(&lt;App &#x2F;&gt;, rootElement);   &#125;;   return [_state, setState];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.如果添加多个 useState(),将 _state 改成数组存储,让这个数组 _state 根据当前操作 useState() 的索引向内添加 state</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">let _state &#x3D; [], _index &#x3D; 0;function useState(initialState) &#123;  let curIndex &#x3D; _index; &#x2F;&#x2F; 记录当前操作的索引  _state[curIndex] &#x3D; _state[curIndex] &#x3D;&#x3D;&#x3D; undefined ? initialState : _state[curIndex];  const setState &#x3D; (newState) &#x3D;&gt; &#123;    _state[curIndex] &#x3D; newState;    ReactDOM.render(&lt;App &#x2F;&gt;, rootElement);    _index &#x3D; 0; &#x2F;&#x2F; 每更新一次都需要将_index归零，才不会不断重复增加_state  &#125;  _index +&#x3D; 1; &#x2F;&#x2F; 下一个操作的索引  return [_state[curIndex], setState];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而实际上， React 并不是真的是这样实现的。上面提到的 _state 其实对应 React 的 memoizedState ，而 _index 实际上是利用了链表。<br>React 16.8.0 正式增加了 Hooks ，它为函数组件引入了 state 的能力，换句话说就是使函数组件拥有了 Class 组件的功能。<br>React.useState() 返回的第二个参数 setState 用于更新 state ，并且会触发新的渲染。同时，在后续新的渲染中 React.useState() 返回的第一个 state 值始终是最新的。<br>为了保证 memoizedState 的顺序与 React.useState() 正确对应，我们需要保证 Hooks 在最顶层调用，也就是不能在循环、条件或嵌套函数中调用。<br>React.useState() 通过 Object.is() 来判断 memoizedState 是否需要更新。</p><p>每个组件有个对应的fiber节点（可以理解为虚拟DOM），用于保存组件相关信息。<br>每次FunctionComponent render时，全局变量currentlyRenderingFiber都会被赋值为该FunctionComponent对应的fiber节点。<br>所以，hook内部其实是从currentlyRenderingFiber中获取状态信息的。currentlyRenderingFiber.memoizedState中保存一条hook对应数据的单向链表。<br>当FunctionComponent render时，每执行到一个hook，都会将指向currentlyRenderingFiber.memoizedState链表的指针向后移动一次，指向当前hook对应数据。<br>这也是为什么React要求hook的调用顺序不能改变（不能在条件语句中使用hook） —— 每次render时都是从一条固定顺序的链表中获取hook对应数据的。<br>我们知道，useState返回值数组第二个参数为改变state的方法。<br>在源码中，他被称为dispatchAction。<br>每当调用dispatchAction，都会创建一个代表一次更新的对象update，如果是多次调用dispatchAction，那么，update会形成一条环状链表。</p><h4 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect()"></a><code>useEffect()</code></h4><p><code>useEffect</code>出现闭包的常见情况</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function WatchCount() &#123;    const [count, setCount] &#x3D; useState(0)    useEffect(function() &#123;        setInterval(function log() &#123;            console.log(&#96;Count is: $&#123;count&#125;&#96;)        &#125;, 2000)    &#125;, [])        return (      &lt;div&gt;      &#123;count&#125;      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCount(count + 1)&#125;&gt; 加1 &lt;&#x2F;button&gt;      &lt;&#x2F;div&gt;    )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当点击按钮是，可以在控制台看到,每两秒打印的count为0，因为在在第一渲染时，<code>log()</code>中闭包捕获<code>count</code>变量的值<code>0</code>。过后，即使<code>count</code>增加，<code>log()</code>中使用的仍然是初始化的值<code>0</code>。<code>log()</code>中的闭包是一个过时的闭包</p><p><strong>解决方法：让<code>useEffect()</code>知道log()中的闭包依赖于count:</strong></p><pre class="line-numbers language-none"><code class="language-none">function WatchCount() &#123;  const [count, setCount] &#x3D; useState(0);  useEffect(function() &#123;    const id &#x3D; setInterval(function log() &#123;      console.log(&#96;Count is: $&#123;count&#125;&#96;);    &#125;, 2000);    return function() &#123;      clearInterval(id);    &#125;  &#125;, [count]); &#x2F;&#x2F; 看这里，这行是重点，count变化后重新渲染useEffect  return (    &lt;div&gt;      &#123;count&#125;      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCount(count + 1) &#125;&gt;        Increase      &lt;&#x2F;button&gt;    &lt;&#x2F;div&gt;  );&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置依赖项后，一旦<code>count</code>更改，<code>useEffect()</code>就更新闭包。<strong>一定要永远对依赖项诚实</strong></p><h4 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a><code>useCallback</code></h4><p>产生误区的原因是<code>useCallback</code>的设计初衷并非解决组件内部函数多次创建的问题，而是减少子组件的不必要重复渲染。实际上在 React 体系下，优化思路主要有两种：</p><ul><li>1.减少重新 render 的次数。因为 React 最耗费性能的就是调和过程（reconciliation），只要不 render 就不会触发 reconciliation。</li><li>2.减少计算量。</li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">import React, &#123; useState &#125; from &#39;react&#39;;function Comp() &#123;    const [dataA, setDataA] &#x3D; useState(0);    const [dataB, setDataB] &#x3D; useState(0);    const onClickA &#x3D; () &#x3D;&gt; &#123;        setDataA(o &#x3D;&gt; o + 1);    &#125;;        const onClickB &#x3D; () &#x3D;&gt; &#123;        setDataB(o &#x3D;&gt; o + 1);    &#125;        return &lt;div&gt;        &lt;A onClick&#x3D;&#123;onClickA&#125;&gt;组件A：&#123;dataA&#125;&lt;&#x2F;div&gt;        &lt;B onClick&#x3D;&#123;onClickB&#125;&gt;组件B：&#123;dataB&#125;&lt;&#x2F;Expensive&gt;    &lt;&#x2F;div&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>b</code>是一个渲染成本非常高的组件，但点击<code>A</code>组件也会导致<code>B</code>重新渲染，即使<code>dataB</code>并未发生改变。原因就是<code>onClickB</code>被重新定义，导致 React 在 diff 新旧组件时，判定组件发生了变化。这时候<code>useCabllback</code>和<code>memo</code>就发挥了作用：</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import React, &#123; useState, memo, useCallback &#125; from &#39;react&#39;;function B(&#123; onClick, name &#125;) &#123;  console.log(&#39;B渲染&#39;);  return &lt;div onClick&#x3D;&#123;onClick&#125;&gt;&#123;name&#125;&lt;&#x2F;div&gt;&#125;const MemoB &#x3D; memo(B);function A(&#123; onClick, name &#125;) &#123;  console.log(&#39;A渲染&#39;);  return &lt;div onClick&#x3D;&#123;onClick&#125;&gt;&#123;name&#125;&lt;&#x2F;div&gt;&#125;export default function Comp() &#123;    const [dataA, setDataA] &#x3D; useState(0);    const [dataB, setDataB] &#x3D; useState(0);    const onClickA &#x3D; () &#x3D;&gt; &#123;        setDataA(o &#x3D;&gt; o + 1);    &#125;;        const onClickB &#x3D; useCallback(() &#x3D;&gt; &#123;        setDataB(o &#x3D;&gt; o + 1);    &#125;, []);        return &lt;div&gt;        &lt;A( onClick&#x3D;&#123;onClickA&#125; name&#x3D;&#123;&#96;组件A：$&#123;dataA&#125;&#96;&#125;&#x2F;&gt;        &lt;B onClick&#x3D;&#123;onClickB&#125; name&#x3D;&#123;&#96;组件B：$&#123;dataB&#125;&#96;&#125; &#x2F;&gt;    &lt;&#x2F;div&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以<code>useCallback</code>保证了<code>onClickB</code>不发生变化，此时点击<code>A</code>组件不会触发<code>B</code>组件的刷新，只有点击<code>B</code>组件才会触发。在实现减少不必要渲染的优化过程中</p><h4 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a><code>useMemo</code></h4><p>之前在项目中也不很清楚<code>useMemo</code>的作用，只知道是缓存变量，导致感觉代码写了很多废话，也并没有达到减少代码，提升性能的作用</p><p><code>useMemo</code>是针对一个函数，是否多次执行<br><code>useMemo</code>主要用来解决使用React hooks产生的无用渲染的性能问题<br>在方法函数，由于不能使用<code>shouldComponentUpdate</code>处理性能问题，react hooks新增了<code>useMemo</code></p><p>如果<code>useMemo</code>(fn, arr)第二个参数匹配，并且其值发生改变，才会多次执行执行，否则只执行一次，如果为空数组[]，fn只执行一次</p><p>举例说明：</p><p>第一次进来时，控制台显示rich child，当无限点击按钮时，控制台不会打印rich child。但是当改变props.name为props.isChild时，每点击一次按钮，控制台就会打印一次rich child</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">export default () &#x3D;&gt; &#123;let [isChild, setChild] &#x3D; useState(false); return (&lt;div&gt;&lt;Child isChild&#x3D;&#123;isChild&#125; name&#x3D;&quot;child&quot; &#x2F;&gt;&lt;button onClick&#x3D;&#123;() &#x3D;&gt; setChild(!isChild)&#125;&gt;改变Child&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;);&#125; let Child &#x3D; (props) &#x3D;&gt; &#123;let getRichChild &#x3D; () &#x3D;&gt; &#123;console.log(&#39;rich child&#39;); return &#39;rich child&#39;;&#125; let richChild &#x3D; useMemo(() &#x3D;&gt; &#123;&#x2F;&#x2F;执行相应的函数return getRichChild();&#125;, [props.name]); return (&lt;div&gt;isChild: &#123;props.isChild ? &#39;true&#39; : &#39;false&#39;&#125;&lt;br &#x2F;&gt;&#123;richChild&#125;&lt;&#x2F;div&gt;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="useRef-和createRef"><a href="#useRef-和createRef" class="headerlink" title="useRef()和createRef()"></a><code>useRef()和createRef()</code></h4><p><strong><code>createRef</code> 每次渲染都会返回一个新的引用，而 <code>useRef </code>每次都会返回相同的引用。</strong></p><h5 id="生成的ref拥有current属性，且如果没有显示改变current值，那么-ref的-current值-永远不会改变！无论组件被重渲染多少次！"><a href="#生成的ref拥有current属性，且如果没有显示改变current值，那么-ref的-current值-永远不会改变！无论组件被重渲染多少次！" class="headerlink" title="生成的ref拥有current属性，且如果没有显示改变current值，那么 ref的 current值 永远不会改变！无论组件被重渲染多少次！"></a>生成的<code>ref</code>拥有current属性，且如果没有<code>显示</code>改变current值，那么 <strong>ref的 current值 永远不会改变！无论组件被重渲染多少次！</strong></h5><p><code>usePrevious</code>就是一个自己封装的<code>custom-hook </code>，完全可以直接写在内部。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">const exampleComponent &#x3D; (value) &#x3D;&gt; &#123;  const ref &#x3D; useRef();  useEffect(() &#x3D;&gt; &#123;    ref.current &#x3D; value;  &#125;, value);  return &lt;h1&gt;&#123;ref.current&#125;&lt;&#x2F;h1&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着就可以分析一下生命周期中到底发生了什么:</p><ol><li>第一次<code>exampleComponent</code>被执行，函数参数value为1，<code>ref.current</code>先是undefined   （因为这时<code>useEffect</code>还没有被调用），然后根据return的JSX，渲染DOM，页面上被渲染出ref.current的值 -&gt; undefined，接着 <code>useEffect</code>被调用，此时ref 的current值被赋值，是这次渲染的props -&gt; <code>value</code>，也就是1。</li><li> 第二次<code>exampleComponent</code>被再次调用，函数参数value变成了2，依旧是先根据return的JSX渲染DOM，还记得吗，第一次<code>exampleComponent</code>被调用的后期，ref.current变成了1，因为没有任何<strong>显示</strong>改变<code>ref.current</code>的操作，所以页面中渲染出 1 ，渲染完成以后，开始老步骤，执行<code>useEffect</code>，这一次的函数参数value是2，所以<code>ref.current</code>变成了2。</li><li>第三次就不用多说了吧，其实关键点在于理解react-hooks的生命周期，<strong>useEffect是在渲染DOM结束以后才会调用！</strong></li></ol><p><code>useRef</code> 可以很好的解决闭包带来的不方便性.</p><p>值得注意的是，当 <code>useRef </code>的内容发生变化时,它不会通知您。更改.current属性不会导致重新呈现。 因为他一直是一个引用 .</p><p>useEffect、useMemo、useCallback都是自带闭包的。也就是说，每一次组件的渲染，其都会捕获当前组件函数上下文中的状态(state, props)，所以每一次这三种hooks的执行，反映的也都是当前的状态，你无法使用它们来捕获上一次的状态。对于这种情况，我们应该使用ref来访问。</p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年6月22日（egg 登录）</title>
      <link href="/record-blog/2021/02/13/20200622/"/>
      <url>/record-blog/2021/02/13/20200622/</url>
      
        <content type="html"><![CDATA[<h4 id="数据库用户表"><a href="#数据库用户表" class="headerlink" title="数据库用户表"></a>数据库用户表</h4><p><img src="/record-blog/2021/02/13/20200622/image-20200622200434575.png" alt="image-20200622200434575"></p><p>获取参数的中间件</p><p><img src="/record-blog/2021/02/13/20200622/image-20200622202606339.png" alt="image-20200622202606339"></p><p><strong>登录接口</strong></p><p><img src="/record-blog/2021/02/13/20200622/image-20200622202831881.png" alt="image-20200622202831881"></p><p>jwt会在config.default.js里进行配置</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">config<span class="token punctuation">.</span>jwt <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   secret<span class="token operator">:</span> <span class="token string">'secret'</span><span class="token punctuation">,</span> <span class="token comment">//密钥</span>   ignore<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\/user\/login</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 哪些请求不需要认证</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>比较加密和不加密的密码，存入数据库的时候是加密的，里面的comparePassword,使用的是bcryptjs</p><p><img src="/record-blog/2021/02/13/20200622/image-20200622203243490.png" alt="image-20200622203243490"></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 登录</span> <span class="token keyword">async</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> ctx<span class="token punctuation">,</span>app <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span>   <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> username<span class="token punctuation">,</span>password <span class="token punctuation">&#125;</span> <span class="token operator">=</span> params   <span class="token keyword">let</span> secret <span class="token operator">=</span> app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>secret   <span class="token keyword">let</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">select * from users where username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token string">"'"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"'"</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>   <span class="token keyword">let</span> result   <span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token keyword">await</span> app<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>result1<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">//比较加密后密码</span>     <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>helper<span class="token punctuation">.</span><span class="token function">comparePassword</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> result1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">isMatch</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>isMatch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">const</span> token <span class="token operator">=</span> ctx<span class="token punctuation">.</span>helper<span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>           id<span class="token operator">:</span> result1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span>           name<span class="token operator">:</span> result1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>username         <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> secret<span class="token punctuation">)</span>         <span class="token comment">//  用户信息</span>         <span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>           id<span class="token operator">:</span> result1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span>           username<span class="token operator">:</span> result1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>username         <span class="token punctuation">&#125;</span>         result <span class="token operator">=</span> <span class="token punctuation">&#123;</span>           code<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>           token<span class="token punctuation">,</span>           userInfo<span class="token punctuation">,</span>           message<span class="token operator">:</span> <span class="token string">'登录成功'</span>         <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>         result <span class="token operator">=</span> <span class="token punctuation">&#123;</span>           code<span class="token operator">:</span> <span class="token number">401</span><span class="token punctuation">,</span>           message<span class="token operator">:</span> <span class="token string">'密码错误'</span>         <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>       ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">500</span>       result <span class="token operator">=</span> <span class="token punctuation">&#123;</span>         message<span class="token operator">:</span> err       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     result <span class="token operator">=</span> <span class="token punctuation">&#123;</span>       code<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>       message<span class="token operator">:</span> <span class="token string">"用户名不存在,请注册"</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> result <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注册接口</strong></p><p>现在数据库里面查询有没有被注册，如果没有就存入数据库</p><p><img src="/record-blog/2021/02/13/20200622/image-20200622203640859.png" alt="image-20200622203640859"></p><p>saltPassword获取加密的密码</p><p><img src="/record-blog/2021/02/13/20200622/image-20200622203805183.png" alt="image-20200622203805183"></p><h4 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h4><p>再点击登录的时候会触发loginUser方法,之所以在onfinish外面写跳转是以为点击第一下是存储token，如果要获取token还需要再点击一次，所以写在外面，做个判断，也可以在redux，action里面进行跳转，可是我并没有成功，不知道哪里有问题</p><p><img src="/record-blog/2021/02/13/20200622/image-20200622204511236.png" alt="image-20200622204511236"></p><p>在react-redux的action进行login接口的调用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//actionCreators</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">USER_INFO</span><span class="token punctuation">,</span> <span class="token constant">SET_CURRENT_USER</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./constants'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> login<span class="token punctuation">,</span> register <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../../api/demoInfo'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> message <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getUserInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  type<span class="token operator">:</span> <span class="token constant">USER_INFO</span><span class="token punctuation">,</span>  data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">loginUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">async</span> <span class="token parameter">dispatch</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">login</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> token <span class="token operator">=</span> res<span class="token punctuation">.</span>token<span class="token punctuation">;</span>      localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//存储token</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setCurrentUser</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">setCurrentUser</span> <span class="token operator">=</span> <span class="token parameter">decoded</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> <span class="token constant">SET_CURRENT_USER</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> decoded  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">logoutUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token parameter">dispatch</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 注册</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">registerUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token parameter">dispatch</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">register</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码可看backend仓库</p>]]></content>
      
      
      
        <tags>
            
            <tag> egg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年6月21日（egg react)</title>
      <link href="/record-blog/2021/02/13/20200621/"/>
      <url>/record-blog/2021/02/13/20200621/</url>
      
        <content type="html"><![CDATA[<p>案例展示的图片就没有了，因为需要连数据库才能看到页面的整体效果，由于用的是公司的电脑，所以自己的电脑没有数据库的数据，看不到效果图片，之前也在笔记里面说过，做的一个项目是后台管理的类型主要是对菜单和案例进行，增删改查，然后把这些数据相互关联，比如菜单树形结构的生成，菜单和案例之间的关联</p><h4 id="1-egg连接数据库"><a href="#1-egg连接数据库" class="headerlink" title="1.egg连接数据库"></a>1.egg连接数据库</h4><p>在config文件夹下面的config.default.js进行配置，并且在plugin.js下面注册下载的egg-mysql插件</p><p><img src="/record-blog/2021/02/13/20200621/image-20200621231927440.png" alt="image-20200621231927440"></p><p>service文件夹主要是对数据库的操作，controller主要是讲数据库的内容返回给前端，前端第一个接触的就是controller里面的方法，controller在调用service里面操作数据库的方法，就可以实现基本的流程，因为我现在写的也没啥复杂的东西，就是对数据的增删改查</p><h4 id="2-controller里面的操作"><a href="#2-controller里面的操作" class="headerlink" title="2.controller里面的操作"></a>2.controller里面的操作</h4><p><img src="/record-blog/2021/02/13/20200621/image-20200621232619378.png" alt="image-20200621232619378"></p><p>简单的一个例子，查看菜单列表并且进行分页，使用slice方法，因为这个是菜单列表，就会有，一级，二级，三级，所以最好在后台的时候就做好这些处理，生成树形结构一，前端不用做太多的操作</p><h3 id="3-service-menuInfo"><a href="#3-service-menuInfo" class="headerlink" title="3.service(menuInfo)"></a>3.service(menuInfo)</h3><p><img src="/record-blog/2021/02/13/20200621/image-20200621232938281.png" alt="image-20200621232938281"></p><p>对于数据库的设计，我刚开始是有误的，对于每一个菜单我都建了一个表，但是只用一个表就可以，写parent字段，并且也可以写一个deepth知道它在第几级，treeData方法就是生成树形结构的方法，getAllList返回数据库的数据</p><p>当然菜单和案例是有联系的所以会单独写一个方法，因为之前我用的是假数据，页面渲染的时候已经有固定的格式，需要从数据库获取数据并且生成对应的结构</p><p><img src="/record-blog/2021/02/13/20200621/image-20200621233714469.png" alt="image-20200621233714469"></p><p>个人是觉得写得有点复杂，有时间调整调整，这里之前的for循环，之前是使用的map，但是node中的map()、forEach()、for()循环有一个特性：当其函数里面里面有回调它就变成异步，之前使用map得到的是一个promise pending </p><p>解决方法：可以用async的map来处理这种情况，async是nodejs的一个组件，用来解决node的异步问题</p><p>列如</p><p><img src="/record-blog/2021/02/13/20200621/image-20200621234105667.png" alt="image-20200621234105667"></p><p>findOne是异步函数，可以使用async.map解决，参考网址<a href="https://blog.csdn.net/sam976/article/details/52330424">https://blog.csdn.net/sam976/article/details/52330424</a></p><h4 id="4-上传图片"><a href="#4-上传图片" class="headerlink" title="4.上传图片"></a>4.上传图片</h4><p><img src="/record-blog/2021/02/13/20200621/image-20200621234259422.png" alt="image-20200621234259422"></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> Controller <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"egg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 异步二进制 写入流</span><span class="token keyword">const</span> awaitWriteStream <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'await-stream-ready'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">;</span><span class="token comment">//管道读入一个虫洞。</span><span class="token keyword">const</span> sendToWormhole <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'stream-wormhole'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">uploadController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">async</span> <span class="token function">doUploadImage</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">;</span>    <span class="token comment">//egg-multipart 已经帮我们处理文件二进制对象</span>    <span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">getFileStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//新建一个文件名</span>    <span class="token keyword">const</span> filename <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> target <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>baseDir<span class="token punctuation">,</span> <span class="token string">'app/public/image'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//生成一个文件写入 文件流</span>    <span class="token keyword">const</span> writeStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//异步把文件流 写入writeStream中</span>      <span class="token keyword">await</span> <span class="token function">awaitWriteStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>writeStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//如果出现错误，关闭管道</span>      <span class="token keyword">await</span> <span class="token function">sendToWormhole</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> err<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//文件响应</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      url<span class="token operator">:</span> <span class="token string">'/public/image/'</span> <span class="token operator">+</span> filename<span class="token punctuation">,</span>      msg<span class="token operator">:</span> <span class="token string">'上传成功'</span><span class="token punctuation">,</span>      code<span class="token operator">:</span> <span class="token number">200</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> uploadController<span class="token comment">// 1.获取传过来的文件二进制转为流</span><span class="token comment">// 2.创建文件</span><span class="token comment">// 3.将创建的文件转为流</span><span class="token comment">// 4.两个流对接</span><span class="token comment">//直接存储base64</span> <span class="token keyword">const</span> filename <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.png'</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> target <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>baseDir<span class="token punctuation">,</span> <span class="token string">'app/public/image'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> base64 <span class="token operator">=</span> imgData<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^data:image\/\w+;base64,</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> dataBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span>base64<span class="token punctuation">,</span> <span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把base64码转成buffer对象，</span>    fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> dataBuffer<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//用fs写入文件</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入成功！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前端代码没有使用antd.deisgn提供的upload组件，自己封装一个</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import React, &#123; useState, createRef, useImperativeHandle, useEffect &#125; from &quot;react&quot;import &#39;.&#x2F;index.css&#39;import &#123; PlusCircleOutlined, RestOutlined &#125; from &#39;@ant-design&#x2F;icons&#39;;import &#123; upload &#125; from &#39;..&#x2F;..&#x2F;api&#x2F;demoInfo&#39;;import &#123; message &#125; from &quot;antd&quot;;const Upload &#x3D; React.forwardRef((props, ref) &#x3D;&gt; &#123;  const [imgUrl, setImgUrl] &#x3D; useState(undefined)  const [src, setSrc] &#x3D; useState(&#39;&#39;)  useEffect(() &#x3D;&gt; &#123;    setSrc(props.src)  &#125;, [props.src])  const files &#x3D; createRef();  useImperativeHandle(ref, () &#x3D;&gt; (&#123;    getFile: () &#x3D;&gt; &#123;      return &#123; file: imgUrl, src: src &#125;    &#125;  &#125;));  const hanldeDelImage &#x3D; () &#x3D;&gt; &#123;    setImgUrl(undefined)    setSrc(undefined)  &#125;  const handleUpdate &#x3D; () &#x3D;&gt; &#123;    &#x2F;&#x2F; createRef 每次渲染都会返回一个新的引用，而 useRef 每次都会返回相同的引用。    let fileImg &#x3D; files.current.files[0];    let formData &#x3D; new FormData()    formData.append(&quot;file&quot;, fileImg)&#x2F;&#x2F;第一个参数为后端规定字段，第二个参数时需要上传的图片    upload(formData).then(res &#x3D;&gt; &#123;      if (res.code &#x3D;&#x3D;&#x3D; 200) &#123;        setImgUrl(&#39;http:&#x2F;&#x2F;127.0.0.1&#39; + res.url)        message.success(res.msg)      &#125; else &#123;        message.error(res.msg)      &#125;    &#125;)  &#125;&#x2F;&#x2F;base64const handleUpdate &#x3D; (e) &#x3D;&gt; &#123;    &#x2F;&#x2F; 利用fileReader对象获取file        var file &#x3D; e.target.files[0];    var filesize &#x3D; file.size;    if (filesize &gt; 2101440) &#123;      &#x2F;&#x2F; 图片大于2MB       message.info(&#39;图片不能大于2M&#39;)    &#125;    var reader &#x3D; new FileReader();    reader.readAsDataURL(file);    reader.onload &#x3D; function (e) &#123;      &#x2F;&#x2F; 读取到的图片base64 数据编码 将此编码字符串传给后台即可              var imgcode &#x3D; e.target.result;      setImgUrl(imgcode)      upload(&#123; imgData: imgcode &#125;).then(res &#x3D;&gt; &#123;        if (res.code &#x3D;&#x3D;&#x3D; 200) &#123;          message.success(res.msg)        &#125; else &#123;          message.error(res.msg)        &#125;      &#125;)    &#125;  &#125;  return (    &lt;div&gt;      &lt;input className&#x3D;&quot;uploadInput&quot; type&#x3D;&quot;file&quot; onChange&#x3D;&#123;handleUpdate&#125; ref&#x3D;&#123;files&#125; &#x2F;&gt;      &lt;div className&#x3D;&quot;imgContent&quot;&gt;        &lt;div style&#x3D;&#123;&#123; position: &#39;relative&#39; &#125;&#125; onClick&#x3D;&#123;hanldeDelImage&#125;&gt;          &#123;(src || imgUrl) ? &lt;img src&#x3D;&#123;src || imgUrl&#125; alt&#x3D;&quot;图片&quot; &#x2F;&gt; : &lt;&gt;&lt;PlusCircleOutlined &#x2F;&gt;上传图片&lt;&#x2F;&gt;&#125;          &lt;div className&#x3D;&quot;mask&quot; &gt;&lt;RestOutlined style&#x3D;&#123;&#123; fontSize: &#39;24px&#39;, color: &#39;#ffffff&#39; &#125;&#125; &#x2F;&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;      &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;  )&#125;)export default Upload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> egg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年6月14日（dat.gui)</title>
      <link href="/record-blog/2021/02/13/20200614/"/>
      <url>/record-blog/2021/02/13/20200614/</url>
      
        <content type="html"><![CDATA[<p>因为我们公司主要是做三维这一块刚好要用到，于是学习了dat.gui，那么他到底是什么呢？</p><p><strong>dat.GUI 是一个轻量级的图形用户界面库（GUI 组件），使用这个库可以很容易地创建出能够改变代码变量的界面组件。</strong></p><p>简单来说，如果我希望页面改变，我需要修改参数，在保存进行运行，可是dat.gui可以在我们的页面上直接修改参数，并且页面立即发生变化，还是挺优秀的</p><h4 id="案例展示"><a href="#案例展示" class="headerlink" title="案例展示"></a>案例展示</h4><p>这是我们公司自己弄的第一个npm镜像，主要是把这些三维模型引入进来<img src="/record-blog/2021/02/13/20200614/image-20200614195548279.png" alt="image-20200614195548279"></p><p>其实都会有说明文档，参数我们要用dat.gui来配置，主要是一个demo展示，方便客户看了之后知道是干啥的</p><p><img src="/record-blog/2021/02/13/20200614/image-20200614195728408.png" alt="image-20200614195728408"></p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>首先需要创建一个对象，我使用的是react-dat-gui，需要把使用到的数据绑定到dat-gui中</p><p><img src="/record-blog/2021/02/13/20200614/image-20200614195926513.png" alt="image-20200614195926513"></p><p><img src="/record-blog/2021/02/13/20200614/image-20200614200131126.png" alt="image-20200614200131126"></p><p>最后在修改这个对象的数据就可以有一个实时的变化</p><p><img src="/record-blog/2021/02/13/20200614/image-20200614200329607.png" alt="image-20200614200329607"></p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>当然开始是需要webpack配置的，但是我之前做过proxy，有一个弊端就是我npm run eject的时候不会暴露配置项，</p><p><img src="/record-blog/2021/02/13/20200614/image-20200614200525324.png" alt="image-20200614200525324"></p><p>但是react-app-rewired是可以有的，他自己做了封装</p><p><img src="/record-blog/2021/02/13/20200614/image-20200614200608945.png" alt="配置"></p><p>最后做出来的效果就是这样，这只是一个基本的样子，还有地图引入进来的不同模式，刚刚开始做这方面的东西小白一个，需要学习的地方真的很多，每天进步一点点</p><p><img src="/record-blog/2021/02/13/20200614/image-20200614195452217.png" alt="demo"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年6月11（webrtc篇）</title>
      <link href="/record-blog/2021/02/13/20200611/"/>
      <url>/record-blog/2021/02/13/20200611/</url>
      
        <content type="html"><![CDATA[<h4 id="熟悉webrtc"><a href="#熟悉webrtc" class="headerlink" title="熟悉webrtc"></a>熟悉webrtc</h4><p><code>WebRTC用来协助建立p2p通讯的。主要用于协商双方通讯过程，传递基本信息，如：会话控制信息，用来开始和结束通话，即开始视频、结束视频这些操作指令；处理错误的消息；元数据，如各自的音视频解码方式、带宽；网络数据，对方的公网IP、端口、内网IP及端口。但是WebRTC的API并没有实现信令通信机制，所以使用者需要自己去实现。常见的信令交互图如下</code></p><p><img src="/record-blog/2021/02/13/20200611/webrtc1.webp" alt="image-20200611185906328"></p><p><img src="/record-blog/2021/02/13/20200611/webrtc2.webp" alt="image-20200611185906328"></p><ul><li>Amy、Bob均实例化一个RTCPeerConnection(以下简称rpcA和rpcB),调用rpcA的<code>createOffer()</code>方法建立一个offer信令，并且拿到A的SDP</li><li>通过rpcA的<code>setLocalDescription()</code>方法设置A机器的本地描述</li><li>A通过服务器将offer信令发给B</li><li>B接收到A的offer信令，通过rpcB的<code>setRemoteDescription()</code>方法设置远程机器（即A）的描述</li><li>B调用rpcB的<code>createAnswer()</code>方法建立一个answer信令，并且拿到B的SDP</li><li>通过rpcB的<code>setLocalDescription()</code>方法设置B机器的本地描述</li><li>B通过服务器将answer信令发送给A</li><li>A接收到B的answer信令，通过rpcA的<code>setRemoteDescription()</code>方法设置远程机器B的描述</li></ul><p><b><code>sdp（Session Description Protocol）是一种会话描述协议，属于文本协议，即WebRTC中常说的信令（Signalling），是WebRTC用来协助建立p2p通讯的。主要用于协商双方通讯过程，传递基本信息，如：会话控制信息，用来开始和结束通话，即开始视频、结束视频这些操作指令；处理错误的消息；元数据，如各自的音视频解码方式、带宽；网络数据，对方的公网IP、端口、内网IP及端口。但是WebRTC的API并没有实现信令通信机制，所以使用者需要自己去实现。常见的信令交</code></b></p><p>现在看一个关于屏幕分享的小案例</p><h4 id="案例展示"><a href="#案例展示" class="headerlink" title="案例展示"></a>案例展示</h4><p><img src="/record-blog/2021/02/13/20200611/image-20200611185906328.png" alt="image-20200611185906328"></p><p>用到的是vue-webrtc</p><p>代码展示(父组件)</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;container&quot;&gt;    &lt;div class&#x3D;&quot;row&quot;&gt;      &lt;div class&#x3D;&quot;col-md-12 my-3&quot;&gt;        &lt;h2&gt;Room&lt;&#x2F;h2&gt;        &lt;input v-model&#x3D;&quot;roomId&quot; &#x2F;&gt;      &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;row&quot;&gt;      &lt;div class&#x3D;&quot;col-md-12&quot;&gt;        &lt;div class&gt;          &lt;vue-webrtc            ref&#x3D;&quot;webrtc&quot;            width&#x3D;&quot;100%&quot;            :roomId&#x3D;&quot;roomId&quot;            v-on:joined-room&#x3D;&quot;logEvent&quot;            v-on:left-room&#x3D;&quot;logEvent&quot;            v-on:opened-room&#x3D;&quot;logEvent&quot;            v-on:share-started&#x3D;&quot;logEvent&quot;            v-on:share-stopped&#x3D;&quot;logEvent&quot;            @error&#x3D;&quot;onError&quot;          &#x2F;&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;row&quot;&gt;          &lt;div class&#x3D;&quot;col-md-12 my-3&quot;&gt;            &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot; @click&#x3D;&quot;onJoin&quot;&gt;Join&lt;&#x2F;button&gt;            &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot; @click&#x3D;&quot;onLeave&quot;&gt;Leave&lt;&#x2F;button&gt;            &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot; @click&#x3D;&quot;onCapture&quot;&gt;Capture Photo&lt;&#x2F;button&gt;            &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot; @click&#x3D;&quot;onShareScreen&quot;&gt;Share Screen&lt;&#x2F;button&gt;          &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;      &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;row&quot;&gt;      &lt;div class&#x3D;&quot;col-md-12&quot;&gt;        &lt;h2&gt;Captured Image&lt;&#x2F;h2&gt;        &lt;figure class&#x3D;&quot;figure&quot;&gt;          &lt;img :src&#x3D;&quot;img&quot; class&#x3D;&quot;img-responsive&quot; &#x2F;&gt;        &lt;&#x2F;figure&gt;      &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import Vue from &#39;vue&#39;import &#123; WebRTC &#125; from &#39;plugin&#39;;import &#123; find, head &#125; from &#39;lodash&#39;;Vue.component(WebRTC.name, WebRTC);export default &#123;  name: &#39;app&#39;,  components: &#123;  &#125;,  data () &#123;    return &#123;      img: null,      roomId: &quot;public-room&quot;    &#125;;  &#125;,  computed: &#123;  &#125;,  watch: &#123;  &#125;,  methods: &#123;    onCapture () &#123;      this.img &#x3D; this.$refs.webrtc.capture();    &#125;,    onJoin () &#123;      this.$refs.webrtc.join();    &#125;,    onLeave () &#123;      this.$refs.webrtc.leave();    &#125;,    onShareScreen () &#123;      this.img &#x3D; this.$refs.webrtc.shareScreen();    &#125;,    onError (error, stream) &#123;      console.log(&#39;On Error Event&#39;, error, stream);    &#125;,    logEvent (event) &#123;      console.log(&#39;Event : &#39;, event);    &#125;,  &#125;&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件接收</p><p><img src="/record-blog/2021/02/13/20200611/image-20200611190125454.png" alt="image-20200611190125454"></p><p>点击分享按钮</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">shareScreen () &#123;    var that &#x3D; this;    if (navigator.getDisplayMedia || navigator.mediaDevices.getDisplayMedia) &#123;      function addStreamStopListener (stream, callback) &#123;        console.log(stream, &#39;stream&#39;)        var streamEndedEvent &#x3D; &#39;ended&#39;;        if (&#39;oninactive&#39; in stream) &#123;          streamEndedEvent &#x3D; &#39;inactive&#39;;        &#125;        stream.addEventListener(streamEndedEvent, function () &#123;          callback();          callback &#x3D; function () &#123; &#125;;        &#125;, false);      &#125;      function onGettingSteam (stream) &#123;        that.rtcmConnection.addStream(stream);        that.$emit(&#39;share-started&#39;, stream.streamid);        addStreamStopListener(stream, function () &#123;          that.rtcmConnection.removeStream(stream.streamid);          that.$emit(&#39;share-stopped&#39;, stream.streamid);        &#125;);      &#125;      function getDisplayMediaError (error) &#123;        console.log(&#39;Media error: &#39; + JSON.stringify(error));      &#125;      &#x2F;&#x2F; 出现弹框      if (navigator.mediaDevices.getDisplayMedia) &#123;        &#x2F;&#x2F; 异步请求        navigator.mediaDevices.getDisplayMedia(&#123; video: true, audio: false &#125;).then(stream &#x3D;&gt; &#123;          onGettingSteam(stream);        &#125;, getDisplayMediaError).catch(getDisplayMediaError);      &#125;      else if (navigator.getDisplayMedia) &#123;        debugger        navigator.getDisplayMedia(&#123; video: true &#125;).then(stream &#x3D;&gt; &#123;          onGettingSteam(stream);        &#125;, getDisplayMediaError).catch(getDisplayMediaError);      &#125;    &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> webrtc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年6月4号</title>
      <link href="/record-blog/2021/02/13/20200604/"/>
      <url>/record-blog/2021/02/13/20200604/</url>
      
        <content type="html"><![CDATA[<h4 id="1-在使用mock接口的时候突然出现了跨域问题，解决方式"><a href="#1-在使用mock接口的时候突然出现了跨域问题，解决方式" class="headerlink" title="1.在使用mock接口的时候突然出现了跨域问题，解决方式"></a>1.在使用mock接口的时候突然出现了跨域问题，解决方式</h4><p><img src="/record-blog/2021/02/13/20200604/image-20200604203809753.png" alt="image-20200604203809753"></p><p>首先下载这三个插件，然后进行配置</p><p><img src="/record-blog/2021/02/13/20200604/image-20200604203916905.png" alt="image-20200604203916905"></p><p>第一步：新建一个setupProxy文件，使用http-proxy-middleware第三方插件进行配置，图中的/td的意思就是你接口的最后一个/后面的内容，这里配置完了之后，第二步：在你封装api的地方做一点点的改动，每个url前面都加上一个/td</p><p><img src="/record-blog/2021/02/13/20200604/image-20200604204132327.png" alt="image-20200604204132327"></p><p>第三步：包括之前二次封装的axios也做了变动，这里的baseUrl就不需要在写了，第四步：另外package.json里面的启动方式也要改变</p><p><img src="/record-blog/2021/02/13/20200604/image-20200604204229967.png" alt="image-20200604204229967"></p><p><img src="/record-blog/2021/02/13/20200604/image-20200604204453894.png" alt="image-20200604204453894"></p><p>这样接ok了，参考网址<a href="https://www.jianshu.com/p/a2a5163fefac">https://www.jianshu.com/p/a2a5163fefac</a></p><h4 id="2-使用react-cropper完成图片的上传剪切，缩放等功能，写这个原因主要是闲不住"><a href="#2-使用react-cropper完成图片的上传剪切，缩放等功能，写这个原因主要是闲不住" class="headerlink" title="2,使用react-cropper完成图片的上传剪切，缩放等功能，写这个原因主要是闲不住"></a>2,使用<code>react-cropper</code>完成图片的上传剪切，缩放等功能，写这个原因主要是闲不住</h4><h4 id="案例展示"><a href="#案例展示" class="headerlink" title="案例展示"></a>案例展示</h4><p><img src="/record-blog/2021/02/13/20200604/image-20200604205113577.png" alt="image-20200604205113577"></p><h5 id="代码实现方式"><a href="#代码实现方式" class="headerlink" title="代码实现方式"></a>代码实现方式</h5><p><img src="/record-blog/2021/02/13/20200604/image-20200604205236296.png" alt="image-20200604205236296"></p><p>点击上传文件的按钮，把avatarModalVisible设置为true，在react的jsx里面不要写if，显示弹框，可以看出上图代码，传给了modal两个参数，分别是弹框是否显示，还有一个就是选择的文件，下面就是点击按钮的方法</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">const handlFileChange &#x3D; e &#x3D;&gt; &#123;  e.persist();  const file &#x3D; e.target.files[0]  if (file) &#123;    if (file.size &lt;&#x3D; MAX_FILE_SIZE) &#123;      setAvatarModalVisible(true)      setModalFile(file)    &#125; else &#123;      message.error(&#39;文件过大&#39;)    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在modal里，读取对应的文件，<code>readAsDataURL</code> 方法会读取指定的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob"><code>Blob</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File"><code>File</code></a> 对象。读取操作完成的时候，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader/readyState"><code>readyState</code></a> 会变成已完成<code>DONE</code>，并触发 <code>loadend</code> 事件，同时 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader/result"><code>result</code></a> 属性将包含一个<code>data:</code>URL格式的字符串（base64编码）以表示所读取文件的内容。</p><p><img src="/record-blog/2021/02/13/20200604/image-20200604210018839.png" alt="image-20200604210018839"></p><p>在点击保存按钮的时候转为blob格式，我用的是redux存储起来，在父级页面使用</p><p><img src="/record-blog/2021/02/13/20200604/image-20200604210118479.png" alt="image-20200604210118479"></p><p>AvatarModal.js</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import React, &#123; useState, useEffect, useCallback, useRef &#125; from &#39;react&#39;import &#123; Button &#125; from &#39;antd&#39;;import &#123; getAvatarInfo &#125; from &#39;.&#x2F;store&#x2F;actionCreators&#39;import Cropper from &#39;react-cropper&#39; &#x2F;&#x2F; 引入Cropperimport &#39;cropperjs&#x2F;dist&#x2F;cropper.css&#39; &#x2F;&#x2F; 引入Cropper对应的cssimport store from &#39;..&#x2F;..&#x2F;store&#39;import &#39;.&#x2F;AvatarModal.scss&#39;const AvatarModal &#x3D; (&#123; uploadedImageFile, setAvatarModalVisible &#125;) &#x3D;&gt; &#123;  &#x2F;&#x2F; console.log(uploadedImageFile)  const [src, setSrc] &#x3D; useState(null)  const cropperRef &#x3D; useRef(null)  useEffect(() &#x3D;&gt; &#123;    const fileReader &#x3D; new FileReader()    fileReader.onload &#x3D; e &#x3D;&gt; &#123;      const dataURL &#x3D; e.target.result      setSrc(dataURL)    &#125;    fileReader.readAsDataURL(uploadedImageFile)  &#125;, [uploadedImageFile])  const handleSubmit &#x3D; useCallback(() &#x3D;&gt; &#123;    &#x2F;&#x2F; TODO: 这里可以尝试修改上传图片的尺寸    cropperRef.current.getCroppedCanvas().toBlob(async blob &#x3D;&gt; &#123;      &#x2F;&#x2F;把选中裁切好的的图片传出去      &#x2F;&#x2F; 关闭弹窗      store.dispatch(getAvatarInfo(blob))      setAvatarModalVisible(false)    &#125;)  &#125;, [setAvatarModalVisible])  return (    &lt;div className&#x3D;&quot;hooks-cropper-modal&quot;&gt;      &lt;div className&#x3D;&quot;modal-panel&quot;&gt;        &lt;div className&#x3D;&quot;cropper-container-container&quot;&gt;          &lt;div className&#x3D;&quot;cropper-container&quot;&gt;            &lt;Cropper              src&#x3D;&#123;src&#125;              className&#x3D;&quot;cropper&quot;              ref&#x3D;&#123;cropperRef&#125;              viewMode&#x3D;&#123;1&#125;              zoomable&#x3D;&#123;true&#125; &#x2F;&#x2F;true为可缩放，反之补能              aspectRatio&#x3D;&#123;1&#125; &#x2F;&#x2F; 固定为1:1  可以自己设置比例, 默认情况为自由比例              guides&#x3D;&#123;false&#125;              preview&#x3D;&quot;.cropper-preview&quot;            &#x2F;&gt;          &lt;&#x2F;div&gt;          &lt;div className&#x3D;&quot;preview-container&quot;&gt;            &lt;div className&#x3D;&quot;cropper-preview&quot; &#x2F;&gt;          &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;div className&#x3D;&quot;button-row&quot;&gt;          &lt;Button type&#x3D;&quot;primary&quot; onClick&#x3D;&#123;handleSubmit&#125;&gt;点击保存&lt;&#x2F;Button&gt;        &lt;&#x2F;div&gt;      &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;  )&#125;export default AvatarModal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样在父组件中获取，并且赋值给img的src就可以</p><p><img src="/record-blog/2021/02/13/20200604/image-20200604210347613.png" alt="image-20200604210347613"></p><p>userInfo.js（父组件）</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import React, &#123; useState, useEffect &#125; from &#39;react&#39;import &#123; Card, Form, Input, Button, Row, Col, Avatar, message &#125; from &#39;antd&#39;;import &#123;  CloudUploadOutlined&#125; from &#39;@ant-design&#x2F;icons&#39;;import AvatarModal from &#39;.&#x2F;AvatarModal&#39;import styles from &#39;.&#x2F;userInfo.module.css&#39;import &#123; connect &#125; from &#39;react-redux&#39;const UserInfo &#x3D; (&#123; avatarObj &#125;) &#x3D;&gt; &#123;  const MAX_FILE_SIZE &#x3D; 10 * 1024 * 1024 &#x2F;&#x2F; 文件最大限制为10M  const [avatarModalVisible, setAvatarModalVisible] &#x3D; useState(false)  const [modalFile, setModalFile] &#x3D; useState(null)  const [resultImgUrl, setResultImgUrl] &#x3D; useState(&#39;&#39;)  useEffect(() &#x3D;&gt; &#123;    if (JSON.stringify(avatarObj.avatarInfoObj) &#x3D;&#x3D;&#x3D; &quot;&#123;&#125;&quot;) &#123;      let blob &#x3D; avatarObj.avatarInfoObj      console.log(blob)      if (blob.size) &#123;        setResultImgUrl(URL.createObjectURL(blob))      &#125;    &#125;    return () &#x3D;&gt; &#123;    &#125;  &#125;, [avatarObj])  const layout &#x3D; &#123;    labelCol: &#123; span: 8 &#125;,    wrapperCol: &#123; span: 16 &#125;,  &#125;;  const tailLayout &#x3D; &#123;    wrapperCol: &#123; offset: 12, span: 12 &#125;,  &#125;;  const onFinish &#x3D; values &#x3D;&gt; &#123;    console.log(&#39;Success:&#39;, values);  &#125;;  const handlFileChange &#x3D; e &#x3D;&gt; &#123;    e.persist();    const file &#x3D; e.target.files[0]    if (file) &#123;      if (file.size &lt;&#x3D; MAX_FILE_SIZE) &#123;        setAvatarModalVisible(true)        setModalFile(file)      &#125; else &#123;        message.error(&#39;文件过大&#39;)      &#125;    &#125;  &#125;  return (    &lt;&gt;      &lt;Card title&#x3D;&quot;个人信息&quot;&gt;        &lt;Row&gt;          &lt;Col span&#x3D;&#123;16&#125;&gt;            &lt;Form              &#123;...layout&#125;              name&#x3D;&quot;basic&quot;              initialValues&#x3D;&#123;&#123; remember: true &#125;&#125;              onFinish&#x3D;&#123;onFinish&#125;            &gt;              &lt;Form.Item                label&#x3D;&quot;昵称&quot;                name&#x3D;&quot;nickName&quot;                rules&#x3D;&#123;[&#123; required: true, message: &#39;请输入你的昵称!&#39; &#125;]&#125;              &gt;                &lt;Input &#x2F;&gt;              &lt;&#x2F;Form.Item&gt;              &lt;Form.Item                label&#x3D;&quot;账户密码&quot;                name&#x3D;&quot;password&quot;                rules&#x3D;&#123;[&#123; required: true, message: &#39;请输入你的密码!&#39; &#125;]&#125;              &gt;                &lt;Input &#x2F;&gt;              &lt;&#x2F;Form.Item&gt;              &lt;Form.Item name&#x3D;&quot;comment&quot; label&#x3D;&quot;comment&quot;&gt;                &lt;Input.TextArea &#x2F;&gt;              &lt;&#x2F;Form.Item&gt;              &lt;Form.Item &#123;...tailLayout&#125;&gt;                &lt;Button type&#x3D;&quot;primary&quot; htmlType&#x3D;&quot;submit&quot;&gt;                  保存        &lt;&#x2F;Button&gt;              &lt;&#x2F;Form.Item&gt;            &lt;&#x2F;Form&gt;          &lt;&#x2F;Col&gt;          &lt;Col span&#x3D;&#123;5&#125; offset&#x3D;&#123;3&#125; className&#x3D;&#123;styles.mask&#125;&gt;            &lt;Avatar size&#x3D;&#123;180&#125; className&#x3D;&#123;styles.avatar&#125; src&#x3D;&#123;resultImgUrl ? resultImgUrl : &quot;https:&#x2F;&#x2F;zos.alipayobjects.com&#x2F;rmsportal&#x2F;ODTLcjxAfvqbxHnVXCYX.png&quot;&#125; &#x2F;&gt;            &lt;CloudUploadOutlined className&#x3D;&#123;styles.icon&#125; &#x2F;&gt;            &lt;label className&#x3D;&#123;styles.maskBox&#125;&gt;              &lt;input                type&#x3D;&quot;file&quot;                accept&#x3D;&quot;image&#x2F;jpeg,image&#x2F;jpg,image&#x2F;png&quot;                className&#x3D;&quot;base-upload-input&quot;                onChange&#x3D;&#123;handlFileChange&#125;              &#x2F;&gt;            &lt;&#x2F;label&gt;          &lt;&#x2F;Col&gt;        &lt;&#x2F;Row&gt;      &lt;&#x2F;Card&gt;      &#123;        avatarModalVisible &amp;&amp; (          &lt;AvatarModal            setAvatarModalVisible&#x3D;&#123;setAvatarModalVisible&#125;            uploadedImageFile&#x3D;&#123;modalFile&#125;          &#x2F;&gt;        )      &#125;    &lt;&#x2F;&gt;  )&#125;&#x2F;&#x2F; toJS()是因为在reducer里面用了fromJSconst mapStateToProps &#x3D; state &#x3D;&gt; &#123;  return &#123;    avatarObj: state.toJS().avatarReducer  &#125;&#125;export default connect(mapStateToProps)(UserInfo)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>app.js</p><h5 id="3-实现mock-token-react-redux的登录验证"><a href="#3-实现mock-token-react-redux的登录验证" class="headerlink" title="3.实现mock+token+react-redux的登录验证"></a>3.实现mock+token+react-redux的登录验证</h5><p>mock的接口是自己瞎写的只是返回了一个假的token而已:sweat_smile:</p><p><img src="/record-blog/2021/02/13/20200604/image-20200604211008784.png" alt="image-20200604211008784"></p><p>在这里提交按钮这里触发loginUser这个方法，这里的路由跳转使用的是useHistory</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import &#123; USER_INFO, SET_CURRENT_USER &#125; from &#39;.&#x2F;constants&#39;import &#123; useHistory &#125; from &quot;react-router-dom&quot;;import &#123; login &#125; from &#39;..&#x2F;..&#x2F;..&#x2F;api&#x2F;demoInfo&#39;export const getUserInfo &#x3D; (data) &#x3D;&gt; (&#123;  type: USER_INFO,  data&#125;)export const loginUser &#x3D; () &#x3D;&gt; dispatch &#x3D;&gt; &#123;  login().then(res &#x3D;&gt; &#123;    const &#123; token &#125; &#x3D; res.data;    localStorage.setItem(&#39;token&#39;, token);&#x2F;&#x2F;存储token    dispatch(setCurrentUser(token))  &#125;)&#125;export const setCurrentUser &#x3D; decoded &#x3D;&gt; &#123;  return &#123;    type: SET_CURRENT_USER,    data: decoded  &#125;&#125;export const logoutUser &#x3D; () &#x3D;&gt; dispatch &#x3D;&gt; &#123;  let history &#x3D; useHistory();  localStorage.removeItem(&#39;token&#39;);  dispatch(setCurrentUser(&#123;&#125;));  history.push(&#39;&#x2F;login&#39;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面就是我store里面action的方法，当然没有这么顺利:ice_cream:</p><p><img src="/record-blog/2021/02/13/20200604/image-20200604211407639.png" alt="image-20200604211407639"></p><p>他给我报错了，没错是因为我在action里面使用了异步的方法，不急不急，上网百度，知道了，需要下载react-thunk中间件，于是我配了，不出意外的好了， <strong>thunk的原理，可以在actionCreators里通过返回一个函数，然后就可以在函数里编写某些异步操作了，待异步操作结束，最后通过传入的store.dispatch，发出action通知给Store要进行状态更新</strong> 。</p><p><img src="/record-blog/2021/02/13/20200604/image-20200604211540583.png" alt="image-20200604211540583"></p><p>reducer.js</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import * as actionTypes from &#39;.&#x2F;constants&#39;;import &#123; fromJS &#125; from &#39;immutable&#39;;const defaultState &#x3D; fromJS(&#123;  userInfoObj: &#123;&#125;,  isAuthenticated: false,  user: &#123;&#125;&#125;)export default (state &#x3D; defaultState, action) &#x3D;&gt; &#123;  console.log(action)  switch (action.type) &#123;    case actionTypes.USER_INFO:      return state.set(&#39;userInfoObj&#39;, action.data)    case actionTypes.SET_CURRENT_USER:      return state.set(&#39;user&#39;, action.data),        state.set(&#39;isAuthenticated&#39;, action.data)    default:      return state;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好了整个的流程差不多就是这个样子，我们在路由这里调用一下</p><p>router.js</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import React from &#39;react&#39;;import &#123; connect &#125; from &#39;react-redux&#39;import &#123; Route, Redirect &#125; from &#39;react-router-dom&#39;;import styles from &#39;.&#x2F;router.module.css&#39;;import Routers from &#39;..&#x2F;config&#x2F;routes.config&#39;const RootContainer &#x3D; (&#123; userObj &#125;) &#x3D;&gt; &#123;  let token &#x3D; userObj.user  console.log(token, &#39;effect&#39;)  return (    &lt;div className&#x3D;&#123;styles.routerBox&#125;&gt;      &#123;Routers.map((item, index) &#x3D;&gt; &#123;        return &lt;Route key&#x3D;&#123;index&#125; path&#x3D;&#123;item.path&#125; render&#x3D;&#123;props &#x3D;&gt;          (!item.auth ? (&lt;item.component &#123;...props&#125; &#x2F;&gt;) : (token ? &lt;item.component &#123;...props&#125; &#x2F;&gt; : &lt;Redirect exact to&#x3D;&quot;&#x2F;&quot; &#x2F;&gt;)          )&#125; &#x2F;&gt;      &#125;)&#125;    &lt;&#x2F;div &gt;  )&#125;const mapStateToProps &#x3D; state &#x3D;&gt; &#123;  return &#123;    userObj: state.toJS().userReducer  &#125;&#125;export default connect(mapStateToProps)(RootContainer);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>app.js,在使用redirect的时候不能直接使用对应的组件，路由有执行顺序应该先注册一下<br><img src="/record-blog/2021/02/13/20200604/185147_82c86039_5266997.png" alt="输入图片说明"></p><p>上面代码的主要意思是获取token，判断有没有token，如果没有跳转到登录页，如果有展示页面</p><h4 id="以上内容是我星期一到星期三的一些工作内容，下面的是星期四到星期五的工作内容"><a href="#以上内容是我星期一到星期三的一些工作内容，下面的是星期四到星期五的工作内容" class="headerlink" title="以上内容是我星期一到星期三的一些工作内容，下面的是星期四到星期五的工作内容"></a>以上内容是我星期一到星期三的一些工作内容，下面的是星期四到星期五的工作内容</h4><p>用的是vue的antd.design.pro，因为这个项目是之前别人把架子都已经搭好了，直接用的是pro，个人建议不要用，因为太重</p><h4 id="内容展示"><a href="#内容展示" class="headerlink" title="内容展示"></a>内容展示</h4><p><img src="/record-blog/2021/02/13/20200604/image-20200604212742666.png" alt="image-20200604212742666"></p><p><img src="/record-blog/2021/02/13/20200604/image-20200604212823982.png" alt="image-20200604212823982"></p><p>，因为都有现成的所以花了一天时间就写完了，其中也没有遇到什么问题，只能说是对antd.design框架的一个简单应用，说一说印象比较深的地方</p><p><img src="/record-blog/2021/02/13/20200604/image-20200604213045022.png" alt="image-20200604213045022"></p><p>下面的taskForm就是子组件，简单来说就是父子组件的传值。通过父组件让子组件显示和隐藏，这里用个sync，把v-show写在子组件里面，但是这里就不要用v-show了不起作用，用他组件封装好的visible</p><p><img src="/record-blog/2021/02/13/20200604/image-20200604213203482.png" alt="image-20200604213203482"></p><p>把控制权交给子组件</p><p><img src="/record-blog/2021/02/13/20200604/image-20200604213255087.png" alt="image-20200604213255087"></p><p>taskForm,因为用的是一个表单，添加和编辑做个判断就行</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;!-- modal就不要用v-show直接用他提供的visible --&gt;  &lt;a-modal :title&#x3D;&quot;isEdit?&#39;修改&#39;:&#39;新增&#39;&quot; :visible&#x3D;&quot;panelShow&quot; @ok&#x3D;&quot;handleSubmit&quot; @cancel&#x3D;&quot;handleCancel&quot;&gt;    &lt;a-form @submit&#x3D;&quot;handleSubmit&quot; :form&#x3D;&quot;form&quot;&gt;      &lt;a-form-item label&#x3D;&quot;用户名&quot; :labelCol&#x3D;&quot;labelCol&quot; :wrapperCol&#x3D;&quot;wrapperCol&quot;&gt;        &lt;a-input          autocomplete&#x3D;&quot;false&quot;          v-decorator&#x3D;&quot;[&#39;note&#39;, &#123; rules: [&#123; required: true, message: &#39;用户名不能为空&#39; &#125;],initialValue:isEdit?(dataRow&amp;&amp;dataRow.owner):&#39;&#39;&#125;]&quot;        &#x2F;&gt;      &lt;&#x2F;a-form-item&gt;      &lt;a-form-item label&#x3D;&quot;密码&quot; :labelCol&#x3D;&quot;labelCol&quot; :wrapperCol&#x3D;&quot;wrapperCol&quot;&gt;        &lt;a-input          autocomplete&#x3D;&quot;false&quot;          type&#x3D;&quot;password&quot;          v-decorator&#x3D;&quot;[&#39;pwd&#39;, &#123; rules: [&#123; required: true, message: &#39;密码不能为空&#39; &#125;],initialValue: &#39;&#39; &#125;]&quot;        &#x2F;&gt;      &lt;&#x2F;a-form-item&gt;  &lt;a-form-item label&#x3D;&quot;秘钥&quot; :labelCol&#x3D;&quot;labelCol&quot; :wrapperCol&#x3D;&quot;wrapperCol&quot;&gt;        &lt;a-input          onkeyup&#x3D;&quot;value&#x3D;value.replace(&#x2F;[^a-zA-Z]&#x2F;g,&#39;&#39;)&quot;          :min&#x3D;&quot;4&quot;          autocomplete&#x3D;&quot;false&quot;          placeholder&#x3D;&quot;请输入英文秘钥&quot;          v-decorator&#x3D;&quot;[&#39;secret&#39;, &#123; rules: [&#123; required: true, message: &#39;秘钥不能为空&#39; &#125;, &#123;min:4,message: &#39;密码不能少于4个字         符&#39;&#125;],initialValue: &#39;&#39; &#125;]&quot;        &#x2F;&gt;      &lt;&#x2F;a-form-item&gt;      &lt;a-form-item label&#x3D;&quot;有效时间&quot; :labelCol&#x3D;&quot;labelCol&quot; :wrapperCol&#x3D;&quot;wrapperCol&quot;&gt;        &lt;a-select v-decorator&#x3D;&quot;[&#39;time&#39;, &#123;rules:[&#123;required: true, message: &#39;请选择开始时间&#39;&#125;]&#125;]&quot;&gt;          &lt;a-select-option :value&#x3D;&quot;0&quot;&gt;1天&lt;&#x2F;a-select-option&gt;          &lt;a-select-option :value&#x3D;&quot;1&quot;&gt;3天&lt;&#x2F;a-select-option&gt;          &lt;a-select-option :value&#x3D;&quot;2&quot;&gt;7天&lt;&#x2F;a-select-option&gt;          &lt;a-select-option :value&#x3D;&quot;3&quot;&gt;长期&lt;&#x2F;a-select-option&gt;        &lt;&#x2F;a-select&gt;      &lt;&#x2F;a-form-item&gt;      &lt;a-form-item label&#x3D;&quot;可见应用&quot; :labelCol&#x3D;&quot;labelCol&quot; :wrapperCol&#x3D;&quot;wrapperCol&quot;&gt;        &lt;a-select          v-decorator&#x3D;&quot;[            &#39;use&#39;,            &#123;              rules: [                &#123; required: true, message: &#39;请选择至少一项&#39;, type: &#39;array&#39; &#125;,              ],            &#125;          ]&quot;          mode&#x3D;&quot;multiple&quot;        &gt;          &lt;a-select-option :value&#x3D;&quot;0&quot;&gt;智慧乡村&lt;&#x2F;a-select-option&gt;          &lt;a-select-option :value&#x3D;&quot;1&quot;&gt;智慧园区&lt;&#x2F;a-select-option&gt;          &lt;a-select-option :value&#x3D;&quot;2&quot;&gt;智慧农林&lt;&#x2F;a-select-option&gt;          &lt;a-select-option :value&#x3D;&quot;3&quot;&gt;其他&lt;&#x2F;a-select-option&gt;        &lt;&#x2F;a-select&gt;      &lt;&#x2F;a-form-item&gt;    &lt;&#x2F;a-form&gt;  &lt;&#x2F;a-modal&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &#39;TaskForm&#39;,  props: &#123;    record: &#123;      type: Object,      default: null    &#125;,    panelShow: &#123;      type: Boolean    &#125;,    dataRow: &#123;      type: Object,      default: null    &#125;,    isEdit: &#123;      type: Boolean    &#125;  &#125;,  data () &#123;    return &#123;      labelCol: &#123;        xs: &#123; span: 24 &#125;,        sm: &#123; span: 5 &#125;      &#125;,      wrapperCol: &#123;        xs: &#123; span: 24 &#125;,        sm: &#123; span: 18 &#125;      &#125;,      form: this.$form.createForm(this)    &#125;  &#125;,  mounted () &#123;  &#125;,  methods: &#123;    onOk () &#123;      &#x2F;&#x2F; console.log(&#39;监听了 modal ok 事件&#39;)      return new Promise(resolve &#x3D;&gt; &#123;        resolve(true)      &#125;)    &#125;,    onCancel () &#123;      &#x2F;&#x2F; console.log(&#39;监听了 modal cancel 事件&#39;)      return new Promise(resolve &#x3D;&gt; &#123;        resolve(true)      &#125;)    &#125;,    handleSubmit () &#123;      this.form.validateFields(err &#x3D;&gt; &#123;        console.log(err)        if (!err) &#123;          &#x2F;&#x2F; 不用再绑定ref，直接使用form          this.form.resetFields()          this.$emit(&#39;update:panelShow&#39;, false)        &#125;      &#125;)    &#125;,    handleCancel () &#123;      this.form.resetFields()      this.$emit(&#39;update:panelShow&#39;, false)    &#125;  &#125;,  watch: &#123;    isVisible (val) &#123;      console.log(val)      this.IsShowPage &#x3D; val &#x2F;&#x2F; 新增isVisible的watch，监听变更并同步到IsShowPage上    &#125;  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目前为止，个人认为两个库，各有有缺点，目前react用的比较顺手，虽然有很多地方也没弄懂:sweat_smile:</p><p> <strong>生活的一部分是工作，工作的一部分是解决问题取悦生活，所以好好生活，好好工作，好好热爱(●ˇ∀ˇ●)</strong> </p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年5月15日(react)</title>
      <link href="/record-blog/2021/02/13/20200515/"/>
      <url>/record-blog/2021/02/13/20200515/</url>
      
        <content type="html"><![CDATA[<h2 id="react-hook-antd-deisgn-左右菜单联动（2020-5-24）"><a href="#react-hook-antd-deisgn-左右菜单联动（2020-5-24）" class="headerlink" title="react hook antd.deisgn 左右菜单联动（2020.5.24）"></a><code>react hook antd.deisgn</code> 左右菜单联动（2020.5.24）</h2><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a><strong>效果图</strong></h4><p><img src="/record-blog/2021/02/13/20200515/image-20200524230959499.png" alt="首页"></p><h4 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a><strong>案例说明</strong></h4><p>点击左边的侧边栏的切换到对应的内容到顶部，滚动内容看，菜单也随之切换，有一个联动的效果</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>组件拆分，可以分为侧边栏，内容区域，和头部，可以根据<code>antd.design</code>提供的组件,来进行布局，既然左右达到联动的效果，就说明肯定是有交互的，可以根据父级来进行交互</p><p><img src="/record-blog/2021/02/13/20200515/image-20200524231626179.png" alt="布局代码"></p><p>这一个页面其实就是他们的父级，可以定义相关的变量，比如菜单是根据key进行切换，那么可以吧key定义在父级，传到需要联动的组件里面去</p><p><img src="/record-blog/2021/02/13/20200515/image-20200524231840631.png" alt="image-20200524231840631"></p><p>包括在hook里面父组件需要拿到子组件的一些方法，使用forward</p><p>首先需要在父级先定义一个ref</p><p><img src="/record-blog/2021/02/13/20200515/image-20200524232009807.png" alt="image-20200524232009807"></p><p>并且传递给子组件</p><p><img src="/record-blog/2021/02/13/20200515/image-20200524232053248.png" alt="image-20200524232053248"></p><p>然后子组件接收</p><p><img src="/record-blog/2021/02/13/20200515/image-20200524232127463.png" alt="forwardRef"></p><p>这样父级就可以拿到子组件的方法，需要注意的是不能一起结构赋值，比如{item，ref}，这样会报错，提示只有一个参数，这也算是一个坑吧</p><p>拿到高度之后需要对滚动条进行监听</p><p><img src="/record-blog/2021/02/13/20200515/image-20200524232456067.png" alt="image-20200524232456067"></p><p><img src="/record-blog/2021/02/13/20200515/image-20200524232518139.png" alt="防抖函数"></p><p>根据滚动条距离顶部的高度，和各个组件的高度进行判断，切换哪一个key，写了一个防抖函数，提升性能，同样包括监听窗口大小的事件一样</p><h4 id="项目体会"><a href="#项目体会" class="headerlink" title="项目体会"></a>项目体会</h4><p>第一次写react的小案例，觉得不好实现，也是花费了很长的时间去做，做完之后其实就是组件之间的一些通信，传值，和一些简单的逻辑操作，代码的优化，争取每个星期都整理一下这个星期用到的东西</p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
